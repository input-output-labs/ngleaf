{
    "pipes": [],
    "interfaces": [
        {
            "name": "AdmininistrationState",
            "id": "interface-AdmininistrationState-5b2d72e7ff72debec9c9a3c58a6ecd030b4a34ae758c30c2a992fe162ce20349d3e0af9f4705a08cb9f36657e95636b2dd223d4449c61513011e45a9f845c1dd",
            "file": "projects/ngleaf/src/store/core/administration/administration.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LeafAccountModel, LeafAuthorizedEmailModel } from '../../../api/models/index';\r\n\r\nexport interface AdmininistrationState {\r\n  authorizedEmails: LeafAuthorizedEmailModel[];\r\n  administrators: string[];\r\n  users: LeafAccountModel[];\r\n}\r\n",
            "properties": [
                {
                    "name": "administrators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "authorizedEmails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafAuthorizedEmailModel[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafAccountModel[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ApisConfig",
            "id": "interface-ApisConfig-e015fdd32e2c1ca193621338f8a32509bc0b17b377d1ec9266978c0a6ecbf9928f70624f9bf2cb4c9d619a5a6ec12c0a0570b6a40491766f167324c58eacc426",
            "file": "projects/ngleaf/src/models/leaf-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafNavigationConfig {\r\n  authGuardErrorRedirect?: string;\r\n  adminGuardErrorRedirect?: string;\r\n  loginSuccessRedirect?: string;\r\n  registerSuccessRedirect?: string;\r\n  logoutRedirect?: string;\r\n}\r\n\r\nexport interface ApisConfig {\r\n  pixabay_api_key?: string;\r\n}\r\n\r\nexport interface LeafConfig {\r\n  serverUrl: string;\r\n  navigation: LeafNavigationConfig;\r\n  apis?: ApisConfig;\r\n}\r\n",
            "properties": [
                {
                    "name": "pixabay_api_key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-10bfde5c39f5127f52df187677708fa2f5c5d5609abc9145fbd4f9f53fc940c775fd541f289a641d82fec8d3ac58016ebc5934ed85d754a6a26d357438a279fd",
            "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createSelector } from '@ngrx/store';\r\nimport { AdmininistrationState } from './administration.state';\r\n\r\ninterface AppState {\r\n  administration: AdmininistrationState;\r\n}\r\n\r\nconst selectAdministrationSession = (state: AppState) => state.administration;\r\n\r\nexport const selectAuthorizedEmails = createSelector(\r\n  selectAdministrationSession,\r\n  (state: AdmininistrationState) => state.authorizedEmails\r\n);\r\n\r\nexport const selectAdministrators = createSelector(\r\n  selectAdministrationSession,\r\n (state: AdmininistrationState) => state.administrators\r\n);\r\n\r\nexport const selectUsers = createSelector(\r\n  selectAdministrationSession,\r\n (state: AdmininistrationState) => state.users\r\n);\r\n",
            "properties": [
                {
                    "name": "administration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdmininistrationState",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-9f9299123b19a010b2790fa5f6009bb5747bfd4beaeb28f75ef71cb8b47d22fab392da5a94f2bc958ff64c0967559cbae9bccb4b356a11d0320ff004e07ea722-1",
            "file": "projects/ngleaf/src/store/core/notification/notification.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createSelector } from '@ngrx/store';\r\nimport { NotificationState } from './notification.state';\r\n\r\ninterface AppState {\r\n  notification: NotificationState;\r\n}\r\n\r\nconst selectNotification = (state: AppState) => state.notification;\r\n\r\nexport const selectNotifications = createSelector(\r\n  selectNotification,\r\n  (state: NotificationState) => state.notifications\r\n);\r\n",
            "properties": [
                {
                    "name": "notification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationState",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppState-1"
        },
        {
            "name": "AppState",
            "id": "interface-AppState-3ec64e9b93e30a3f5fe3dfc039da40c1d8f6b9b6ccf5116d4b958a427eb3aa52f092ea3ec18e32351f4bb901da9f5f0c175a8fa8d67e6d31035a0d6f799a283d-2",
            "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createSelector } from '@ngrx/store';\r\nimport { AsyncType } from '../../common/index';\r\nimport { JWTModel, LeafAccountModel } from '../../../api/models/index';\r\nimport { SessionState } from './session.state';\r\n\r\ninterface AppState {\r\n  session: SessionState;\r\n}\r\n\r\nconst selectSession = (state: AppState) => state.session;\r\n\r\nexport const selectSessionState = createSelector(\r\n  selectSession,\r\n (state: SessionState) => state\r\n);\r\nexport const selectCurrentAccount = createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.currentAccount\r\n);\r\nexport const selectCurrentAccountData = createSelector(\r\n  selectCurrentAccount,\r\n  (currentAccount: AsyncType<LeafAccountModel>) => currentAccount.data\r\n);\r\nexport const selectSessionToken = createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.sessionToken\r\n);\r\nexport const selectSendResetPasswordKey = createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.sendResetPasswordKey\r\n);\r\nexport const selectResetPassword = createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.resetPassword\r\n);\r\nexport const selectUpdatePassword = createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.updatePassword\r\n);\r\nexport const selectIsPending = createSelector(\r\n  selectCurrentAccount,\r\n  selectSessionToken,\r\n  selectSendResetPasswordKey,\r\n  selectResetPassword,\r\n  selectUpdatePassword,\r\n (\r\n   currentAccount: AsyncType<LeafAccountModel>,\r\n   sessionToken: AsyncType<JWTModel>,\r\n   sendResetPasswordKey: AsyncType<void>,\r\n   resetPassword: AsyncType<void>,\r\n   updatePassword: AsyncType<LeafAccountModel>\r\n ) => currentAccount.status.pending || sessionToken.status.pending || sendResetPasswordKey.status.pending || resetPassword.status.pending || updatePassword.status.pending\r\n);\r\n",
            "properties": [
                {
                    "name": "session",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SessionState",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "AppState-2"
        },
        {
            "name": "AppState",
            "id": "interface-AppState-7c7c1463ed99101ccaba1539b2034e401bb3845a35f2c15481431b5e05a424ae36a8d8416aaebcf67ad6710cb170e13a6656166d4fd4a9a100d6fc3a55e12004-3",
            "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createSelector } from '@ngrx/store';\r\nimport { AsyncType } from '../../common/index';\r\nimport { LeafStatistic } from '../../../api/models/index';\r\nimport { StatisticsState } from './statistics.state';\r\n\r\ninterface AppState {\r\n  statistics: StatisticsState;\r\n}\r\n\r\nconst selectStatisticsFromAppState = (state: AppState) => state.statistics;\r\n\r\nexport const selectStatisticsState = createSelector(\r\n  selectStatisticsFromAppState,\r\n (state: StatisticsState) => state\r\n);\r\nexport const selectStatistics = createSelector(\r\n  selectStatisticsFromAppState,\r\n  (state: StatisticsState) => state.statistics\r\n);\r\nexport const selectStatisticsData = createSelector(\r\n  selectStatistics,\r\n  (statistics: AsyncType<LeafStatistic[]>) => statistics.data\r\n);\r\n",
            "properties": [
                {
                    "name": "statistics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatisticsState",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "AppState-3"
        },
        {
            "name": "AsyncStatus",
            "id": "interface-AsyncStatus-5daf355cc928bf69a83f7be148ae6b3033126ea7d1a6af9dd5a9990093a71426b407371a7123753881a6f4d90015e0c4150977a9ad6bbd4d9971c156aad7a291",
            "file": "projects/ngleaf/src/store/common/async-type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport function asyncTypeSuccess<T>(asyncObject: AsyncType<T>, data?: T) {\r\n  return {\r\n      ...asyncObject,\r\n      data,\r\n      status: {\r\n          pending: false,\r\n          failure: false,\r\n          success: true\r\n      }\r\n  };\r\n}\r\n\r\nexport function asyncTypeFailure<T>(asyncObject: AsyncType<T>, error: any) {\r\n  return {\r\n      ...asyncObject,\r\n      error,\r\n      status: {\r\n          pending: false,\r\n          failure: true,\r\n          success: false\r\n      }\r\n  };\r\n}\r\n\r\nexport function createAsyncTypeFromCall<T>(call?: Observable<T>) {\r\n  return {\r\n      data: undefined,\r\n      error: undefined,\r\n      call,\r\n      status: {\r\n          pending: true,\r\n          failure: undefined,\r\n          success: undefined\r\n      }\r\n  };\r\n}\r\n\r\nexport function createEmptyAsyncType() {\r\n  return {\r\n      data: undefined,\r\n      error: undefined,\r\n      call: undefined,\r\n      status: {\r\n          pending: false,\r\n          failure: undefined,\r\n          success: undefined\r\n      }\r\n  };\r\n}\r\n\r\nexport interface AsyncStatus {\r\n  pending: boolean;\r\n  failure: boolean;\r\n  success: boolean;\r\n}\r\n\r\nexport interface AsyncType<T> {\r\n  data?: T;\r\n  error?: any;\r\n  call: Observable<T>;\r\n  status: AsyncStatus;\r\n}\r\n",
            "properties": [
                {
                    "name": "failure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "pending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AsyncType",
            "id": "interface-AsyncType-5daf355cc928bf69a83f7be148ae6b3033126ea7d1a6af9dd5a9990093a71426b407371a7123753881a6f4d90015e0c4150977a9ad6bbd4d9971c156aad7a291",
            "file": "projects/ngleaf/src/store/common/async-type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport function asyncTypeSuccess<T>(asyncObject: AsyncType<T>, data?: T) {\r\n  return {\r\n      ...asyncObject,\r\n      data,\r\n      status: {\r\n          pending: false,\r\n          failure: false,\r\n          success: true\r\n      }\r\n  };\r\n}\r\n\r\nexport function asyncTypeFailure<T>(asyncObject: AsyncType<T>, error: any) {\r\n  return {\r\n      ...asyncObject,\r\n      error,\r\n      status: {\r\n          pending: false,\r\n          failure: true,\r\n          success: false\r\n      }\r\n  };\r\n}\r\n\r\nexport function createAsyncTypeFromCall<T>(call?: Observable<T>) {\r\n  return {\r\n      data: undefined,\r\n      error: undefined,\r\n      call,\r\n      status: {\r\n          pending: true,\r\n          failure: undefined,\r\n          success: undefined\r\n      }\r\n  };\r\n}\r\n\r\nexport function createEmptyAsyncType() {\r\n  return {\r\n      data: undefined,\r\n      error: undefined,\r\n      call: undefined,\r\n      status: {\r\n          pending: false,\r\n          failure: undefined,\r\n          success: undefined\r\n      }\r\n  };\r\n}\r\n\r\nexport interface AsyncStatus {\r\n  pending: boolean;\r\n  failure: boolean;\r\n  success: boolean;\r\n}\r\n\r\nexport interface AsyncType<T> {\r\n  data?: T;\r\n  error?: any;\r\n  call: Observable<T>;\r\n  status: AsyncStatus;\r\n}\r\n",
            "properties": [
                {
                    "name": "call",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncStatus",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ChartSerie",
            "id": "interface-ChartSerie-c7f6ac6434a2ce373c76c37e85cd1d759c36147df090be6d5cb2f15b7828b9f8b1b5ab87fd288aea71e797c2888dfd2c09ca2647f3cb8a63cb58f8064345a8e0",
            "file": "projects/ngleaf/src/components/common/statistics-viewer/chart.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ChartValue {\r\n  name: string;\r\n  value: number;\r\n}\r\n\r\nexport interface ChartSerie {\r\n  name: string;\r\n  series: ChartValue[];\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartValue[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ChartValue",
            "id": "interface-ChartValue-c7f6ac6434a2ce373c76c37e85cd1d759c36147df090be6d5cb2f15b7828b9f8b1b5ab87fd288aea71e797c2888dfd2c09ca2647f3cb8a63cb58f8064345a8e0",
            "file": "projects/ngleaf/src/components/common/statistics-viewer/chart.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ChartValue {\r\n  name: string;\r\n  value: number;\r\n}\r\n\r\nexport interface ChartSerie {\r\n  name: string;\r\n  series: ChartValue[];\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CheckboxConfig",
            "id": "interface-CheckboxConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "labelKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Data",
            "id": "interface-Data-ec9bdf507dcc24627cdebb3047432ef7df40819d701019274ebbc1908d03d9569ddf8c39c3744ab237739d28209205e7811c7b88e4a89bc4d13ebeb1fab7187e",
            "file": "projects/ngleaf/src/services/web-images-seeker/web-images-seeker-dialog/leaf-web-images-seeker-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { LeafWebImagesSeekerService } from '../leaf-web-images-seeker.service';\r\n\r\ninterface Data {\r\n  prefill: string;\r\n}\r\n\r\n@Component({\r\n  templateUrl: './leaf-web-images-seeker-dialog.component.html',\r\n  styleUrls: ['./leaf-web-images-seeker-dialog.component.scss']\r\n})\r\nexport class LeafWebImagesSeekerDialogComponent {\r\n\r\n  public results$: Observable<string[]>;\r\n  public selectedImageIndex = -1;\r\n  public inputFormControl: FormControl = new FormControl('');\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LeafWebImagesSeekerDialogComponent>,\r\n    private leafWebImagesSeekerService: LeafWebImagesSeekerService,\r\n    @Inject(MAT_DIALOG_DATA) public data: Data\r\n  ) {\r\n    this.inputFormControl.valueChanges.subscribe(\r\n      (searchValue) => {\r\n        this.results$ = this.leafWebImagesSeekerService.searchImages(searchValue);\r\n      }\r\n    );\r\n\r\n    this.inputFormControl.setValue(data.prefill);\r\n  }\r\n\r\n  selectImage(index: number) {\r\n    this.selectedImageIndex = this.selectedImageIndex === index ? -1 : index;\r\n  }\r\n\r\n  validate(): void {\r\n    this.results$.pipe(take(1)).subscribe(results => {\r\n      this.dialogRef.close(results[this.selectedImageIndex]);\r\n    });\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close(undefined);\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "prefill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GenericFormActionConfig",
            "id": "interface-GenericFormActionConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemePalette",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "labelKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GenericFormConfig",
            "id": "interface-GenericFormConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormActionConfig[]",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "grid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormGridConfig",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormInputConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "titleKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GenericFormGridConfig",
            "id": "interface-GenericFormGridConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "gutterSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "rowHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GenericInputConfig",
            "id": "interface-GenericInputConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "colspan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "rowspan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormInputType",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "InputConfig",
            "id": "interface-InputConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "appearance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatFormFieldAppearance",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemePalette",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "labelKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "placeholderKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IRequestOptions",
            "id": "interface-IRequestOptions-1247953a3fcee38f2cc39ff0b5877d440b60bcc9a28b19c81c9a1563cf8fa005fdb2d0f194543aea448eb35f89b0be1f84e066d65ee459ab26cdd2f98f32be4c",
            "file": "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IRequestOptions {\r\n  headers?: HttpHeaders;\r\n  observe?: 'body';\r\n  params?: HttpParams;\r\n  reportProgress?: boolean;\r\n  responseType?: 'json';\r\n  withCredentials?: boolean;\r\n  body?: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useFactory: applicationHttpClientCreator,\r\n  deps: [HttpClient],\r\n})\r\nexport class LeafAuthHttpClient {\r\n  public jwtoken: string;\r\n\r\n  public constructor(public http: HttpClient) {}\r\n\r\n  public setJwtoken(jwtoken: string): void {\r\n    this.jwtoken = jwtoken;\r\n  }\r\n\r\n  public addHeaders(options?: IRequestOptions): IRequestOptions {\r\n    const authenticatedOptions = options || { headers: new HttpHeaders() };\r\n    authenticatedOptions.headers =\r\n      authenticatedOptions.headers || new HttpHeaders();\r\n    authenticatedOptions.headers = authenticatedOptions.headers.set(\r\n      'Cache-Control',\r\n      'no-cache'\r\n    );\r\n    authenticatedOptions.headers = authenticatedOptions.headers.set(\r\n      'Pragma',\r\n      'no-cache'\r\n    );\r\n    authenticatedOptions.headers = authenticatedOptions.headers.set(\r\n      'Expires',\r\n      'Sat, 01 Jan 2000 00:00:00 GMT'\r\n    );\r\n    if (this.jwtoken) {\r\n      authenticatedOptions.headers = authenticatedOptions.headers.set(\r\n        'Authorization',\r\n        this.jwtoken\r\n      );\r\n      return authenticatedOptions;\r\n    }\r\n    return options;\r\n  }\r\n\r\n  public get<T>(endPoint: string, options?: IRequestOptions): Observable<T> {\r\n    return this.http.get<T>(endPoint, this.addHeaders(options));\r\n  }\r\n\r\n  public post<T>(\r\n    endPoint: string,\r\n    params: any,\r\n    options?: IRequestOptions\r\n  ): Observable<T> {\r\n    return this.http.post<T>(endPoint, params, this.addHeaders(options));\r\n  }\r\n\r\n  public patch<T>(\r\n    endPoint: string,\r\n    params: any,\r\n    options?: IRequestOptions\r\n  ): Observable<T> {\r\n    return this.http.patch<T>(endPoint, params, this.addHeaders(options));\r\n  }\r\n\r\n  public put<T>(\r\n    endPoint: string,\r\n    params: any,\r\n    options?: IRequestOptions\r\n  ): Observable<T> {\r\n    return this.http.put<T>(endPoint, params, this.addHeaders(options));\r\n  }\r\n\r\n  public delete<T>(endPoint: string, options?: IRequestOptions): Observable<T> {\r\n    return this.http.delete<T>(endPoint, this.addHeaders(options));\r\n  }\r\n}\r\n\r\nexport function applicationHttpClientCreator(http: HttpClient) {\r\n  return new LeafAuthHttpClient(http);\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpHeaders",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "observe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParams",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "reportProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "withCredentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "JWTModel",
            "id": "interface-JWTModel-3a96ea5c3add49d3e5f8466e5124eb55eb5e07fa093bec9e227230e534060eca3586ac13f8c122208a2eab8c11ed1c97e3b33aa5e6f5cc94875e767db460a0af",
            "file": "projects/ngleaf/src/api/models/jwt.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface JWTModel {\r\n  token: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafAccountModel",
            "id": "interface-LeafAccountModel-bbfa28ef4960f7219821fb8620c4e14b88bf9e38d92f67692a77f2394c736384690bcf8a400e3dd792dc23872250f3c0f597b2af3bc4d685697df6f7d144c0a3",
            "file": "projects/ngleaf/src/api/models/leaf-account.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafPrivateTokenModel {\r\n  name?: string;\r\n  created?: Date;\r\n  expiration?: Date;\r\n  accountId?: string;\r\n}\r\n\r\nexport interface LeafUserModel {\r\n  id?: string;\r\n  username?: string;\r\n  avatarUrl?: string;\r\n}\r\n\r\nexport interface LeafAccountModel extends LeafUserModel {\r\n  email: string;\r\n  password?: string;\r\n  admin?: boolean;\r\n  privateTokens?: LeafPrivateTokenModel[];\r\n  modules?: {[moduleName: string]: any};\r\n}\r\n",
            "properties": [
                {
                    "name": "admin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "privateTokens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafPrivateTokenModel[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "LeafUserModel"
        },
        {
            "name": "LeafApiClientConfig",
            "id": "interface-LeafApiClientConfig-03616f33d9ab1c00ccc9902233f247e3090c3e23e9d73b425c0f6e420f1b55d5578473f5f8175c15c97ee5ab05ca09dda2b26b9001ca35f5ae158759f0a43ed4",
            "file": "projects/ngleaf/src/api/clients/api-client-config.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nexport interface LeafApiClientConfig {\r\n  serverUrl: string;\r\n}\r\n\r\n// Injection token\r\nexport const LeafApiClientConfigServiceToken = new InjectionToken<LeafApiClientConfig>('LEAF_API_CLIENT_CONFIG');\r\n\r\n@NgModule()\r\nexport class LeafApiClientConfigServiceModule {\r\n  static forRoot(config: LeafApiClientConfig): ModuleWithProviders<LeafApiClientConfigServiceModule> {\r\n    return {\r\n      ngModule: LeafApiClientConfigServiceModule,\r\n      providers: [\r\n        {\r\n          provide: LeafApiClientConfigServiceToken,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "serverUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafAuthorizedEmailModel",
            "id": "interface-LeafAuthorizedEmailModel-2fa9a05af78ade7f7e72f45765c5b04724a33ef2f6996b48b4d0e4b4dc279a894ca69a0370078a11b403aca94e659efee1b23f52921a2249ca3588c747e7e647",
            "file": "projects/ngleaf/src/api/models/leaf-authorized-email.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafAuthorizedEmailModel {\r\n  email: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafConfig",
            "id": "interface-LeafConfig-e015fdd32e2c1ca193621338f8a32509bc0b17b377d1ec9266978c0a6ecbf9928f70624f9bf2cb4c9d619a5a6ec12c0a0570b6a40491766f167324c58eacc426",
            "file": "projects/ngleaf/src/models/leaf-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafNavigationConfig {\r\n  authGuardErrorRedirect?: string;\r\n  adminGuardErrorRedirect?: string;\r\n  loginSuccessRedirect?: string;\r\n  registerSuccessRedirect?: string;\r\n  logoutRedirect?: string;\r\n}\r\n\r\nexport interface ApisConfig {\r\n  pixabay_api_key?: string;\r\n}\r\n\r\nexport interface LeafConfig {\r\n  serverUrl: string;\r\n  navigation: LeafNavigationConfig;\r\n  apis?: ApisConfig;\r\n}\r\n",
            "properties": [
                {
                    "name": "apis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApisConfig",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafNavigationConfig",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "serverUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafFileModel",
            "id": "interface-LeafFileModel-b919d503fa98526f8a202d1e9c3a72d28d1ee3748472db5c306fb7248a2ce554525716f062a5f9dbbd9d6e3d8736265d8b25bbff0534471690ad145a35d24d59",
            "file": "projects/ngleaf/src/api/models/leaf-file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafFileModel {\r\n  id: string;\r\n  uploadDateTime: string;\r\n  uploaderAccountId: string;\r\n  contentType: string;\r\n  url: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "contentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "uploadDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "uploaderAccountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafNavigationConfig",
            "id": "interface-LeafNavigationConfig-e015fdd32e2c1ca193621338f8a32509bc0b17b377d1ec9266978c0a6ecbf9928f70624f9bf2cb4c9d619a5a6ec12c0a0570b6a40491766f167324c58eacc426",
            "file": "projects/ngleaf/src/models/leaf-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafNavigationConfig {\r\n  authGuardErrorRedirect?: string;\r\n  adminGuardErrorRedirect?: string;\r\n  loginSuccessRedirect?: string;\r\n  registerSuccessRedirect?: string;\r\n  logoutRedirect?: string;\r\n}\r\n\r\nexport interface ApisConfig {\r\n  pixabay_api_key?: string;\r\n}\r\n\r\nexport interface LeafConfig {\r\n  serverUrl: string;\r\n  navigation: LeafNavigationConfig;\r\n  apis?: ApisConfig;\r\n}\r\n",
            "properties": [
                {
                    "name": "adminGuardErrorRedirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "authGuardErrorRedirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "loginSuccessRedirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "logoutRedirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "registerSuccessRedirect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafNotificationModel",
            "id": "interface-LeafNotificationModel-99a98798424bb7dde4bb8656f4d96f998822db6148cb82aebfbdf9ae59c367aab4cf6c06a279ac199a952b16ba0e8ff0df1c5f4aa012c1c31230f24a6e78a5da",
            "file": "projects/ngleaf/src/models/leaf-notification.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafNotificationModel {\r\n  id: string;\r\n  category: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafPrivateTokenModel",
            "id": "interface-LeafPrivateTokenModel-bbfa28ef4960f7219821fb8620c4e14b88bf9e38d92f67692a77f2394c736384690bcf8a400e3dd792dc23872250f3c0f597b2af3bc4d685697df6f7d144c0a3",
            "file": "projects/ngleaf/src/api/models/leaf-account.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafPrivateTokenModel {\r\n  name?: string;\r\n  created?: Date;\r\n  expiration?: Date;\r\n  accountId?: string;\r\n}\r\n\r\nexport interface LeafUserModel {\r\n  id?: string;\r\n  username?: string;\r\n  avatarUrl?: string;\r\n}\r\n\r\nexport interface LeafAccountModel extends LeafUserModel {\r\n  email: string;\r\n  password?: string;\r\n  admin?: boolean;\r\n  privateTokens?: LeafPrivateTokenModel[];\r\n  modules?: {[moduleName: string]: any};\r\n}\r\n",
            "properties": [
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "expiration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafStatistic",
            "id": "interface-LeafStatistic-62c2ecbd13192cc99725598dee2c229130d0cbb77c3d54741f9222778c720ccbb80bb2e0f48b502f9ec6058742473944c40e7b12658fa71a9c6811e1fad2bb91",
            "file": "projects/ngleaf/src/api/models/leaf-statistic.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafStatistic {\r\n  id: string;\r\n  creationDateTime: Date;\r\n  data: {[key: string]: number}\r\n}\r\n",
            "properties": [
                {
                    "name": "creationDateTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LeafUserModel",
            "id": "interface-LeafUserModel-bbfa28ef4960f7219821fb8620c4e14b88bf9e38d92f67692a77f2394c736384690bcf8a400e3dd792dc23872250f3c0f597b2af3bc4d685697df6f7d144c0a3",
            "file": "projects/ngleaf/src/api/models/leaf-account.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LeafPrivateTokenModel {\r\n  name?: string;\r\n  created?: Date;\r\n  expiration?: Date;\r\n  accountId?: string;\r\n}\r\n\r\nexport interface LeafUserModel {\r\n  id?: string;\r\n  username?: string;\r\n  avatarUrl?: string;\r\n}\r\n\r\nexport interface LeafAccountModel extends LeafUserModel {\r\n  email: string;\r\n  password?: string;\r\n  admin?: boolean;\r\n  privateTokens?: LeafPrivateTokenModel[];\r\n  modules?: {[moduleName: string]: any};\r\n}\r\n",
            "properties": [
                {
                    "name": "avatarUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoginModel",
            "id": "interface-LoginModel-7c77619174edfe2706e60ae053de85c1381aadc2d11e9ed03f829509de0ff42dcc9ae8d2b409daab79e8c3d44ec80238630462063858f254ac99400e139f5637",
            "file": "projects/ngleaf/src/api/models/login.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoginModel {\r\n  email: string;\r\n  password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NavigationItem",
            "id": "interface-NavigationItem-b639032a8d9a43c023000dd1b6e4a1160fdca8761355c27e393190708298f0f212e0a348d2b671e9b42a93782b87c80336823dd44dc84e56cd5155f1e780df00",
            "file": "projects/ngleaf/src/components/templates/navigation/navigation.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, TemplateRef } from '@angular/core';\r\n\r\nexport interface NavigationItem {\r\n  link: string;\r\n  label: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'leaf-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.scss']\r\n})\r\nexport class NavigationComponent {\r\n\r\n  @Input() headerTemplate: TemplateRef<any>;\r\n  @Input() contentTemplate: TemplateRef<any>;\r\n\r\n  @Input() links: NavigationItem[];\r\n  @Input() title = 'app';\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NotificationState",
            "id": "interface-NotificationState-a472a0ea37a142726dd0e811ffb09c7074c9605c2c0608a49a63e49508705def7c4805e694eb370a1bb87ad235ca75da19c646022eae5f61b265b9591994508a",
            "file": "projects/ngleaf/src/store/core/notification/notification.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LeafNotificationModel } from '../../../models/index';\r\n\r\nexport interface NotificationState {\r\n  notifications: LeafNotificationModel;\r\n}\r\n",
            "properties": [
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafNotificationModel",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PasswordChangingModel",
            "id": "interface-PasswordChangingModel-1f195d36533bed139af279b596aa812e19aeb394130b7ce9ec245332f372b709bbbd9d1749aa027b732e8b9bf99fe5640569250dde03c94db977dc5d82d8a24d",
            "file": "projects/ngleaf/src/api/models/password-changing.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PasswordChangingModel {\r\n  oldPassword: string;\r\n  newPassword: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "newPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "oldPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PasswordResettingModel",
            "id": "interface-PasswordResettingModel-00190a70a24557f60f1be61fa3807fdc4a0888695fc9813abdbf3cd449931f3a93fabc40244fabf75dfa0add27a007841966596f706b6b70ed8fc2af6099aab7",
            "file": "projects/ngleaf/src/api/models/password-resetting.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PasswordResettingModel {\r\n  key: string;\r\n  password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RadioConfig",
            "id": "interface-RadioConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "labelKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RadiosConfig",
            "id": "interface-RadiosConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "radios",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RegistrationModel",
            "id": "interface-RegistrationModel-37976c19277ac33b84a0b557481ecd97740a6d997a9abc7dd1dc5073771a404a06fb3cbef2aed3a79f156dacdb289bf19cb5da142f42ba81d519a8173e27081e",
            "file": "projects/ngleaf/src/api/models/registration.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RegistrationModel {\r\n  email: string;\r\n  password: string;\r\n  username?: string;\r\n  avatarUrl?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatarUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SessionState",
            "id": "interface-SessionState-da724ebeba8b74e7cb5f67030b854cd857bca485a36c2cb65b41d077501df5ce35fd3d1721c02906c213c8bf11ddf628f52058691f5aff3911eadf1ab0897d43",
            "file": "projects/ngleaf/src/store/core/session/session.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { JWTModel, LeafAccountModel } from '../../../api/models/index';\r\nimport { AsyncType } from '../../common/index';\r\n\r\nexport interface SessionState {\r\n  currentAccount: AsyncType<LeafAccountModel>;\r\n  sessionToken: AsyncType<JWTModel>;\r\n  sendResetPasswordKey: AsyncType<void>;\r\n  resetPassword: AsyncType<void>;\r\n  updatePassword: AsyncType<LeafAccountModel>;\r\n}\r\n",
            "properties": [
                {
                    "name": "currentAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncType<LeafAccountModel>",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "resetPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncType<void>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sendResetPasswordKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncType<void>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sessionToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncType<JWTModel>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updatePassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncType<LeafAccountModel>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SliderConfig",
            "id": "interface-SliderConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "invert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "thumbLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StatisticsState",
            "id": "interface-StatisticsState-8eda0ff88aa0810886071b5f4271e2a03465fbb644b6c34dcdf0341c53fb93e36ba5f84850bbbafc52179b459abd13aa776814b8d255c3d69c6fa9a357c5e2a6",
            "file": "projects/ngleaf/src/store/core/statistics/statistics.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LeafStatistic } from '../../../api/models/leaf-statistic.model';\r\nimport { AsyncType } from '../../common/index';\r\n\r\nexport interface StatisticsState {\r\n  statistics: AsyncType<LeafStatistic[]>;\r\n}\r\n",
            "properties": [
                {
                    "name": "statistics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsyncType<LeafStatistic[]>",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TextConfig",
            "id": "interface-TextConfig-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "properties": [
                {
                    "name": "labelKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccountApiClient",
            "id": "injectable-AccountApiClient-bef31e2234df016e5808063b4c68ab7381d72bba7e1eed843374b15125a4a5090c4c17698342d70f38f96c44f777b827dc699c43878685e1cdde7062aac33cd1",
            "file": "projects/ngleaf/src/api/clients/session-api-client/account-api-client.service.ts",
            "properties": [
                {
                    "name": "authHttp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafAuthHttpClient",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafApiClientConfig",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LeafApiClientConfigServiceToken"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeAvatar",
                    "args": [
                        {
                            "name": "newAvatarUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LeafAccountModel>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "newAvatarUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "passwordChange",
                            "type": "PasswordChangingModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LeafAccountModel>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "passwordChange",
                            "type": "PasswordChangingModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeUsername",
                    "args": [
                        {
                            "name": "newUsername",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LeafAccountModel>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "newUsername",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "login",
                            "type": "LoginModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<JWTModel>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "LoginModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "me",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LeafAccountModel>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "registration",
                            "type": "RegistrationModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<JWTModel>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "registration",
                            "type": "RegistrationModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "passwordResetting",
                            "type": "PasswordResettingModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "passwordResetting",
                            "type": "PasswordResettingModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendPasswordKey",
                    "args": [
                        {
                            "name": "emailOfAccountToReset",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailOfAccountToReset",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { LeafAuthHttpClient } from '../auth-http-client/leaf-auth-http-client.service';\r\nimport { JWTModel, LeafAccountModel, LoginModel, PasswordChangingModel, PasswordResettingModel, RegistrationModel } from '../../models/index';\r\n\r\nimport { LeafApiClientConfig, LeafApiClientConfigServiceToken } from '../api-client-config.module';\r\n\r\n@Injectable()\r\nexport class AccountApiClient {\r\n  public constructor(\r\n    @Inject(LeafApiClientConfigServiceToken) public config: LeafApiClientConfig,\r\n    public authHttp: LeafAuthHttpClient\r\n    ) {}\r\n\r\n  public me(): Observable<LeafAccountModel> {\r\n    return this.authHttp.get<LeafAccountModel>(this.config.serverUrl + '/account/me');\r\n  }\r\n\r\n  public register(registration: RegistrationModel): Observable<JWTModel> {\r\n    return this.authHttp.post<JWTModel>(this.config.serverUrl + '/account', registration);\r\n  }\r\n\r\n  public login(login: LoginModel): Observable<JWTModel> {\r\n    return this.authHttp.post<JWTModel>(this.config.serverUrl + '/account/login', login);\r\n  }\r\n\r\n  public changeUsername(newUsername: string): Observable<LeafAccountModel> {\r\n    return this.authHttp.post<LeafAccountModel>(this.config.serverUrl + '/account/me/username', newUsername);\r\n  }\r\n\r\n  public changePassword(passwordChange: PasswordChangingModel): Observable<LeafAccountModel> {\r\n    return this.authHttp.post<LeafAccountModel>(this.config.serverUrl + '/account/me/password', passwordChange);\r\n  }\r\n\r\n  public sendPasswordKey(emailOfAccountToReset: string): Observable<void> {\r\n    return this.authHttp.post<void>(this.config.serverUrl + '/account/sendresetpasswordkey', emailOfAccountToReset);\r\n  }\r\n\r\n  public resetPassword(passwordResetting: PasswordResettingModel): Observable<void> {\r\n    return this.authHttp.post<void>(this.config.serverUrl + '/account/resetPassword', passwordResetting);\r\n  }\r\n\r\n  public changeAvatar(newAvatarUrl: string): Observable<LeafAccountModel> {\r\n    return this.authHttp.post<LeafAccountModel>(this.config.serverUrl + '/account/me/avatar', newAvatarUrl);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "LeafApiClientConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "LeafApiClientConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LeafAdminService",
            "id": "injectable-LeafAdminService-a2ddea32272d6bdd635e4a9f441d71162cab2ff5051185599a0c0629cff519664485dc44c0d324ba5ebecf676845edad030f0e424df01d865e0ec4356860fa18",
            "file": "projects/ngleaf/src/services/core/admin/leaf-admin.service.ts",
            "properties": [
                {
                    "name": "authHttp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafAuthHttpClient",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addAdmin",
                    "args": [
                        {
                            "name": "newAdminId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "newAdminId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addAuthorizedEmail",
                    "args": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAccount",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAdmins",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetchAuthorizedEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetchUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeAdmin",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAuthorizedEmail",
                    "args": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\n// import { LeafAccountModel, LeafAuthorizedEmailModel } from '../../../models/index';\r\nimport { LeafAccountModel, LeafAuthorizedEmailModel } from '../../../api/models/index';\r\nimport { LeafAuthHttpClient } from '../../../api/clients/index';\r\nimport { LeafConfigServiceToken } from '../../leaf-config.module';\r\nimport { setAdministrators, setAuthorizedEmails, setUsers } from '../../../store/core/administration/administration.actions';\r\n\r\n@Injectable()\r\nexport class LeafAdminService {\r\n\r\n  constructor(\r\n    private store: Store,\r\n    @Inject(LeafConfigServiceToken) private config,\r\n    public authHttp: LeafAuthHttpClient\r\n  ) {}\r\n\r\n  public fetchAuthorizedEmail() {\r\n    this.authHttp\r\n      .get<LeafAuthorizedEmailModel[]>(this.config.serverUrl + '/admin/authorizedemails')\r\n      .subscribe((emails: LeafAuthorizedEmailModel[]) => {\r\n        this.store.dispatch(setAuthorizedEmails({authorizedEmails: emails}));\r\n      });\r\n  }\r\n\r\n  public addAuthorizedEmail(emails: string[]) {\r\n    this.authHttp\r\n      .post<LeafAuthorizedEmailModel>(this.config.serverUrl + '/admin/authorizedemails', emails)\r\n      .subscribe(() => this.fetchAuthorizedEmail());\r\n  }\r\n\r\n  public removeAuthorizedEmail(emails: string[]) {\r\n    this.authHttp\r\n      .post<LeafAccountModel>(this.config.serverUrl + '/admin/authorizedemails/remove', emails)\r\n      .subscribe(() => this.fetchAuthorizedEmail());\r\n  }\r\n\r\n  public fetchAdmins() {\r\n    this.authHttp\r\n      .get<string[]>(this.config.serverUrl + '/admin/admins')\r\n      .subscribe((administrators: string[]) => {\r\n        this.store.dispatch(setAdministrators({administrators}));\r\n      });\r\n  }\r\n\r\n  public fetchUsers() {\r\n    this.authHttp\r\n      .get<LeafAccountModel[]>(this.config.serverUrl + '/account/all')\r\n      .subscribe((users: LeafAccountModel[]) => {\r\n        this.store.dispatch(setUsers({users}));\r\n      });\r\n  }\r\n\r\n  public deleteAccount(id: any) {\r\n    this.authHttp\r\n      .delete<void>(this.config.serverUrl + '/account/' + id)\r\n      .subscribe(() => {\r\n        this.fetchUsers();\r\n      });\r\n  }\r\n\r\n  public addAdmin(newAdminId: string) {\r\n    this.authHttp\r\n      .post<LeafAccountModel>(this.config.serverUrl + '/admin/admins', newAdminId)\r\n      .subscribe(() => this.fetchAdmins());\r\n  }\r\n\r\n  public removeAdmin(email: string) {\r\n    this.authHttp\r\n      .delete<LeafAccountModel>(this.config.serverUrl + '/admin/admins/' + email)\r\n      .subscribe(() => this.fetchAdmins());\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LeafAuthHttpClient",
            "id": "injectable-LeafAuthHttpClient-1247953a3fcee38f2cc39ff0b5877d440b60bcc9a28b19c81c9a1563cf8fa005fdb2d0f194543aea448eb35f89b0be1f84e066d65ee459ab26cdd2f98f32be4c",
            "file": "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.service.ts",
            "properties": [
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "jwtoken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addHeaders",
                    "args": [
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IRequestOptions",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "endPoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IRequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setJwtoken",
                    "args": [
                        {
                            "name": "jwtoken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "jwtoken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IRequestOptions {\r\n  headers?: HttpHeaders;\r\n  observe?: 'body';\r\n  params?: HttpParams;\r\n  reportProgress?: boolean;\r\n  responseType?: 'json';\r\n  withCredentials?: boolean;\r\n  body?: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  useFactory: applicationHttpClientCreator,\r\n  deps: [HttpClient],\r\n})\r\nexport class LeafAuthHttpClient {\r\n  public jwtoken: string;\r\n\r\n  public constructor(public http: HttpClient) {}\r\n\r\n  public setJwtoken(jwtoken: string): void {\r\n    this.jwtoken = jwtoken;\r\n  }\r\n\r\n  public addHeaders(options?: IRequestOptions): IRequestOptions {\r\n    const authenticatedOptions = options || { headers: new HttpHeaders() };\r\n    authenticatedOptions.headers =\r\n      authenticatedOptions.headers || new HttpHeaders();\r\n    authenticatedOptions.headers = authenticatedOptions.headers.set(\r\n      'Cache-Control',\r\n      'no-cache'\r\n    );\r\n    authenticatedOptions.headers = authenticatedOptions.headers.set(\r\n      'Pragma',\r\n      'no-cache'\r\n    );\r\n    authenticatedOptions.headers = authenticatedOptions.headers.set(\r\n      'Expires',\r\n      'Sat, 01 Jan 2000 00:00:00 GMT'\r\n    );\r\n    if (this.jwtoken) {\r\n      authenticatedOptions.headers = authenticatedOptions.headers.set(\r\n        'Authorization',\r\n        this.jwtoken\r\n      );\r\n      return authenticatedOptions;\r\n    }\r\n    return options;\r\n  }\r\n\r\n  public get<T>(endPoint: string, options?: IRequestOptions): Observable<T> {\r\n    return this.http.get<T>(endPoint, this.addHeaders(options));\r\n  }\r\n\r\n  public post<T>(\r\n    endPoint: string,\r\n    params: any,\r\n    options?: IRequestOptions\r\n  ): Observable<T> {\r\n    return this.http.post<T>(endPoint, params, this.addHeaders(options));\r\n  }\r\n\r\n  public patch<T>(\r\n    endPoint: string,\r\n    params: any,\r\n    options?: IRequestOptions\r\n  ): Observable<T> {\r\n    return this.http.patch<T>(endPoint, params, this.addHeaders(options));\r\n  }\r\n\r\n  public put<T>(\r\n    endPoint: string,\r\n    params: any,\r\n    options?: IRequestOptions\r\n  ): Observable<T> {\r\n    return this.http.put<T>(endPoint, params, this.addHeaders(options));\r\n  }\r\n\r\n  public delete<T>(endPoint: string, options?: IRequestOptions): Observable<T> {\r\n    return this.http.delete<T>(endPoint, this.addHeaders(options));\r\n  }\r\n}\r\n\r\nexport function applicationHttpClientCreator(http: HttpClient) {\r\n  return new LeafAuthHttpClient(http);\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LeafNotificationService",
            "id": "injectable-LeafNotificationService-f0ba725b327e73b4ee63d151fa007ff05ceb4a6f5377fb48f5c66e259170c4e2805a5c9cf0a5398c28065afe3688b35e44d147aa09ba1b85843765be4964bd2e",
            "file": "projects/ngleaf/src/services/core/notification/leaf-notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "emit",
                    "args": [
                        {
                            "name": "notification",
                            "type": "LeafNotificationModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "notification",
                            "type": "LeafNotificationModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { emitNotification } from '../../../store/core/notification/notification.actions';\r\nimport { LeafNotificationModel } from '../../../models/index';\r\n\r\n@Injectable()\r\nexport class LeafNotificationService {\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  public emit(notification: LeafNotificationModel): void {\r\n    this.store.dispatch(emitNotification({notification}));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LeafSessionService",
            "id": "injectable-LeafSessionService-88d078d6b7c9bc0035d5ae03bf0cee5b0fca2c2d47905ac1e9589ae0ed71f8837c9fff0598552f4c0059fd8e73907c2b1022c16adcd3f0379c182515a256af05",
            "file": "projects/ngleaf/src/services/core/session/leaf-session.service.ts",
            "properties": [
                {
                    "name": "authHttp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafAuthHttpClient",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafConfig",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LeafConfigServiceToken"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notificationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafNotificationService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addPrivateToken",
                    "args": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeAvatar",
                    "args": [
                        {
                            "name": "avatar",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "avatar",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "oldPassword",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "oldPassword",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeUsername",
                    "args": [
                        {
                            "name": "username",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "refreshAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 345,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "revokePrivateToken",
                    "args": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendResetPasswordKey",
                    "args": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { filter, map, take } from 'rxjs';\r\n\r\nimport { LeafAuthHttpClient, AccountApiClient } from '../../../api/clients/index';\r\n\r\nimport { LeafConfig } from '../../../models/index';\r\nimport { LeafNotificationService } from '../notification/leaf-notification.service';\r\nimport { LeafConfigServiceToken } from '../../leaf-config.module';\r\nimport { resetCurrentAccount, resetSessionToken, selectCurrentAccount, selectSessionToken, selectUpdatePassword, setCurrentAccountCall, setResetPasswordCall, setSendResetPasswordKeyCall, setSessionToken, setSessionTokenCall, setUpdatePasswordCall } from '../../../store/core/session/index';\r\nimport { AsyncType } from '../../../store/common/index';\r\nimport { JWTModel, LeafAccountModel } from '../../../api/models/index';\r\n\r\n@Injectable()\r\nexport class LeafSessionService {\r\n\r\n  constructor(\r\n    @Inject(LeafConfigServiceToken) public config: LeafConfig,\r\n    private accountApiClient: AccountApiClient,\r\n    private store: Store,\r\n    public authHttp: LeafAuthHttpClient,\r\n    public notificationService: LeafNotificationService,\r\n    private router: Router,\r\n    private activeRoute: ActivatedRoute\r\n  ) {}\r\n\r\n  public init() {\r\n    const jwtoken = localStorage.getItem('jwtoken');\r\n    if (jwtoken) {\r\n      this.store.dispatch(setSessionToken({sessionToken: {token: jwtoken}}));\r\n    } else {\r\n      this.store.dispatch(resetSessionToken());\r\n    }\r\n\r\n    this.store.pipe(\r\n      select(selectSessionToken),\r\n      filter<AsyncType<JWTModel>>((sessionToken) => !sessionToken.status.pending),\r\n      map((sessionToken) => {\r\n        if (sessionToken.status.success) {\r\n          return sessionToken.data;\r\n        } else {\r\n          return null;\r\n        }\r\n      })\r\n    ).subscribe((jwtoken) => {\r\n      if (jwtoken) {\r\n        localStorage.setItem('jwtoken', jwtoken.token);\r\n        this.authHttp.setJwtoken(jwtoken.token);\r\n\r\n        this.refreshAccount()\r\n        .then(() => {})\r\n        .catch(() => {\r\n          this.store.dispatch(resetSessionToken());\r\n          this.store.dispatch(resetCurrentAccount());\r\n          if (this.config.navigation.authGuardErrorRedirect) {\r\n            this.router.navigate([this.config.navigation.authGuardErrorRedirect]);\r\n          }\r\n        });\r\n\r\n      } else {\r\n        localStorage.removeItem('jwtoken');\r\n        this.authHttp.setJwtoken(null);\r\n      }\r\n    });\r\n  }\r\n\r\n  public refreshAccount(): Promise<void> {\r\n    const call = this.accountApiClient.me();\r\n    this.store.dispatch(setCurrentAccountCall({call}));\r\n\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.store.pipe(\r\n        select(selectCurrentAccount),\r\n        filter((currentAccount: AsyncType<LeafAccountModel>) => !currentAccount.status.pending && !!currentAccount.data),\r\n        map((currentAccount: AsyncType<LeafAccountModel>) => currentAccount.status),\r\n        take(1)\r\n      ).subscribe((status) => {\r\n        if(status.success) {\r\n          resolve();\r\n        }\r\n        if(status.failure) {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  public register(email, password) {\r\n    const account = {\r\n      email,\r\n      password\r\n    };\r\n\r\n    const call = this.accountApiClient.register(account);\r\n    this.store.dispatch(setSessionTokenCall({call}));\r\n\r\n    this.store.pipe(\r\n      select(selectCurrentAccount),\r\n      filter((currentAccount: AsyncType<LeafAccountModel>) => !currentAccount.status.pending && !!currentAccount.data),\r\n      take(1)\r\n    ).subscribe(() => {\r\n      const returnTo = this.activeRoute.snapshot.queryParams.return || this.config.navigation.registerSuccessRedirect || '/';\r\n      this.router.navigate([returnTo]);\r\n    });\r\n\r\n    this.store.pipe(\r\n      select(selectCurrentAccount),\r\n      filter((currentAccount: AsyncType<LeafAccountModel>) => !currentAccount.status.pending && (!!currentAccount.data || !!currentAccount.error)),\r\n      map((currentAccount: AsyncType<LeafAccountModel>) => currentAccount.status),\r\n      take(1)\r\n    ).subscribe((status) => {\r\n      if(status.success) {\r\n        this.notificationService.emit({\r\n          id: 'registerSuccess',\r\n          category: 'session',\r\n          message: 'Registration was successful.'\r\n        });\r\n      }\r\n      if(status.failure) {\r\n        this.notificationService.emit({\r\n          id: 'registerFailed',\r\n          category: 'session',\r\n          message: 'Register failed.'\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public login(email, password) {\r\n    const credentials = {\r\n      email,\r\n      password\r\n    };\r\n\r\n    this.store.dispatch(setSessionTokenCall({\r\n      call: this.accountApiClient.login(credentials)\r\n    }));\r\n\r\n    this.store.pipe(\r\n      select(selectCurrentAccount),\r\n      filter((currentAccount: AsyncType<LeafAccountModel>) => !currentAccount.status.pending && !!currentAccount.data),\r\n      take(1)\r\n    ).subscribe(() => {\r\n      const returnTo = this.activeRoute.snapshot.queryParams.return || this.config.navigation.loginSuccessRedirect || '/';\r\n      this.router.navigate([returnTo]);\r\n    });\r\n\r\n    this.store.pipe(\r\n      select(selectCurrentAccount),\r\n      filter((currentAccount: AsyncType<LeafAccountModel>) => !currentAccount.status.pending && (!!currentAccount.data || !!currentAccount.error)),\r\n      map((currentAccount: AsyncType<LeafAccountModel>) => currentAccount.status),\r\n      take(1)\r\n    ).subscribe((status) => {\r\n      if(status.success) {\r\n        this.notificationService.emit({\r\n          id: 'loginSuccess',\r\n          category: 'session',\r\n          message: 'Login was successful.'\r\n        });\r\n      }\r\n      if(status.failure) {\r\n        this.notificationService.emit({\r\n          id: 'loginFailed',\r\n          category: 'session',\r\n          message: 'Login failed.'\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public logout(): Promise<void> {\r\n    return new Promise(resolve => {\r\n      this.store.dispatch(resetCurrentAccount());\r\n      this.store.dispatch(resetSessionToken());\r\n      const navigateTo = this.config.navigation.logoutRedirect || '/';\r\n      this.router.navigate([navigateTo]);\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  public changeUsername(username): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      // TODO: REMOVE ANY\r\n      this.accountApiClient.changeUsername(username)\r\n        .subscribe(\r\n          () => {\r\n            this.refreshAccount();\r\n            this.notificationService.emit({\r\n              id: 'successChangeUsername',\r\n              category: 'session',\r\n              message: 'Name changed'\r\n            });\r\n            resolve();\r\n          },\r\n          () => {\r\n            this.notificationService.emit({\r\n              id: 'failureChangeUsername',\r\n              category: 'session',\r\n              message: 'Name changed failed'\r\n            });\r\n            reject();\r\n          }\r\n        );\r\n    });\r\n  }\r\n\r\n  public addPrivateToken(name, expiration): Promise<string> {\r\n    const privateToken = { name, expiration };\r\n    return new Promise<string>((resolve) => {\r\n      this.authHttp\r\n        .post<any>(\r\n          this.config.serverUrl + '/account/me/privatetokens',\r\n          privateToken\r\n        )\r\n        .subscribe(\r\n          (jwt) => {\r\n            this.refreshAccount();\r\n            this.notificationService.emit({\r\n              id: 'successAddPrivateToken',\r\n              category: 'session',\r\n              message: 'Private token added'\r\n            });\r\n            resolve(jwt.token);\r\n          },\r\n          () => {\r\n            this.notificationService.emit({\r\n              id: 'failureAddPrivateToken',\r\n              category: 'session',\r\n              message: 'Private token addition failed'\r\n            });\r\n          }\r\n        );\r\n    });\r\n  }\r\n\r\n  public revokePrivateToken(name) {\r\n    this.authHttp\r\n      .delete<any>(\r\n        this.config.serverUrl + '/account/me/privatetokens/' + name\r\n      )\r\n      .subscribe(\r\n        () => {\r\n          this.refreshAccount();\r\n          this.notificationService.emit({\r\n            id: 'successRevokePrivateToken',\r\n            category: 'session',\r\n            message: 'private token revoked'\r\n          });\r\n        },\r\n        () => {\r\n          this.notificationService.emit({\r\n            id: 'failureRevokePrivateToken',\r\n            category: 'session',\r\n            message: 'private token revokation failed'\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  public changeAvatar(avatar): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      // TODO: REMOVE ANY\r\n      this.accountApiClient.changeAvatar(avatar)\r\n        .subscribe(\r\n          () => {\r\n            this.refreshAccount();\r\n            this.notificationService.emit({\r\n              id: 'successChangeAvatar',\r\n              category: 'session',\r\n              message: 'avatar changed'\r\n            });\r\n            resolve();\r\n          },\r\n          () => {\r\n            this.notificationService.emit({\r\n              id: 'failureChangeAvatar',\r\n              category: 'session',\r\n              message: 'avatar changed failed'\r\n            });\r\n            reject();\r\n          }\r\n        );\r\n    });\r\n  }\r\n\r\n  public changePassword(oldPassword, newPassword) {\r\n    const passwordChanging = {\r\n      oldPassword,\r\n      newPassword\r\n    };\r\n\r\n    this.store.dispatch(setUpdatePasswordCall({\r\n      call: this.accountApiClient.changePassword(passwordChanging)\r\n    }));\r\n\r\n    this.store.pipe(\r\n      select(selectUpdatePassword),\r\n      filter((updatePassword: AsyncType<LeafAccountModel>) => !updatePassword.status.pending && !!updatePassword.data),\r\n      map((updatePassword: AsyncType<LeafAccountModel>) => updatePassword.status),\r\n      take(1)\r\n    ).subscribe((status) => {\r\n      if(status.success) {\r\n        this.notificationService.emit({\r\n          id: 'successChangePassword',\r\n          category: 'session',\r\n          message: 'password changed'\r\n        });\r\n      }\r\n      if(status.failure) {\r\n        this.notificationService.emit({\r\n          id: 'failureChangePassword',\r\n          category: 'session',\r\n          message: 'password changed failed'\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public sendResetPasswordKey(email) {\r\n    const call = this.accountApiClient.sendPasswordKey(email);\r\n    this.store.dispatch(setSendResetPasswordKeyCall({call}));\r\n\r\n    call.subscribe({\r\n      next: () => {\r\n        this.notificationService.emit({\r\n          id: 'sendResetPasswordSucceed',\r\n          category: 'session',\r\n          message: 'Sending the password reset was successful.'\r\n        });\r\n      },\r\n      error: () => {\r\n        this.notificationService.emit({\r\n          id: 'sendResetPasswordFailed',\r\n          category: 'session',\r\n          message: 'An error occurred while trying to reset the password. No change key sent.'\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public resetPassword(key, password) {\r\n    const passwordResetting = {\r\n      key,\r\n      password\r\n    };\r\n    const call = this.accountApiClient.resetPassword(passwordResetting);\r\n    this.store.dispatch(setResetPasswordCall({call}));\r\n\r\n    call.subscribe({\r\n      next: () => {\r\n        this.notificationService.emit({\r\n          id: 'changePasswordSuccess',\r\n          category: 'session',\r\n          message: 'Password changed successfully.'\r\n        });\r\n      },\r\n      error: () => {\r\n        this.notificationService.emit({\r\n          id: 'changePasswordFailed',\r\n          category: 'session',\r\n          message: 'An error occurred while trying to change the password.'\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "LeafConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountApiClient",
                        "type": "AccountApiClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "LeafNotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activeRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "LeafConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountApiClient",
                        "type": "AccountApiClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "LeafNotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activeRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LeafUploadFileService",
            "id": "injectable-LeafUploadFileService-ac4c0f0c70d0c89df772ca5da16733f135e7a86b6cf2bc5023ba553aad8e14cc80de091e870954f641d197e474e3629d48e80ec666cc01a084325f7db6bcc3f1",
            "file": "projects/ngleaf/src/services/files/leaf-upload-file.service.ts",
            "properties": [
                {
                    "name": "notificationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafNotificationService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "pushFileToStorage",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { LeafFileModel } from '../../api/models/index';\r\nimport { LeafConfigServiceToken } from '../leaf-config.module';\r\nimport { LeafAuthHttpClient } from '../../api/clients/index';\r\nimport { LeafNotificationService } from '../core/notification/leaf-notification.service';\r\n\r\n@Injectable()\r\nexport class LeafUploadFileService {\r\n\r\n  constructor(\r\n    public notificationService: LeafNotificationService,\r\n    @Inject(LeafConfigServiceToken) private config,\r\n    private http: LeafAuthHttpClient) {}\r\n\r\n  pushFileToStorage(file: File): Observable<string> {\r\n    const formdata: FormData = new FormData();\r\n\r\n    formdata.append('file', file);\r\n\r\n    this.notificationService.emit({\r\n      id: 'successChangeUsername',\r\n      category: 'session',\r\n      message: 'Name changed'\r\n    });\r\n\r\n    const url$ = new Subject<string>();\r\n\r\n    this.http.post(this.config.serverUrl + '/files', formdata, { reportProgress: true }).subscribe(\r\n      (uploadedFile: LeafFileModel) => {\r\n        this.notificationService.emit({\r\n          id: 'successUploadFile',\r\n          category: 'file-upload',\r\n          message: 'File successfully uploaded'\r\n        });\r\n        url$.next(uploadedFile.url);\r\n      },\r\n      () => {\r\n        this.notificationService.emit({\r\n          id: 'failureUploadFile',\r\n          category: 'file-upload',\r\n          message: 'Error during file upload'\r\n        });\r\n        url$.next(null);\r\n      }\r\n    );\r\n\r\n\r\n    return url$;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "LeafNotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "LeafNotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LeafWebImagesSeekerService",
            "id": "injectable-LeafWebImagesSeekerService-64bec333738703ffc1bf6da8f9f3ad653b4a792b8f5367b597ff17b9f3d3f9533cd4457ec6060e638f7c528bcc68730cfac9be7432945a8b8b29d8ddb0104ad1",
            "file": "projects/ngleaf/src/services/web-images-seeker/leaf-web-images-seeker.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "searchImages",
                    "args": [
                        {
                            "name": "searchValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { LeafConfigServiceToken } from '../leaf-config.module';\r\n\r\n@Injectable()\r\nexport class LeafWebImagesSeekerService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(LeafConfigServiceToken) private config) { }\r\n\r\n  public searchImages(searchValue: string): Observable<string[]> {\r\n    if (searchValue) {\r\n      const query = searchValue.replace(' ', '+');\r\n      const apiKey = this.config.apis.pixabay_api_key;\r\n      return this.http.get<any>(`https://pixabay.com/api/?q=${query}&key=${apiKey}&lang=fr`).pipe(\r\n        map(response =>\r\n          response.hits.map(hit => hit.webformatURL)\r\n       ));\r\n    }\r\n    return of([]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SessionEffects",
            "id": "injectable-SessionEffects-ec12b72239009e2aa3785036486038d3b99ecc34a5251eb8a86531718ed2c3ae1d2401eebf83e0bbcb7e5ead4fec4f435faaf52789662f724cfc2f588150ab17",
            "file": "projects/ngleaf/src/store/core/session/session.effects.ts",
            "properties": [
                {
                    "name": "setCurrentAccountCall$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(setCurrentAccountCall),\r\n    switchMap((payload: {call: Observable<LeafAccountModel>}) =>\r\n    payload.call.pipe(\r\n        map(currentAccount => (setCurrentAccountSuccess({data: currentAccount}))),\r\n        catchError((error) => of(setCurrentAccountFailure({error})))\r\n      ))\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "setResetPasswordCall$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(setResetPasswordCall),\r\n    switchMap((payload: {call: Observable<void>}) =>\r\n    payload.call.pipe(\r\n        map(() => (setResetPasswordSuccess())),\r\n        catchError((error) => of(setResetPasswordFailure({error})))\r\n      ))\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "setSendResetPasswordKeyCall$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(setSendResetPasswordKeyCall),\r\n    switchMap((payload: {call: Observable<void>}) =>\r\n    payload.call.pipe(\r\n        map(() => (setSendResetPasswordKeySuccess())),\r\n        catchError((error) => of(setSendResetPasswordKeyFailure({error})))\r\n      ))\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "setSessionTokenCall$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(setSessionTokenCall),\r\n    switchMap((payload: {call: Observable<JWTModel>}) =>\r\n    payload.call.pipe(\r\n        map(sessionToken => (setSessionTokenSuccess({data: sessionToken}))),\r\n        catchError((error) => of(setSessionTokenFailure({error})))\r\n      ))\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "setUpdatePasswordCall$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(setUpdatePasswordCall),\r\n    switchMap((payload: {call: Observable<LeafAccountModel>}) =>\r\n    payload.call.pipe(\r\n        map((accountData) => (setUpdatePasswordSuccess({data: accountData}))),\r\n        catchError((error) => of(setUpdatePasswordFailure({error})))\r\n      ))\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, catchError } from 'rxjs/operators';\r\n\r\nimport { JWTModel, LeafAccountModel } from '../../../api/models/index';\r\nimport { AccountApiClient } from '../../../api/clients/index';\r\nimport { setCurrentAccountCall, setCurrentAccountFailure, setCurrentAccountSuccess, setResetPasswordCall, setResetPasswordFailure, setResetPasswordSuccess, setSendResetPasswordKeyCall, setSendResetPasswordKeyFailure, setSendResetPasswordKeySuccess, setSessionTokenCall, setSessionTokenFailure, setSessionTokenSuccess, setUpdatePasswordCall, setUpdatePasswordFailure, setUpdatePasswordSuccess } from './session.actions';\r\n\r\n@Injectable()\r\nexport class SessionEffects {\r\n\r\n  setCurrentAccountCall$ = createEffect(() => this.actions$.pipe(\r\n    ofType(setCurrentAccountCall),\r\n    switchMap((payload: {call: Observable<LeafAccountModel>}) =>\r\n    payload.call.pipe(\r\n        map(currentAccount => (setCurrentAccountSuccess({data: currentAccount}))),\r\n        catchError((error) => of(setCurrentAccountFailure({error})))\r\n      ))\r\n    )\r\n  );\r\n\r\n  setSessionTokenCall$ = createEffect(() => this.actions$.pipe(\r\n    ofType(setSessionTokenCall),\r\n    switchMap((payload: {call: Observable<JWTModel>}) =>\r\n    payload.call.pipe(\r\n        map(sessionToken => (setSessionTokenSuccess({data: sessionToken}))),\r\n        catchError((error) => of(setSessionTokenFailure({error})))\r\n      ))\r\n    )\r\n  );\r\n\r\n  setSendResetPasswordKeyCall$ = createEffect(() => this.actions$.pipe(\r\n    ofType(setSendResetPasswordKeyCall),\r\n    switchMap((payload: {call: Observable<void>}) =>\r\n    payload.call.pipe(\r\n        map(() => (setSendResetPasswordKeySuccess())),\r\n        catchError((error) => of(setSendResetPasswordKeyFailure({error})))\r\n      ))\r\n    )\r\n  );\r\n\r\n  setResetPasswordCall$ = createEffect(() => this.actions$.pipe(\r\n    ofType(setResetPasswordCall),\r\n    switchMap((payload: {call: Observable<void>}) =>\r\n    payload.call.pipe(\r\n        map(() => (setResetPasswordSuccess())),\r\n        catchError((error) => of(setResetPasswordFailure({error})))\r\n      ))\r\n    )\r\n  );\r\n\r\n  setUpdatePasswordCall$ = createEffect(() => this.actions$.pipe(\r\n    ofType(setUpdatePasswordCall),\r\n    switchMap((payload: {call: Observable<LeafAccountModel>}) =>\r\n    payload.call.pipe(\r\n        map((accountData) => (setUpdatePasswordSuccess({data: accountData}))),\r\n        catchError((error) => of(setUpdatePasswordFailure({error})))\r\n      ))\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private accountApiClient: AccountApiClient\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountApiClient",
                        "type": "AccountApiClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountApiClient",
                        "type": "AccountApiClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatisticsApiClientService",
            "id": "injectable-StatisticsApiClientService-ccbf265af2f3a94158d04872891e2806b5fc7f3b09111fb88f9bc1021f1a0b5c1133b1c4c971ed7a737d17bb9ed1c82fc9bde76f541bd6fb434b362497810311",
            "file": "projects/ngleaf/src/api/clients/statistics-api-client/statistics-api-client.service.ts",
            "properties": [
                {
                    "name": "authHttp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafAuthHttpClient",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafApiClientConfig",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LeafApiClientConfigServiceToken"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchStatistics",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LeafStatistic[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LeafAuthHttpClient } from '../auth-http-client/leaf-auth-http-client.service';\nimport { LeafApiClientConfig, LeafApiClientConfigServiceToken } from '../api-client-config.module';\nimport { LeafStatistic } from '../../models/leaf-statistic.model';\n\n@Injectable()\nexport class StatisticsApiClientService {\n  public constructor(\n    @Inject(LeafApiClientConfigServiceToken) public config: LeafApiClientConfig,\n    public authHttp: LeafAuthHttpClient\n    ) {}\n\n    public fetchStatistics(): Observable<LeafStatistic[]> {\n      return this.authHttp.get<LeafStatistic[]>(this.config.serverUrl + '/statistics');\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "LeafApiClientConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "LeafApiClientConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatisticsEffects",
            "id": "injectable-StatisticsEffects-47086ad7d7827e19c72bd373c1d7e23910c59e75d4c57cf3ce8ac41dc2d4428792d0de6b33155ddceed64c77d61adad42a2b0a2f4ec3a6cb48f1950fa8e67c94",
            "file": "projects/ngleaf/src/store/core/statistics/statistics.effects.ts",
            "properties": [
                {
                    "name": "setStatisticsCall$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(setStatisticsCall),\r\n    switchMap((payload: {call: Observable<LeafStatistic[]>}) =>\r\n    payload.call.pipe(\r\n        map(currentAccount => (setStatisticsSuccess({data: currentAccount}))),\r\n        catchError((error) => of(setStatisticsFailure({error})))\r\n      ))\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, catchError } from 'rxjs/operators';\r\n\r\nimport { LeafStatistic } from '../../../api/models/index';\r\nimport { setStatisticsCall, setStatisticsFailure, setStatisticsSuccess } from './statistics.actions';\r\n\r\n@Injectable()\r\nexport class StatisticsEffects {\r\n\r\n  setStatisticsCall$ = createEffect(() => this.actions$.pipe(\r\n    ofType(setStatisticsCall),\r\n    switchMap((payload: {call: Observable<LeafStatistic[]>}) =>\r\n    payload.call.pipe(\r\n        map(currentAccount => (setStatisticsSuccess({data: currentAccount}))),\r\n        catchError((error) => of(setStatisticsFailure({error})))\r\n      ))\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatisticsService",
            "id": "injectable-StatisticsService-40e4e2696225ef807984246926abfa40b0b13ee4bb49a6bfc3f4f6bec3a72aa0a80c989940180680628f08f5968ffb870cd03985ccbc9b66acae36829676b1e9",
            "file": "projects/ngleaf/src/services/core/statistics/statistics.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchStatistics",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { setStatisticsCall } from '../../../store/index';\nimport { StatisticsApiClientService } from '../../../api/clients/statistics-api-client/statistics-api-client.service';\n\n@Injectable()\nexport class StatisticsService {\n\n  constructor(private statisticsApiClient: StatisticsApiClientService, private store: Store) { }\n\n  public fetchStatistics() {\n    this.store.dispatch(\n      setStatisticsCall({\n        call: this.statisticsApiClient.fetchStatistics()\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statisticsApiClient",
                        "type": "StatisticsApiClientService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "statisticsApiClient",
                        "type": "StatisticsApiClientService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserAutocompleteService",
            "id": "injectable-UserAutocompleteService-de722f1ba12f460aeb4d712456b266b151790336f7e70615b7bfb76f0f7f7c734ec8cf6c467b6100c1fc4c7a8d9e0230386287ed81b3490e1fb15179fd6b39d2",
            "file": "projects/ngleaf/src/components/common/user-selector/user-autocomplete.service.ts",
            "properties": [
                {
                    "name": "authHttp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafAuthHttpClient",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafConfig",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LeafConfigServiceToken"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "autocomplete",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LeafUserModel[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpParams } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LeafUserModel } from '../../../api/models/index';\r\nimport { LeafConfig } from '../../../models/leaf-config.model';\r\nimport { LeafConfigServiceToken } from '../../../services/index';\r\nimport { LeafAuthHttpClient } from '../../../api/clients/index';\r\n\r\n@Injectable()\r\nexport class UserAutocompleteService {\r\n\r\n    constructor(\r\n        @Inject(LeafConfigServiceToken) public config: LeafConfig,\r\n        public authHttp: LeafAuthHttpClient\r\n    ) {}\r\n\r\n    public autocomplete(input: string): Observable<LeafUserModel[]> {\r\n        const params = new HttpParams().set('input', input);\r\n        return this.authHttp.get<LeafUserModel[]>(\r\n            this.config.serverUrl + '/account/autocomplete',\r\n            { params }\r\n        );\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "LeafConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "LeafConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authHttp",
                        "type": "LeafAuthHttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "LeafAdminGuardService",
            "id": "injectable-LeafAdminGuardService-037c485fd850f097d3f354c2733b2b8a375a9b1a4477a1ce79a8b96f3f625dabd2fd94b4d22c8dfc60bbaee6665b9af381cecf34f6a2942edf120c14d22e1bb0",
            "file": "projects/ngleaf/src/guards/admin/leaf-admin.guard.ts",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafConfig",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LeafConfigServiceToken"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sessionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafSessionService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate } from '@angular/router';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { take, mergeMap, filter, map, withLatestFrom } from 'rxjs/operators';\r\nimport { LeafConfigServiceToken, LeafSessionService } from '../../services/index';\r\nimport { LeafConfig } from '../../models/leaf-config.model';\r\nimport { selectCurrentAccount, selectIsPending } from '../../store/core/session/session.selectors';\r\n\r\n@Injectable()\r\nexport class LeafAdminGuardService implements CanActivate {\r\n\r\n  constructor(\r\n    private store: Store,\r\n    public sessionService: LeafSessionService,\r\n    public router: Router,\r\n    @Inject(LeafConfigServiceToken) public config: LeafConfig,\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(selectIsPending),\r\n      filter(isPending => !isPending),\r\n      take(1),\r\n      withLatestFrom(this.store.select(selectCurrentAccount)),\r\n      map(([_pending, currentAccount]) => currentAccount.data),\r\n      mergeMap(currentAccount => {\r\n        if (!!currentAccount && currentAccount.admin) {\r\n          return of(true);\r\n        } else {\r\n          this.router.navigate([this.config.navigation.authGuardErrorRedirect || '/login'], {\r\n            queryParams: {\r\n              return: state.url\r\n            }\r\n          });\r\n          return of(false);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "LeafConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "LeafConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "LeafAuthGuardService",
            "id": "injectable-LeafAuthGuardService-e51fffce6e319d8274c22efe9321cbb956e6f6e3e241ce0e6bb3982e7c4a41403d6e5233c8ef0c66a809547c94d54a10308266879fde517d0c4fa35a39b22ac6",
            "file": "projects/ngleaf/src/guards/auth/leaf-auth.guard.ts",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafConfig",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LeafConfigServiceToken"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "_route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate } from '@angular/router';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { take, mergeMap, filter, map, withLatestFrom } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { selectCurrentAccount, selectIsPending } from '../../store/core/session/session.selectors';\r\nimport { LeafConfigServiceToken } from '../../services/leaf-config.module';\r\nimport { LeafConfig } from '../../models/leaf-config.model';\r\n\r\n@Injectable()\r\nexport class LeafAuthGuardService implements CanActivate {\r\n\r\n  constructor(\r\n    private store: Store,\r\n    public router: Router,\r\n    @Inject(LeafConfigServiceToken) public config: LeafConfig,\r\n  ) {}\r\n\r\n  canActivate(_route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    return this.store.pipe(\r\n      select(selectIsPending),\r\n      filter(isPending => !isPending),\r\n      take(1),\r\n      withLatestFrom(this.store.select(selectCurrentAccount)),\r\n      map(([_pending, currentAccount]) => currentAccount.data),\r\n      mergeMap(currentAccount => {\r\n        if (currentAccount) {\r\n          return of(true);\r\n        } else {\r\n          this.router.navigate([this.config.navigation.authGuardErrorRedirect || '/login'], {\r\n            queryParams: {\r\n              return: state.url\r\n            }\r\n          });\r\n          return of(false);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "LeafConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "LeafConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "ConfirmDialogModel",
            "id": "class-ConfirmDialogModel-0ba6d7c59fefc2daf6d42af7fe1de555b3db57d88697c3a7ec0cc05462f3a515dd8e7617747be49210edf14f0922dcb75588ff4382979bf0f01edd1a514a0e24",
            "file": "projects/ngleaf/src/components/common/confirm-dialog/confirm-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss']\r\n})\r\nexport class ConfirmDialogComponent implements OnInit {\r\n  title: string;\r\n  message: string;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogModel) {\r\n    // Update view with given values\r\n    this.title = data.title;\r\n    this.message = data.message;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onConfirm(): void {\r\n    // Close the dialog, return true\r\n    this.dialogRef.close(true);\r\n  }\r\n\r\n  onDismiss(): void {\r\n    // Close the dialog, return false\r\n    this.dialogRef.close(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Class to represent confirm dialog model.\r\n *\r\n * It has been kept here to keep it as part of shared component.\r\n */\r\nexport class ConfirmDialogModel {\r\n\r\n  constructor(public title: string, public message: string) {\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>Class to represent confirm dialog model.</p>\n<p>It has been kept here to keep it as part of shared component.</p>\n",
            "rawdescription": "\n\nClass to represent confirm dialog model.\n\nIt has been kept here to keep it as part of shared component.\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AdaptiveViewDirective",
            "id": "directive-AdaptiveViewDirective-046cbf3630afb2d36d1f05926bc45840ecaa1a0956983aafaebcb2427bef54a5cbdab6c851c64ba38a9e48dfe5090fb6525eb64111fbbc586582d3b8999b20e6",
            "file": "projects/ngleaf/src/directives/adaptive-view/adaptive-view.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nexport type AdaptiveViewParameters = \r\n  'only-mobile'\r\n  | 'only-tablet'\r\n  | 'only-desktop'\r\n  | 'except-mobile'\r\n  | 'except-tablet'\r\n  | 'except-desktop';\r\n\r\n@Directive({\r\n  selector: '[leafAdaptiveView]'\r\n})\r\nexport class AdaptiveViewDirective {\r\n  private readonly MOBILE_TABLET_SEPARATOR = 480;\r\n  private readonly TABLET_DESKTOP_SEPARATOR = 768;\r\n\r\n  private hasView = false;\r\n\r\n  private screenWidth: any;\r\n  private condition: AdaptiveViewParameters;\r\n\r\n  constructor(\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainer: ViewContainerRef\r\n  ) {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(_event) {\r\n    this.screenWidth = window.innerWidth;\r\n    this.applyCondition();\r\n  }\r\n\r\n  @Input() set leafAdaptiveView(condition: AdaptiveViewParameters) {\r\n    this.condition = condition;\r\n    this.applyCondition();\r\n  }\r\n\r\n  private applyCondition() {\r\n    let show = false;\r\n    if (this.screenWidth <= this.MOBILE_TABLET_SEPARATOR) {\r\n      // mobile\r\n      if (this.condition === 'only-mobile' || this.condition === 'except-tablet' || this.condition === 'except-desktop') {\r\n        show = true;\r\n      }\r\n    } else if (this.screenWidth <= this.TABLET_DESKTOP_SEPARATOR) {\r\n      // tablet\r\n      if (this.condition === 'only-tablet' || this.condition === 'except-mobile' || this.condition === 'except-desktop') {\r\n        show = true;\r\n      }\r\n    } else {\r\n      // desktop\r\n      if (this.condition === 'only-desktop' || this.condition === 'except-mobile' || this.condition === 'except-tablet') {\r\n        show = true;\r\n      }\r\n    }\r\n\r\n    if (show && !this.hasView) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n      this.hasView = true;\r\n    } else if (!show && this.hasView) {\r\n      this.viewContainer.clear();\r\n      this.hasView = false;\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[leafAdaptiveView]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "leafAdaptiveView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "AdaptiveViewParameters",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "_event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31
                }
            ],
            "propertiesClass": [
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdaptiveViewParameters",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hasView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "MOBILE_TABLET_SEPARATOR",
                    "defaultValue": "480",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "TABLET_DESKTOP_SEPARATOR",
                    "defaultValue": "768",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyCondition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "_event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "leafAdaptiveView": {
                    "name": "leafAdaptiveView",
                    "setSignature": {
                        "name": "leafAdaptiveView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "condition",
                                "type": "AdaptiveViewParameters",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "condition",
                                "type": "AdaptiveViewParameters",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AccountPopoverContentComponent",
            "id": "component-AccountPopoverContentComponent-84460bb258be6d5982fcd1637da89e87b27933fb366f569800db3895b055ad3852fec271920e94c5eb8f56b6fe62e79502163dee914e6b0e46dcc9f984ffa698",
            "file": "projects/ngleaf/src/components/common/header-account/account-popover-content/account-popover-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-account-popover-content",
            "styleUrls": [
                "./account-popover-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-popover-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "avatarUrl",
                    "defaultValue": "'https://png.pngtree.com/svg/20161013/dpi_user_default_avatar_116868.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sessionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafSessionService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goToAccountSettingsPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { LeafSessionService } from '../../../../services/index';\r\n\r\n@Component({\r\n  selector: 'leaf-account-popover-content',\r\n  templateUrl: './account-popover-content.component.html',\r\n  styleUrls: ['./account-popover-content.component.scss'],\r\n})\r\nexport class AccountPopoverContentComponent implements OnInit {\r\n  @Input()\r\n  public username: string;\r\n\r\n  @Input()\r\n  public avatarUrl =\r\n    'https://png.pngtree.com/svg/20161013/dpi_user_default_avatar_116868.png';\r\n\r\n  constructor(\r\n    public sessionService: LeafSessionService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  logout() {\r\n    this.sessionService.logout();\r\n  }\r\n\r\n  goToAccountSettingsPage() {\r\n    this.router.navigate(['settings/general']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".account-popup {\r\n  width: 250px;\r\n  text-align: center;\r\n  border: solid 1px rgba(0, 0, 0, 0.9);\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n\r\n  .account-popup-head {\r\n    border-bottom: solid 1px grey;\r\n    padding: 1em;\r\n    background-color: white;\r\n\r\n    .avatar {\r\n      border: solid 1px grey;\r\n      border-radius: 50%;\r\n      height: 80px;\r\n      width: 80px;\r\n    }\r\n    .login {\r\n      font-weight: bolder;\r\n      font-size: 120%;\r\n    }\r\n  }\r\n\r\n  .account-popup-menu {\r\n    background-color: rgba(0, 0, 0, 0.9);\r\n    padding: 1em;\r\n\r\n    button {\r\n      background-color: #f5f5f5;\r\n      margin: 0.25em;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./account-popover-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"account-popup\">\r\n  <div class=\"account-popup-head\">\r\n    <div data-v-31254916=\"\" class=\"v-avatar grey lighten-4\">\r\n        <img data-v-31254916=\"\" *ngIf=\"avatarUrl\" [src]=\"avatarUrl\" alt=\"avatar\" class=\"avatar\">\r\n        <img data-v-31254916=\"\" *ngIf=\"!avatarUrl\" src=\"https://png.pngtree.com/svg/20161013/dpi_user_default_avatar_116868.png\" alt=\"avatar\" class=\"avatar\">\r\n    </div>\r\n    <div class=\"login\">{{username}}</div>\r\n  </div>\r\n  <div class=\"account-popup-menu\">\r\n    <button mat-stroked-button (click)=\"goToAccountSettingsPage()\">Param&egrave;tres</button>\r\n    <button mat-stroked-button (click)=\"logout()\">D&eacute;connexion</button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AccountSettingsAccessTokensComponent",
            "id": "component-AccountSettingsAccessTokensComponent-bcd93e440e83b2e8b181b4f11b44857899ef4ddc3a3eac2942c64e84b8185888a6c2299916a4ba8edaca387fbb1bc996706469aef9c32bdb1ae4595bd7465da3",
            "file": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-access-tokens/account-settings-access-tokens.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-account-settings-access-tokens",
            "styleUrls": [
                "./account-settings-access-tokens.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-settings-access-tokens.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createdToken",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentAccount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LeafAccountModel>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'creation', 'expiration', 'action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formBuilder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "privateTokenCreationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPrivateToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "revokePrivateToken",
                    "args": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { LeafSessionService } from '../../../../services/index';\r\nimport { LeafAccountModel } from '../../../../api/models/index';\r\nimport { selectCurrentAccountData } from '../../../../store/core/session/session.selectors';\r\n\r\n@Component({\r\n  selector: 'leaf-account-settings-access-tokens',\r\n  templateUrl: './account-settings-access-tokens.component.html',\r\n  styleUrls: ['./account-settings-access-tokens.component.scss']\r\n})\r\nexport class AccountSettingsAccessTokensComponent {\r\n  public displayedColumns: string[] = ['name', 'creation', 'expiration', 'action'];\r\n  public privateTokenCreationForm: FormGroup;\r\n\r\n  public currentAccount$: Observable<LeafAccountModel>;\r\n\r\n  public createdToken: string = null;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    public formBuilder: FormBuilder,\r\n    private sessionService: LeafSessionService\r\n  ) {\r\n    this.currentAccount$ = this.store.select(selectCurrentAccountData);\r\n    this.privateTokenCreationForm = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      expiration: [''],\r\n    });\r\n  }\r\n\r\n  public addPrivateToken() {\r\n    if (this.privateTokenCreationForm.valid) {\r\n      const { name, expiration } = this.privateTokenCreationForm.getRawValue();\r\n      this.sessionService.addPrivateToken(name, expiration).then(token => this.createdToken = token);\r\n    }\r\n  }\r\n\r\n  public revokePrivateToken(name) {\r\n    this.sessionService.revokePrivateToken(name);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\r\n  margin: 16px;\r\n}\r\n\r\n.container-spacer {\r\n  padding: 1em;\r\n}\r\n\r\n.row {\r\n  width: 100%;\r\n  display: flex;\r\n\r\n  .input {\r\n    padding: 0.25em;\r\n    flex: 1;\r\n\r\n    .mat-form-field {\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n\r\n.full-width-table {\r\n  width: 100%;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n}\r\n\r\n.float-right {\r\n  float: right;\r\n}\r\n\r\n.warn {\r\n  color: red;\r\n}\r\n\r\n.content-wrap {\r\n  width: 480px;\r\n  overflow-wrap: break-word;\r\n}\r\n",
                    "styleUrl": "./account-settings-access-tokens.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"header-line\">\r\n  <div class=\"title\">\r\n    <h2 class=\"\">ACCESS TOKENS</h2>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n\r\n<div class=\"container-spacer\">\r\n  You can generate a personal access token for each application you use that needs access to this web application API.\r\n</div>\r\n\r\n<mat-divider *ngIf=\"createdToken\"></mat-divider>\r\n\r\n\r\n<div class=\"container-spacer\" *ngIf=\"createdToken\">\r\n  <h5 class=\"\">Your new Access Token</h5>\r\n  <mat-card class=\"content-wrap\">\r\n    {{createdToken}}\r\n  </mat-card>\r\n  <br/>\r\n  <small class=\"warn small\">Make sure you save it - you won't be able to access it again.</small>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"container-spacer\">\r\n  <form class=\"form\" [formGroup]=\"privateTokenCreationForm\">\r\n    <div class=\"row\">\r\n      <div class=\"input\">\r\n        <mat-form-field>\r\n          <input matInput id=\"name\" placeholder=\"Name\" value=\"\" formControlName=\"name\">\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"input\">\r\n        <mat-form-field>\r\n          <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\" formControlName=\"expiration\">\r\n          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n          <mat-datepicker #picker></mat-datepicker>\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <button mat-button (click)=\"addPrivateToken()\" [disabled]=\"privateTokenCreationForm.invalid\">CREATE ACCESS TOKEN</button>\r\n</div>\r\n\r\n<mat-divider *ngIf=\"(currentAccount$ | async)?.privateTokens != null && (currentAccount$ | async)?.privateTokens.length > 0\"></mat-divider>\r\n\r\n<div class=\"container-spacer\" *ngIf=\"(currentAccount$ | async)?.privateTokens != null && (currentAccount$ | async)?.privateTokens.length > 0\">\r\n    <table mat-table [dataSource]=\"(currentAccount$ | async)?.privateTokens\">\r\n\r\n        <!--- Note that these columns can be defined in any order.\r\n              The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef> Name </th>\r\n          <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Creation Column -->\r\n        <ng-container matColumnDef=\"creation\">\r\n          <th mat-header-cell *matHeaderCellDef> Created </th>\r\n          <td mat-cell *matCellDef=\"let element\"> {{element.created | date:'MMMM d, y'}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Expiration Column -->\r\n        <ng-container matColumnDef=\"expiration\">\r\n          <th mat-header-cell *matHeaderCellDef> Expires </th>\r\n          <td mat-cell *matCellDef=\"let element\">\r\n              <span *ngIf=\"element.expiration\">{{element.expiration | date:'MMMM d, y' }}</span>\r\n              <span *ngIf=\"!element.expiration\">Never</span>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <!-- Action Column -->\r\n        <ng-container matColumnDef=\"action\">\r\n          <th mat-header-cell *matHeaderCellDef></th>\r\n          <td mat-cell *matCellDef=\"let element\">\r\n            <button mat-raised-button color=\"warn\" class=\"float-right\" (click)=\"revokePrivateToken(element.name)\">Revoke</button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n      </table>\r\n</div>\r\n"
        },
        {
            "name": "AccountSettingsAvatarComponent",
            "id": "component-AccountSettingsAvatarComponent-a5686380a943a1a881920362b5309036d45956b29502e7ae9b8ccb5f572e4eb36c1cc6dbed6d8531be9bf4255946df23e92362ce9a0e695d30fc3df7a60c2249",
            "file": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-avatar/account-settings-avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-account-settings-avatar",
            "styleUrls": [
                "./account-settings-avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-settings-avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "changeAvatarForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formBuilder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sessionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafSessionService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeAvatar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { LeafSessionService } from '../../../../services/index';\r\n\r\n@Component({\r\n  selector: 'leaf-account-settings-avatar',\r\n  templateUrl: './account-settings-avatar.component.html',\r\n  styleUrls: ['./account-settings-avatar.component.scss'],\r\n})\r\nexport class AccountSettingsAvatarComponent implements OnInit {\r\n  public changeAvatarForm: FormGroup;\r\n\r\n  constructor(\r\n    public formBuilder: FormBuilder,\r\n    public sessionService: LeafSessionService\r\n  ) {\r\n    this.changeAvatarForm = this.formBuilder.group({\r\n      avatarUrl: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  changeAvatar() {\r\n    if (this.changeAvatarForm.valid) {\r\n      const { avatarUrl } = this.changeAvatarForm.getRawValue();\r\n      this.sessionService.changeAvatar(avatarUrl);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\r\n  margin: 16px;\r\n}\r\n\r\n.container {\r\n  .card {\r\n    width: 95%;\r\n  }\r\n\r\n  .description-error {\r\n    margin-bottom: 0.5em;\r\n  }\r\n}\r\n\r\n.container-spacer {\r\n  padding: 1em;\r\n}\r\n\r\n.uploader {\r\n  width: 15em;\r\n  height: 15em;\r\n  margin: auto;\r\n}\r\n\r\n.uploader-button {\r\n  width: 100%;\r\n  margin-top: 1em;\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./account-settings-avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-line\">\r\n  <div class=\"title\">\r\n    <h2 class=\"\">AVATAR</h2>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"container-spacer\">\r\n  <form class=\"uploader\" [formGroup]=\"changeAvatarForm\">\r\n    <leaf-image-upload formControlName=\"avatarUrl\"></leaf-image-upload>\r\n  </form>\r\n  <button class=\"uploader-button\" mat-button (click)=\"changeAvatar()\" [disabled]=\"changeAvatarForm.invalid\">ENREGISTRER\r\n    CET AVATAR\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "AccountSettingsGeneralComponent",
            "id": "component-AccountSettingsGeneralComponent-58152f4262a14c04a4cbc433f3113404a40b069d2a487168c687998dfe3eff8f739393445484226146791f6528ca426c5f1e92d9e23bed5177ed26c23f00afe8",
            "file": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-general/account-settings-general.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-account-settings-general",
            "styleUrls": [
                "./account-settings-general.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-settings-general.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "changeNameForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formBuilder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "members",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sessionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafSessionService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { LeafSessionService } from '../../../../services/index';\r\n\r\n@Component({\r\n  selector: 'leaf-account-settings-general',\r\n  templateUrl: './account-settings-general.component.html',\r\n  styleUrls: ['./account-settings-general.component.scss'],\r\n})\r\nexport class AccountSettingsGeneralComponent implements OnInit {\r\n  public changeNameForm: FormGroup;\r\n\r\n  public members: string[] = [];\r\n\r\n  constructor(\r\n    public formBuilder: FormBuilder,\r\n    public sessionService: LeafSessionService\r\n  ) {\r\n    this.changeNameForm = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  changeName() {\r\n    if (this.changeNameForm.valid) {\r\n      const { username } = this.changeNameForm.getRawValue();\r\n      this.sessionService.changeUsername(username);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\r\n  margin: 16px;\r\n}\r\n\r\n.container {\r\n  .card {\r\n    width: 95%;\r\n  }\r\n\r\n  .description-error {\r\n    margin-bottom: 0.5em;\r\n  }\r\n}\r\n\r\n.container-spacer {\r\n  padding: 1em;\r\n}\r\n\r\n.float-right {\r\n  float: right;\r\n}\r\n\r\n.addMember:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.form {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.information {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .mat-icon {\r\n    margin-right: 0.3em;\r\n  }\r\n\r\n  .description {\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\n.row {\r\n  width: 100%;\r\n  display: flex;\r\n\r\n  .input {\r\n    padding: 0.25em;\r\n    flex: 1;\r\n\r\n    .mat-form-field {\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./account-settings-general.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-line\">\r\n  <div class=\"title\">\r\n    <h2 class=\"\">GENERAL</h2>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"container-spacer\">\r\n  <form class=\"form\" [formGroup]=\"changeNameForm\">\r\n    <h3 class=\"\">PSEUDO</h3>\r\n    <div class=\"row\">\r\n      <div class=\"input\">\r\n        <mat-form-field>\r\n          <input matInput id=\"username\" placeholder=\"Pseudo\" value=\"\" formControlName=\"username\">\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <button mat-button (click)=\"changeName()\" [disabled]=\"changeNameForm.invalid\">CHANGER MON NOM</button>\r\n</div>\r\n"
        },
        {
            "name": "AccountSettingsPageComponent",
            "id": "component-AccountSettingsPageComponent-f7eb1d906aa8d06d8ddbd0c8e6a6e5a6d4d595235f1c404c8679ab3611b7c03027911b7ffe97093ed755b317aef7b08c0b2d4f92abf4a0f8dec76217737ebcb2",
            "file": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-account-settings-page",
            "styleUrls": [
                "./account-settings-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-settings-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentAccount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LeafAccountModel>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentRoute",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "links",
                    "defaultValue": "[\r\n    {\r\n      link: 'general',\r\n      name: 'General',\r\n    },\r\n    {\r\n      link: 'avatar',\r\n      name: 'Avatar',\r\n    },\r\n    {\r\n      link: 'password',\r\n      name: 'Password',\r\n    },\r\n    {\r\n      link: 'accesstokens',\r\n      name: 'Access Tokens',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { LeafAccountModel } from '../../../api/models/index';\r\nimport { selectCurrentAccountData } from '../../../store/core/session/session.selectors';\r\n\r\n@Component({\r\n  selector: 'leaf-account-settings-page',\r\n  templateUrl: './account-settings-page.component.html',\r\n  styleUrls: ['./account-settings-page.component.scss'],\r\n})\r\nexport class AccountSettingsPageComponent implements OnInit {\r\n  public links = [\r\n    {\r\n      link: 'general',\r\n      name: 'General',\r\n    },\r\n    {\r\n      link: 'avatar',\r\n      name: 'Avatar',\r\n    },\r\n    {\r\n      link: 'password',\r\n      name: 'Password',\r\n    },\r\n    {\r\n      link: 'accesstokens',\r\n      name: 'Access Tokens',\r\n    },\r\n  ];\r\n\r\n  public currentRoute = '';\r\n\r\n  public currentAccount$: Observable<LeafAccountModel>;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private router: Router\r\n  ) {\r\n    this.currentAccount$ = this.store.select(selectCurrentAccountData);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.currentRoute = this.router.url;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#account-settings-page {\r\n  width: 100%;\r\n\r\n  #account-settings-page-container {\r\n    display: flex;\r\n\r\n    #account-settings-left-column {\r\n      width: 200px;\r\n      margin: 0.5em;\r\n    }\r\n\r\n    #account-settings-right-column {\r\n      flex: 1;\r\n      margin: 0.5em;\r\n      background-color: white;\r\n    }\r\n  }\r\n}\r\n\r\n.account-trailer-head {\r\n  background-color: white;\r\n  width: calc(100% - 2em);\r\n  text-align: center;\r\n  margin-bottom: 0.5em;\r\n  padding: 1em;\r\n\r\n  .avatar {\r\n    border: solid 1px grey;\r\n    border-radius: 50%;\r\n    height: 80px;\r\n    width: 80px;\r\n  }\r\n\r\n  .login {\r\n    font-weight: bolder;\r\n    font-size: 120%;\r\n  }\r\n}\r\n\r\n.account-settings-menu {\r\n  width: 100%;\r\n  background-color: white;\r\n}\r\n\r\nul.js-nav-links {\r\n  margin: 0;\r\n  list-style: none;\r\n  padding: 0;\r\n  width: 100%;\r\n\r\n  li {\r\n    width: calc(100% - 1em);\r\n    padding: 0.5em;\r\n\r\n    a {\r\n      text-decoration: none;\r\n      color: black;\r\n\r\n      &.active {\r\n        font-weight: 900;\r\n      }\r\n    }\r\n  }\r\n\r\n  li:not(:first-child) {\r\n    border-top: solid 1px rgb(200, 200, 200);\r\n  }\r\n}\r\n",
                    "styleUrl": "./account-settings-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"account-settings-page\">\r\n  <div id=\"account-settings-page-container\">\r\n      <div id=\"account-settings-left-column\">\r\n          <div class=\"account-trailer-head\">\r\n              <div data-v-31254916=\"\" class=\"v-avatar grey lighten-4\">\r\n                <img data-v-31254916=\"\" *ngIf=\"(currentAccount$ | async)?.avatarUrl\" [src]=\"(currentAccount$ | async)?.avatarUrl\" alt=\"avatar\" class=\"avatar\">\r\n                <img data-v-31254916=\"\" *ngIf=\"!(currentAccount$ | async)?.avatarUrl\" src=\"https://png.pngtree.com/svg/20161013/dpi_user_default_avatar_116868.png\" alt=\"avatar\" class=\"avatar\">\r\n              </div>\r\n              <div class=\"login\">{{(currentAccount$ | async)?.username}}</div>\r\n          </div>\r\n          <div class=\"account-settings-menu\">\r\n              <ul class=\"js-nav-links\">\r\n                  <li *ngFor=\"let link of links\">\r\n                    <a class=\"list-link js-nav\"\r\n                      [routerLink]=\"link.link\"\r\n                      routerLinkActive=\"active\">\r\n                      {{link.name}} <span class=\"Icon Icon--caretRight\"></span>\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n          </div>\r\n      </div>\r\n      <div id=\"account-settings-right-column\">\r\n          <router-outlet></router-outlet>\r\n      </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AccountSettingsPasswordComponent",
            "id": "component-AccountSettingsPasswordComponent-55f8527532ae6f9aa83678f3ce36cee21509ebda180a7b8632f3dd16f7e6afcab013bb6315f28b52319b28df7963c24fe1ce59566d2903ed08db872e641649b9",
            "file": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-password/account-settings-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-account-settings-password",
            "styleUrls": [
                "./account-settings-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-settings-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "members",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { LeafSessionService } from '../../../../services/index';\r\n\r\n@Component({\r\n  selector: 'leaf-account-settings-password',\r\n  templateUrl: './account-settings-password.component.html',\r\n  styleUrls: ['./account-settings-password.component.scss'],\r\n})\r\nexport class AccountSettingsPasswordComponent implements OnInit {\r\n\r\n  public members: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\r\n  margin: 16px;\r\n}\r\n\r\n.container {\r\n  .card {\r\n    width: 95%;\r\n  }\r\n\r\n  .description-error {\r\n    margin-bottom: 0.5em;\r\n  }\r\n}\r\n\r\n.container-spacer {\r\n  padding: 1em;\r\n}\r\n\r\n.float-right {\r\n  float: right;\r\n}\r\n\r\n.addMember:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.form {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.information {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .mat-icon {\r\n    margin-right: 0.3em;\r\n  }\r\n\r\n  .description {\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\n.row {\r\n  width: 100%;\r\n  display: flex;\r\n\r\n  .input {\r\n    padding: 0.25em;\r\n    flex: 1;\r\n\r\n    .mat-form-field {\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./account-settings-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-line\">\r\n  <div class=\"title\">\r\n    <h2 class=\"\">MOT DE PASSE</h2>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"container-spacer\">\r\n  <leaf-password-update></leaf-password-update>\r\n</div>\r\n"
        },
        {
            "name": "AdminSettingsAdministratorsComponent",
            "id": "component-AdminSettingsAdministratorsComponent-2eada77cad148bf7da4e0db94950b79e2b52e27beec270d427bbb4fe8dfcea8fabeb6a8b17dcf7dce3d331a569adfa08360ba2a443cc0ac1f88a6b95eb2c1ffc",
            "file": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-administrators/admin-settings-administrators.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-admin-settings-administrators",
            "styleUrls": [
                "./admin-settings-administrators.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-settings-administrators.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addAdminForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "administrators$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedEmails",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addAmin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAdmins",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { LeafAdminService } from '../../../../services/index';\r\nimport { selectAdministrators } from '../../../../store/core/administration/administration.selectors';\r\n\r\n@Component({\r\n  selector: 'leaf-admin-settings-administrators',\r\n  templateUrl: './admin-settings-administrators.component.html',\r\n  styleUrls: ['./admin-settings-administrators.component.scss'],\r\n})\r\nexport class AdminSettingsAdministratorsComponent implements OnInit {\r\n  public addAdminForm: FormGroup;\r\n\r\n  public administrators$: Observable<string[]>;\r\n  selectedEmails: string[] = [];\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private formBuilder: FormBuilder,\r\n    private adminService: LeafAdminService\r\n  ) {\r\n    this.addAdminForm = this.formBuilder.group({\r\n      user: [null, Validators.required],\r\n    });\r\n    adminService.fetchAdmins();\r\n    this.administrators$ = this.store.select(selectAdministrators);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  addAmin() {\r\n    if (this.addAdminForm.valid) {\r\n      const { user } = this.addAdminForm.getRawValue();\r\n      this.adminService.addAdmin(user.id);\r\n    }\r\n  }\r\n\r\n  removeAdmins() {\r\n    if (this.selectedEmails.length) {\r\n      this.selectedEmails.forEach((email) => this.adminService.removeAdmin(email));\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\r\n  margin: 16px;\r\n}\r\n\r\n.container {\r\n  .card {\r\n    width: 95%;\r\n  }\r\n\r\n  .description-error {\r\n    margin-bottom: 0.5em;\r\n  }\r\n}\r\n\r\n.container-spacer {\r\n  padding: 1em;\r\n}\r\n\r\n.float-right {\r\n  float: right;\r\n}\r\n\r\n.addMember:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.form {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.information {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .mat-icon {\r\n    margin-right: 0.3em;\r\n  }\r\n\r\n  .description {\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\n.row {\r\n  width: 100%;\r\n  display: flex;\r\n\r\n  .input {\r\n    padding: 0.25em;\r\n    flex: 1;\r\n\r\n    .mat-form-field {\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./admin-settings-administrators.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adminService",
                        "type": "LeafAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adminService",
                        "type": "LeafAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-line\">\r\n  <div class=\"title\">\r\n    <h2 class=\"\">ADMINISTRATEURS</h2>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"container-spacer\">\r\n  <h3>ADMINISTRATEURS ACTUELS</h3>\r\n  <mat-selection-list #admins [(ngModel)]=\"selectedEmails\">\r\n    <mat-list-option *ngFor=\"let admin of (administrators$ | async)\" [value]=\"admin\">\r\n      {{admin}}\r\n    </mat-list-option>\r\n  </mat-selection-list>\r\n  <button mat-stroked-button (click)=\"removeAdmins()\" [disabled]=\"!admins.selectedOptions.selected.length\">RETIRER DROIT D'ADMINISTRATION</button>\r\n  <form class=\"form\" [formGroup]=\"addAdminForm\">\r\n    <h3 class=\"\">AJOUTER ADMINISTRATEUR</h3>\r\n    <div class=\"row\">\r\n      <div class=\"input\">\r\n        <leaf-user-selector formControlName=\"user\"></leaf-user-selector>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <button mat-stroked-button (click)=\"addAmin()\" [disabled]=\"addAdminForm.invalid\">AJOUTER</button>\r\n</div>\r\n"
        },
        {
            "name": "AdminSettingsPageComponent",
            "id": "component-AdminSettingsPageComponent-315dd781dd9cb732a7f1fec24678fbabb8849a2b481a41de9aba34a2585fa14448c378c9d579926608a380669cf5db08807a2bffce88f6f33b4e18db1eb4b1f8",
            "file": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-admin-settings-page",
            "styleUrls": [
                "./admin-settings-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-settings-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentAccount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LeafAccountModel>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentRoute",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "links",
                    "defaultValue": "[\r\n    {\r\n      link: 'users',\r\n      name: 'Utilisateurs',\r\n    },\r\n    {\r\n      link: 'administrators',\r\n      name: 'Administrateurs',\r\n    },\r\n    {\r\n      link: 'whitelist',\r\n      name: 'Emails authorisés',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { LeafAccountModel } from '../../../api/models/index';\r\nimport { selectCurrentAccountData } from '../../../store/core/session/session.selectors';\r\n\r\n@Component({\r\n  selector: 'leaf-admin-settings-page',\r\n  templateUrl: './admin-settings-page.component.html',\r\n  styleUrls: ['./admin-settings-page.component.scss'],\r\n})\r\nexport class AdminSettingsPageComponent implements OnInit {\r\n  public links = [\r\n    {\r\n      link: 'users',\r\n      name: 'Utilisateurs',\r\n    },\r\n    {\r\n      link: 'administrators',\r\n      name: 'Administrateurs',\r\n    },\r\n    {\r\n      link: 'whitelist',\r\n      name: 'Emails authorisés',\r\n    },\r\n  ];\r\n\r\n  public currentRoute = '';\r\n\r\n  public currentAccount$: Observable<LeafAccountModel>;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private router: Router\r\n  ) {\r\n    this.currentAccount$ = this.store.select(selectCurrentAccountData);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.currentRoute = this.router.url;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#admin-settings-page {\r\n  width: 100%;\r\n\r\n  #admin-settings-page-container {\r\n    display: flex;\r\n\r\n    #admin-settings-left-column {\r\n      width: 200px;\r\n      margin: 0.5em;\r\n    }\r\n\r\n    #admin-settings-right-column {\r\n      flex: 1;\r\n      margin: 0.5em;\r\n      background-color: white;\r\n    }\r\n  }\r\n}\r\n\r\n.admin-settings-menu {\r\n  width: 100%;\r\n  background-color: white;\r\n}\r\n\r\nul.js-nav-links {\r\n  margin: 0;\r\n  list-style: none;\r\n  padding: 0;\r\n  width: 100%;\r\n\r\n  li {\r\n    width: calc(100% - 1em);\r\n    padding: 0.5em;\r\n\r\n    a {\r\n      text-decoration: none;\r\n      color: black;\r\n\r\n      &.active {\r\n        font-weight: 900;\r\n      }\r\n    }\r\n  }\r\n\r\n  li:not(:first-child) {\r\n    border-top: solid 1px rgb(200, 200, 200);\r\n  }\r\n}\r\n",
                    "styleUrl": "./admin-settings-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"admin-settings-page\">\r\n  <div id=\"admin-settings-page-container\">\r\n      <div id=\"admin-settings-left-column\">\r\n          <div class=\"admin-settings-menu\">\r\n              <ul class=\"js-nav-links\">\r\n                  <li *ngFor=\"let link of links\">\r\n                    <a class=\"list-link js-nav\"\r\n                      [routerLink]=\"link.link\"\r\n                      routerLinkActive=\"active\">\r\n                      {{link.name}} <span class=\"Icon Icon--caretRight\"></span>\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n          </div>\r\n      </div>\r\n      <div id=\"admin-settings-right-column\">\r\n          <router-outlet></router-outlet>\r\n      </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AdminSettingsUsersComponent",
            "id": "component-AdminSettingsUsersComponent-068c079290ef0556c2eeba69132c22f4c4ebdf255490d9bf09cc76525825e5a5e97ad27c038f1b35d565288add099b3cd1f60729cb84a5f19122edfb977ed33a",
            "file": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-users/admin-settings-users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-admin-settings-users",
            "styleUrls": [
                "./admin-settings-users.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-settings-users.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsToDisplay",
                    "defaultValue": "['id', 'email', 'username', 'registrationDate', 'isAdmin', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "users$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LeafAccountModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { LeafAdminService } from '../../../../services/core/admin/leaf-admin.service';\r\nimport { LeafAccountModel } from '../../../../api/models/index';\r\nimport { selectUsers } from '../../../../store/core/administration/administration.selectors';\r\nimport { Observable } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ConfirmDialogComponent, ConfirmDialogModel } from '../../../common/confirm-dialog/confirm-dialog.component';\r\n\r\n@Component({\r\n  selector: 'leaf-admin-settings-users',\r\n  templateUrl: './admin-settings-users.component.html',\r\n  styleUrls: ['./admin-settings-users.component.scss']\r\n})\r\nexport class AdminSettingsUsersComponent implements OnInit {\r\n  columnsToDisplay = ['id', 'email', 'username', 'registrationDate', 'isAdmin', 'actions'];\r\n  public users$: Observable<LeafAccountModel[]>;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private adminService: LeafAdminService,\r\n    public dialog: MatDialog\r\n  ) {\r\n      this.users$ = this.store.select(selectUsers);\r\n    }\r\n\r\n  ngOnInit() {\r\n    this.adminService.fetchUsers();\r\n  }\r\n\r\n  public deleteAccount(account) {\r\n\r\n    const dialogData = new ConfirmDialogModel(\"Delete user ?\", `Are you sure you want to delete user ${account.login || account.email}`);\r\n\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      maxWidth: \"400px\",\r\n      data: dialogData\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(confirmed => {\r\n      if (confirmed) {\r\n        this.adminService.deleteAccount(account.id);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\r\n  width: 100%;\r\n\r\n  th {\r\n    width: 25%;\r\n  }\r\n}\r\n\r\n.title {\r\n    margin: 16px;\r\n  }\r\n  \r\n  .container {\r\n    .card {\r\n      width: 95%;\r\n    }\r\n  \r\n    .description-error {\r\n      margin-bottom: 0.5em;\r\n    }\r\n  }\r\n  \r\n  .container-spacer {\r\n    padding: 1em;\r\n  }\r\n  \r\n  .float-right {\r\n    float: right;\r\n  }\r\n  \r\n  .addMember:hover {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .form {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .information {\r\n    display: flex;\r\n    align-items: center;\r\n  \r\n    .mat-icon {\r\n      margin-right: 0.3em;\r\n    }\r\n  \r\n    .description {\r\n      font-weight: bold;\r\n    }\r\n  }\r\n  \r\n  .row {\r\n    width: 100%;\r\n    display: flex;\r\n  \r\n    .input {\r\n      padding: 0.25em;\r\n      flex: 1;\r\n  \r\n      .mat-form-field {\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n  ",
                    "styleUrl": "./admin-settings-users.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adminService",
                        "type": "LeafAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adminService",
                        "type": "LeafAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-line\">\r\n  <div class=\"title\">\r\n    <h2 class=\"\">LISTES DES UTILISATEURS</h2>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"container-spacer\">\r\n  <table mat-table [dataSource]=\"users$ | async\" class=\"mat-elevation-z8\">\r\n\r\n    <ng-container matColumnDef=\"id\">\r\n      <th mat-header-cell *matHeaderCellDef> ID </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"email\">\r\n      <th mat-header-cell *matHeaderCellDef> Email </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"username\">\r\n      <th mat-header-cell *matHeaderCellDef> Pseudo </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.username}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"registrationDate\">\r\n      <th mat-header-cell *matHeaderCellDef> Registration date </th>\r\n      <td mat-cell *matCellDef=\"let element\">\r\n        <ng-container *ngIf=\"element.metadata\">\r\n        {{element.metadata.creationDate | date : 'short'}}\r\n        </ng-container>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"isAdmin\">\r\n      <th mat-header-cell *matHeaderCellDef> Administrateur ? </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{!!element.admin ? 'Oui': 'Non'}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\r\n      <td mat-cell *matCellDef=\"let element\">\r\n        <button mat-mini-fab [disabled]=\"!!element.admin\" (click)=\"deleteAccount(element)\" color=\"primary\">\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"></tr>\r\n  </table>\r\n</div>\r\n"
        },
        {
            "name": "AdminSettingsWhitelistComponent",
            "id": "component-AdminSettingsWhitelistComponent-6a3d2081bfa205593b18c9e3b298f386ca7be6c02a8b3784411479c51b89bba822afc6bc299bba41813e0e770411cfd92f2f903e0ae54cb62a305f4525966b87",
            "file": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-whitelist/admin-settings-whitelist.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-admin-settings-whitelist",
            "styleUrls": [
                "./admin-settings-whitelist.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-settings-whitelist.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authorizedEmails$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LeafAuthorizedEmailModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formBuilder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedEmails",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "whitelistEmailForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeEmails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "whitelistEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { LeafAdminService } from '../../../../services/index';\r\nimport { LeafAuthorizedEmailModel } from '../../../../api/models/index';\r\nimport { selectAuthorizedEmails } from '../../../../store/core/administration/administration.selectors';\r\n\r\n@Component({\r\n  selector: 'leaf-admin-settings-whitelist',\r\n  templateUrl: './admin-settings-whitelist.component.html',\r\n  styleUrls: ['./admin-settings-whitelist.component.scss'],\r\n})\r\nexport class AdminSettingsWhitelistComponent implements OnInit {\r\n  public whitelistEmailForm: FormGroup;\r\n\r\n  public authorizedEmails$: Observable<LeafAuthorizedEmailModel[]>;\r\n  selectedEmails: string[] = [];\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private adminService: LeafAdminService,\r\n    public formBuilder: FormBuilder\r\n  ) {\r\n    this.whitelistEmailForm = this.formBuilder.group({\r\n      emails: ['', Validators.required],\r\n    });\r\n    adminService.fetchAuthorizedEmail();\r\n    this.authorizedEmails$ = this.store.select(selectAuthorizedEmails);\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  public whitelistEmail() {\r\n    if (this.whitelistEmailForm.valid) {\r\n      const emailsInput = this.whitelistEmailForm.getRawValue().emails;\r\n      const emails = emailsInput.split(';').map((email) => email.trim());\r\n      this.adminService.addAuthorizedEmail(emails);\r\n      this.whitelistEmailForm.setValue({emails: ''});\r\n    }\r\n  }\r\n\r\n  public removeEmails() {\r\n    if (this.selectedEmails.length) {\r\n      this.adminService.removeAuthorizedEmail(this.selectedEmails);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\r\n  margin: 16px;\r\n}\r\n\r\n.container {\r\n  .card {\r\n    width: 95%;\r\n  }\r\n\r\n  .description-error {\r\n    margin-bottom: 0.5em;\r\n  }\r\n}\r\n\r\n.container-spacer {\r\n  padding: 1em;\r\n}\r\n\r\n.float-right {\r\n  float: right;\r\n}\r\n\r\n.addMember:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.form {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.information {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .mat-icon {\r\n    margin-right: 0.3em;\r\n  }\r\n\r\n  .description {\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\n.row {\r\n  width: 100%;\r\n  display: flex;\r\n\r\n  .input {\r\n    padding: 0.25em;\r\n    flex: 1;\r\n\r\n    .mat-form-field {\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./admin-settings-whitelist.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adminService",
                        "type": "LeafAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adminService",
                        "type": "LeafAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-line\">\r\n  <div class=\"title\">\r\n    <h2 class=\"\">GESTION DES EMAILS AUTORISES</h2>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"container-spacer\">\r\n  <h3 class=\"\">EMAILS AUTHORISES</h3>\r\n  <mat-selection-list #emails [(ngModel)]=\"selectedEmails\">\r\n    <mat-list-option *ngFor=\"let email of (authorizedEmails$ | async)\" [value]=\"email.email\">\r\n      {{email.email}}\r\n    </mat-list-option>\r\n  </mat-selection-list>\r\n  <button mat-stroked-button [disabled]=\"!selectedEmails.length\" (click)=\"removeEmails()\">RETIRER DES EMAILS AUTORISES</button>\r\n\r\n  <form class=\"form\" [formGroup]=\"whitelistEmailForm\">\r\n    <h3 class=\"\">AUTORISER UN EMAIL</h3>\r\n    <div class=\"row\">\r\n      <div class=\"input\">\r\n        <mat-form-field>\r\n          <input matInput id=\"email\" placeholder=\"email1; email2; etc...\" value=\"\" formControlName=\"emails\">\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <button mat-stroked-button (click)=\"whitelistEmail()\" [disabled]=\"whitelistEmailForm.invalid\">AUTORISER CES EMAILS</button>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0a1e447dd0e151e6bd21efbfe0aba30ecd2a09130fbcd4befeb49f3dd32216954f04d5c1e2e2ce90781d0dee2c67b1a39a8334da748bcd58fe21462050044140",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "links",
                    "defaultValue": "[\r\n    {\r\n      label: 'My Settings',\r\n      link: 'settings/general'\r\n    },\r\n    {\r\n      label: 'Admin panel',\r\n      link: 'admin/users'\r\n    },\r\n    {\r\n      label: 'Common templates',\r\n      link: 'templates'\r\n    },\r\n    {\r\n      label: 'Statistics demo',\r\n      link: 'statistics'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'ngleaf-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'ngleaf-app';\r\n\r\n  public links = [\r\n    {\r\n      label: 'My Settings',\r\n      link: 'settings/general'\r\n    },\r\n    {\r\n      label: 'Admin panel',\r\n      link: 'admin/users'\r\n    },\r\n    {\r\n      label: 'Common templates',\r\n      link: 'templates'\r\n    },\r\n    {\r\n      label: 'Statistics demo',\r\n      link: 'statistics'\r\n    }\r\n  ];\r\n\r\n  constructor() {}\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tmp-container {\r\n  margin-left: 15em;\r\n}\r\n\r\n.header {\r\n  flex: 1;\r\n  \r\n  &>* {\r\n    float: right;\r\n  }\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "templateData": "<leaf-navigation [contentTemplate]=\"content\" [headerTemplate]=\"header\" [links]=\"links\" title=\"ngleaf demo app\"></leaf-navigation>\r\n\r\n<ng-template #header>\r\n  <span class=\"header\">\r\n    <leaf-header-account></leaf-header-account>\r\n  </span>\r\n</ng-template>\r\n\r\n<ng-template #content>\r\n  {{ 'app.content.welcome' | translate}}\r\n  <router-outlet></router-outlet>\r\n</ng-template>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConfirmDialogComponent",
            "id": "component-ConfirmDialogComponent-0ba6d7c59fefc2daf6d42af7fe1de555b3db57d88697c3a7ec0cc05462f3a515dd8e7617747be49210edf14f0922dcb75588ff4382979bf0f01edd1a514a0e24",
            "file": "projects/ngleaf/src/components/common/confirm-dialog/confirm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-dialog",
            "styleUrls": [
                "./confirm-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmDialogModel",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  styleUrls: ['./confirm-dialog.component.scss']\r\n})\r\nexport class ConfirmDialogComponent implements OnInit {\r\n  title: string;\r\n  message: string;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogModel) {\r\n    // Update view with given values\r\n    this.title = data.title;\r\n    this.message = data.message;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onConfirm(): void {\r\n    // Close the dialog, return true\r\n    this.dialogRef.close(true);\r\n  }\r\n\r\n  onDismiss(): void {\r\n    // Close the dialog, return false\r\n    this.dialogRef.close(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Class to represent confirm dialog model.\r\n *\r\n * It has been kept here to keep it as part of shared component.\r\n */\r\nexport class ConfirmDialogModel {\r\n\r\n  constructor(public title: string, public message: string) {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "ConfirmDialogModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "ConfirmDialogModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>\r\n  {{title}}\r\n</h1>\r\n\r\n<div mat-dialog-content>\r\n  <p>{{message}}</p>\r\n</div>\r\n\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onDismiss()\">No</button>\r\n  <button mat-raised-button color=\"warn\" (click)=\"onConfirm()\">Yes</button>\r\n</div>\r\n"
        },
        {
            "name": "ForbiddenComponent",
            "id": "component-ForbiddenComponent-4547f26f7eb14669a8f883908516bde98b8a2b1ba0dc49eba9b75742155bf36e26b14e0c8a2edee9c8aa9950eb7891aeff27d3316fe3b300995ace2a9d196db6",
            "file": "projects/ngleaf/src/components/pages/forbidden/forbidden.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-forbidden",
            "styleUrls": [
                "./forbidden.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./forbidden.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'leaf-forbidden',\r\n  templateUrl: './forbidden.component.html',\r\n  styleUrls: ['./forbidden.component.css']\r\n})\r\nexport class ForbiddenComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".forbidden-card {\r\n    top: 8em;\r\n    margin: auto;\r\n    width: 35em;\r\n}\r\n\r\n.forbidden-card-content {\r\n    padding-top: 1em;\r\n}",
                    "styleUrl": "./forbidden.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"forbidden-card\">\r\n  <h2>Forbidden</h2>\r\n  <mat-divider></mat-divider>\r\n  <div class=\"forbidden-card-content\">\r\n    <p>You are not allowed to access the requested page.</p>\r\n  </div>\r\n</mat-card>"
        },
        {
            "name": "GenericFormComponent",
            "id": "component-GenericFormComponent-918c1bfac16837680c3315fcf7a85ef45a2c3a024cd6abe32f8c8379f00092643b36a03d4cb6420bd15de375d9c8ddce1f65bb7208ed490600b096b2b7d58c19",
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-generic-form",
            "styleUrls": [
                "./generic-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "GenericFormConfig",
                    "decorators": []
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "actionClicked",
                    "args": [
                        {
                            "name": "actionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "actionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatFormFieldAppearance } from '@angular/material/form-field';\n\nexport interface GenericFormActionConfig {\n  id: string;\n  labelKey?: string;\n  color?: ThemePalette;\n}\n\nexport type GenericFormInputType = 'text' | 'input' | 'textarea' | 'radios' | 'checkbox' | 'slider';\n\nexport interface TextConfig {\n  labelKey?: string;\n}\n\nexport interface InputConfig {\n  appearance?: MatFormFieldAppearance;\n  labelKey?: string;\n  placeholderKey?: string;\n  color?: ThemePalette;\n}\n\nexport interface CheckboxConfig {\n  labelKey: string;\n}\n\nexport interface RadioConfig {\n  labelKey: string;\n  value: string;\n}\n\nexport interface RadiosConfig {\n  radios: RadioConfig[]\n}\n\nexport interface SliderConfig {\n  min?: number;\n  max?: number;\n  step?: number;\n  invert?: boolean;\n  thumbLabel?: boolean;\n}\n\nexport interface GenericInputConfig {\n  id?: string\n  type: GenericFormInputType;\n  colspan?: number;\n  rowspan?: number;\n}\n\nexport type GenericFormInputConfig = GenericInputConfig & (TextConfig | InputConfig | RadiosConfig | CheckboxConfig | SliderConfig);\n\nexport interface GenericFormGridConfig {\n  cols?: number;\n  rowHeight?: string;\n  gutterSize?: string;\n}\n\nexport interface GenericFormConfig {\n  titleKey?: string,\n  actions?: GenericFormActionConfig[],\n  inputs: GenericFormInputConfig[],\n  grid?: GenericFormGridConfig,\n}\n\n@Component({\n  selector: 'leaf-generic-form',\n  templateUrl: './generic-form.component.html',\n  styleUrls: ['./generic-form.component.scss']\n})\nexport class GenericFormComponent implements OnInit {\n\n  @Input()\n  public config: GenericFormConfig;\n\n  @Input()\n  public formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public actionClicked(actionId: string) {\n    // emit\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".leaf-generic-form {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .title {}\r\n\r\n  .inputs {\r\n    .fit-parent {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .actions {}\r\n}\r\n",
                    "styleUrl": "./generic-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 79
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"leaf-generic-form\" [formGroup]=\"formGroup\">\n  <div\n    *ngIf=\"config.titleKey\"\n    class=\"title\"\n    [innerHtml]=\"config.titleKey | translate | titlecase\"></div>\n  <div class=\"inputs\">\n    <mat-grid-list [cols]=\"config.grid?.cols || 1\" [rowHeight]=\"config.grid?.rowHeight || '65px'\" [gutterSize]=\"config.grid?.gutterSize\">\n      <ng-container *ngFor=\"let input of config.inputs\">\n          <mat-grid-tile [colspan]=\"input.colspan || 1\" [rowspan]=\"input.rowspan || 1\">\n            <ng-container [ngSwitch]=\"input.type\">\n\n              <ng-container *ngSwitchCase=\"'text'\">\n                <div [innerHtml]=\"input.labelKey | translate\"></div>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'input'\">\n                <mat-form-field [appearance]=\"input.appearance\" class=\"fit-parent\">\n                  <mat-label *ngIf=\"input.labelKey\" [innerHtml]=\"input.labelKey | translate\"></mat-label>\n                  <input matInput [placeholder]=\"input.placeholderKey | translate\" [formControlName]=\"input.id\">\n                </mat-form-field>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'textarea'\">\n                <mat-form-field [appearance]=\"input.appearance\" class=\"fit-parent\">\n                  <mat-label *ngIf=\"input.labelKey\" [innerHtml]=\"input.labelKey | translate\"></mat-label>\n                  <textarea matInput [placeholder]=\"input.placeholderKey | translate\" [formControlName]=\"input.id\"></textarea>\n                </mat-form-field>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'radios'\">\n                <mat-radio-group class=\"fit-parent\" [formControlName]=\"input.id\">\n                  <mat-radio-button *ngFor=\"let radio of input.radios\" [value]=\"radio.value\">\n                    {{radio.labelKey | translate}}\n                  </mat-radio-button>\n                </mat-radio-group>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'checkbox'\">\n                <mat-checkbox class=\"fit-parent\" [formControlName]=\"input.id\">{{input.labelKey | translate}}</mat-checkbox>\n              </ng-container>\n\n              <ng-container *ngSwitchCase=\"'slider'\">\n                <mat-slider\n                  class=\"fit-parent\"\n                  [min]=\"input.min || 0\"\n                  [max]=\"input.max || 10\"\n                  [step]=\"input.step || 1\"\n                  [invert]=\"!!input.invert\"\n                  [thumbLabel]=\"!!input.thumbLabel\"\n                  [color]=\"input.color\"\n                  [formControlName]=\"input.id\"\n                  ></mat-slider>\n              </ng-container>\n\n              <ng-container *ngSwitchDefault>\n                Unsuported type {{input.type}}\n              </ng-container>\n            </ng-container>\n          </mat-grid-tile>\n      </ng-container>\n    </mat-grid-list>\n  </div>\n  <div\n    *ngIf=\"config.actions\"\n    class=\"actions\">\n    <button\n      *ngFor=\"let action of config.actions\"\n      mat-flat-button\n      [color]=\"action.color\"\n      [innerHtml]=\"action.labelKey | translate\"\n      (click)=\"actionClicked(action.id)\"\n      ></button>\n  </div>\n</form>\n<br/>\n"
        },
        {
            "name": "HeaderAccountComponent",
            "id": "component-HeaderAccountComponent-bca7a5ac17570dd3d1781154ba3a2f00d80637b3e44f6b0aca2435b1fba9a2168a35d0491613fb5674ca16f657a6e0c271770bba2c3fd42eac6b2c350bdb5c71",
            "file": "projects/ngleaf/src/components/common/header-account/header-account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-header-account",
            "styleUrls": [
                "./header-account.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-account.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentAccount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LeafAccountModel>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "goToRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { LeafAccountModel } from '../../../api/models/index';\r\nimport { selectCurrentAccountData } from '../../../store/core/session/session.selectors';\r\n\r\n@Component({\r\n  selector: 'leaf-header-account',\r\n  templateUrl: './header-account.component.html',\r\n  styleUrls: ['./header-account.component.scss'],\r\n})\r\nexport class HeaderAccountComponent {\r\n  public currentAccount$: Observable<LeafAccountModel>;\r\n\r\n  constructor(private store: Store, private router: Router) {\r\n    this.currentAccount$ = this.store.select(selectCurrentAccountData);\r\n  }\r\n\r\n  public goToLogin() {\r\n    this.router.navigateByUrl('/login');\r\n  }\r\n\r\n  public goToRegister() {\r\n    this.router.navigateByUrl('/register');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#leaf-header {\r\n  position: fixed;\r\n  width: 100%;\r\n  color: grey;\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  text-align: right;\r\n  padding: 0.5em;\r\n  border-bottom: solid 1px rgba(0, 0, 0, 0.25);\r\n  z-index: 999;\r\n}\r\n\r\n.icon:hover {\r\n  color: black;\r\n}\r\n\r\n.icon:not(:disabled) {\r\n  cursor: pointer;\r\n}\r\n\r\n.leaf-header-content {\r\n  width: 1244px;\r\n  margin: auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  * {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    * {\r\n      margin-left: 1em;\r\n      margin-right: 1em;\r\n    }\r\n  }\r\n}\r\n\r\n.header-element {\r\n  display: inline;\r\n  margin-left: 0.5em;\r\n}\r\n\r\n.register-button {\r\n  margin-left: 0.5em;\r\n}\r\n\r\n::ng-deep .account-menu {\r\n  .mat-menu-content:not(:empty) {\r\n    padding: 0;\r\n  }\r\n}",
                    "styleUrl": "./header-account.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-menu #menu=\"matMenu\" class=\"account-menu\">\r\n  <leaf-account-popover-content [username]=\"(currentAccount$ | async)?.username\"\r\n                               [avatarUrl]=\"(currentAccount$ | async)?.avatarUrl\"></leaf-account-popover-content>\r\n</mat-menu>\r\n\r\n<mat-icon *ngIf=\"(currentAccount$ | async)\" class=\"icon\" medium matTooltip=\"Mon compte\"\r\n          [matMenuTriggerFor]=\"menu\">account_circle\r\n</mat-icon>\r\n\r\n<button *ngIf=\"!(currentAccount$ | async)\" mat-stroked-button (click)=\"goToLogin()\">\r\n  LOGIN\r\n</button>\r\n<button class=\"register-button\" *ngIf=\"!(currentAccount$ | async)\" mat-stroked-button (click)=\"goToRegister()\">\r\n  REGISTER\r\n</button>\r\n\r\n\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ImageUploadComponent",
            "id": "component-ImageUploadComponent-e5920b6650731e5f0ed8bf4cd8460d2a07dbc83084af5db3487756a739f4837621a53a2c5561480ac1c50e2f883baa745114c9383526f7938d464fd28c999a3c",
            "file": "projects/ngleaf/src/components/common/imageUpload/imageUpload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CUSTOM_VALUE_ACCESSOR"
                }
            ],
            "selector": "leaf-image-upload",
            "styleUrls": [
                "./imageUpload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./imageUpload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selectedFile",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentFileUpload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileList",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { LeafUploadFileService } from '../../../services/index';\r\n\r\nconst CUSTOM_VALUE_ACCESSOR: any = {\r\n  provide : NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ImageUploadComponent),\r\n  multi : true,\r\n};\r\n\r\n@Component({\r\n  selector: 'leaf-image-upload',\r\n  templateUrl: './imageUpload.component.html',\r\n  styleUrls: ['./imageUpload.component.scss'],\r\n  providers : [CUSTOM_VALUE_ACCESSOR],\r\n})\r\nexport class ImageUploadComponent implements OnInit, ControlValueAccessor {\r\n  selectedFiles: FileList;\r\n  currentFileUpload: File;\r\n  public imageUrl: string;\r\n\r\n  @Output()\r\n  selectedFile: EventEmitter<any> = new EventEmitter();\r\n\r\n  // Form control field\r\n  private onChange = (_: any) => {};\r\n  private onTouched = () => {};\r\n\r\n  constructor(private uploadService: LeafUploadFileService) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  writeValue(obj: any): void {\r\n    this.imageUrl = obj;\r\n  }\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n  setDisabledState?(isDisabled: boolean): void {}\r\n\r\n  public selectFile(event) {\r\n    this.selectedFiles = event.target.files;\r\n    this.upload();\r\n  }\r\n\r\n  public upload() {\r\n    this.currentFileUpload = this.selectedFiles.item(0);\r\n    this.uploadService\r\n      .pushFileToStorage(this.currentFileUpload)\r\n      .subscribe(imageUrl => {\r\n        this.imageUrl = imageUrl;\r\n        this.onChange(this.imageUrl);\r\n        this.selectedFile.emit(this.imageUrl);\r\n      });\r\n\r\n    this.onTouched();\r\n    this.selectedFiles = undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".image-upload-wrap {\r\n  width: calc(100% - 8px);\r\n  height: calc(100% - 8px);\r\n  border: 4px dashed #1fb264;\r\n  position: relative;\r\n}\r\n\r\n.image-upload-wrap:hover {\r\n  background-color: #1fb264;\r\n  border: 4px dashed #ffffff;\r\n}\r\n\r\n.drag-text {\r\n  text-align: center;\r\n  height: calc(100% - 0.5em);\r\n  width: calc(100% - 0.5em);\r\n  padding: 0.25em;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  h3 {\r\n    flex: 1;\r\n    font-weight: 100;\r\n    text-transform: uppercase;\r\n    color: #15824b;\r\n  }\r\n}\r\n\r\n.file-upload-image {\r\n  max-height: calc(100% - 0.5em);\r\n  max-width: calc(100% - 0.5em);\r\n  margin: auto;\r\n  padding: 0.25em;\r\n}\r\n\r\n.file-upload-input {\r\n  position: absolute;\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  outline: none;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n}\r\n",
                    "styleUrl": "./imageUpload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "uploadService",
                        "type": "LeafUploadFileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "uploadService",
                        "type": "LeafUploadFileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"image-upload-wrap\">\r\n  <input class=\"file-upload-input\" type='file' (change)=\"selectFile($event);\" accept=\"image/*\"/>\r\n  <div class=\"drag-text\" *ngIf=\"!imageUrl\">\r\n    <h3>Drag and drop a file or select add Image</h3>\r\n  </div>\r\n  <img class=\"file-upload-image\" *ngIf=\"imageUrl\" [src]=\"imageUrl\" alt=\"Your image\"/>\r\n</div>\r\n"
        },
        {
            "name": "LeafLoginVanillaComponent",
            "id": "component-LeafLoginVanillaComponent-fc927492dfe1749b8f585d75e0ac1cd90195a1cedb70bef8988ee25ab20255e74e8fd298c5e4c25015fca4cf6c0afcad84959e80f4996b8d4134058843a8e53c",
            "file": "projects/ngleaf/src/components/vanilla/leaf-login-vanilla/leaf-login-vanilla.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-login-vanilla",
            "styleUrls": [
                "./leaf-login-vanilla.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./leaf-login-vanilla.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enablePasswordCheck",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loginValidators",
                    "defaultValue": "[Validators.required]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "ValidatorFn[]",
                    "decorators": []
                },
                {
                    "name": "passwordCheckClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "LeafLoginPasswordCheckClasses",
                    "decorators": []
                },
                {
                    "name": "passwordValidators",
                    "defaultValue": "[Validators.required]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "ValidatorFn[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onError",
                    "defaultValue": "new EventEmitter<LeafLoginVanillaError>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<LeafLoginVanillaError>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { emitNotification} from '../../../store/index';\r\n\r\nimport { LeafSessionService } from '../../../services/index';\r\nimport { Store } from '@ngrx/store';\r\n\r\nexport type LeafLoginVanillaError = {\r\n  login: ValidationErrors,\r\n  password: ValidationErrors\r\n};\r\n\r\nexport type LeafLoginPasswordCheckClasses = {\r\n  show: string[],\r\n  hide: string[]\r\n};\r\n\r\n@Component({\r\n  selector: 'leaf-login-vanilla',\r\n  templateUrl: './leaf-login-vanilla.component.html',\r\n  styleUrls: ['./leaf-login-vanilla.component.scss'],\r\n})\r\nexport class LeafLoginVanillaComponent implements OnInit {\r\n  @Input()\r\n  public enablePasswordCheck: boolean = false;\r\n  @Input()\r\n  public passwordCheckClasses?: LeafLoginPasswordCheckClasses;\r\n  @Input()\r\n  public loginValidators: ValidatorFn[] = [Validators.required];\r\n  @Input()\r\n  public passwordValidators: ValidatorFn[] = [Validators.required];\r\n\r\n  @Output()\r\n  public onError: EventEmitter<LeafLoginVanillaError> = new EventEmitter<LeafLoginVanillaError>();\r\n\r\n  public loginForm: FormGroup;\r\n\r\n  public showPassword: boolean = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private sessionService: LeafSessionService,\r\n    private store: Store\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      login: ['', this.loginValidators],\r\n      password: ['', this.passwordValidators],\r\n    });\r\n  }\r\n\r\n  login() {\r\n    if (this.loginForm.valid) {\r\n      const { login, password } = this.loginForm.getRawValue();\r\n      this.store.dispatch(emitNotification(null));\r\n      this.sessionService.login(login, password);\r\n    } else {\r\n      this.onError.emit({\r\n        login: this.loginForm.controls.login.errors,\r\n        password: this.loginForm.controls.password.errors,\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .field-wrapper {\r\n      display: flex;\r\n      flex-direction: row;\r\n\r\n      .field  {\r\n        flex: auto;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./leaf-login-vanilla.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"loginForm\" (keypressed.enter)=\"login()\">\n\n  <div class=\"field-wrapper login-wrapper\">\n    <input class=\"field login\" formControlName=\"login\" [attr.placeholder]=\"'leaf.login.vanilla.loginPlaceholder' | translate\" />\n  </div>\n\n  <div class=\"field-wrapper login-wrapper\">\n    <input class=\"field password\" [type]=\"showPassword ? 'text' : 'password'\" formControlName=\"password\" [attr.placeholder]=\"'leaf.login.vanilla.passwordPlaceholder' | translate\">\n    <div\n      *ngIf=\"enablePasswordCheck && passwordCheckClasses && showPassword\"\n      class=\"hide-icon\"\n      (click)=\"showPassword = false\">\n      <i [ngClass]=\"passwordCheckClasses.hide\"></i>\n    </div>\n    <div\n      *ngIf=\"enablePasswordCheck && passwordCheckClasses && !showPassword\"\n      class=\"show-icon\"\n      (click)=\"showPassword = true\">\n      <i [ngClass]=\"passwordCheckClasses.show\"></i>\n    </div>\n  </div>\n\n  <button class=\"login-button\" (click)=\"login()\">{{ 'leaf.login.vanilla.buttonLabel' | translate }}</button>\n</form>\n"
        },
        {
            "name": "LeafPasswordForgottenVanillaComponent",
            "id": "component-LeafPasswordForgottenVanillaComponent-f8af04d2b9650dcac0e1426dbba95b73b6948268dce715d37611a996c3de867f5ddf55be3b72371cb040f29f3f1c495fb2d4aff9391ed431ecf435f44ee60a3d",
            "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-password-forgotten-vanilla",
            "styleUrls": [
                "./leaf-password-forgotten-vanilla.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./leaf-password-forgotten-vanilla.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "emailValidators",
                    "defaultValue": "[Validators.required]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "ValidatorFn[]",
                    "decorators": []
                },
                {
                    "name": "passwordChangeKeyValidators",
                    "defaultValue": "[Validators.required]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "ValidatorFn[]",
                    "decorators": []
                },
                {
                    "name": "passwordValidators",
                    "defaultValue": "[Validators.required]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "ValidatorFn[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDone",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onError",
                    "defaultValue": "new EventEmitter<LeafPasswordForgottenVanillaError>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter<LeafPasswordForgottenVanillaError>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "emailToResendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "passwordChangeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sendPasswordChangeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "'SendPassword'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafPasswordForgottenVanillaState",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendEmail",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sendPasswordChangeKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { filter, map, take } from 'rxjs';\r\n\r\nimport { LeafNotificationService, LeafSessionService } from '../../../services/index';\r\nimport { AsyncType, emitNotification, selectResetPassword, selectSendResetPasswordKey } from '../../../store/index';\r\n\r\nexport type LeafPasswordForgottenVanillaState = 'SendPassword' | 'PasswordChange';\r\n\r\nexport type LeafPasswordForgottenVanilla_SendPasswordChangeError = {\r\n  email: ValidationErrors\r\n};\r\n\r\nexport type LeafPasswordForgottenVanilla_PasswordChangeError = {\r\n  passwordChangeKey: ValidationErrors,\r\n  password: ValidationErrors\r\n};\r\n\r\nexport type LeafPasswordForgottenVanillaError = {\r\n  state: LeafPasswordForgottenVanillaState\r\n} & (LeafPasswordForgottenVanilla_SendPasswordChangeError | LeafPasswordForgottenVanilla_PasswordChangeError);\r\n\r\n@Component({\r\n  selector: 'leaf-password-forgotten-vanilla',\r\n  templateUrl: './leaf-password-forgotten-vanilla.component.html',\r\n  styleUrls: ['./leaf-password-forgotten-vanilla.component.scss']\r\n})\r\nexport class LeafPasswordForgottenVanillaComponent implements OnInit {\r\n  @Input()\r\n  public emailValidators: ValidatorFn[] = [Validators.required];\r\n  @Input()\r\n  public passwordChangeKeyValidators: ValidatorFn[] = [Validators.required];\r\n  @Input()\r\n  public passwordValidators: ValidatorFn[] = [Validators.required];\r\n\r\n  @Output()\r\n  public onError: EventEmitter<LeafPasswordForgottenVanillaError> = new EventEmitter<LeafPasswordForgottenVanillaError>();\r\n  @Output()\r\n  public onDone: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  public state: LeafPasswordForgottenVanillaState = 'SendPassword';\r\n  public sendPasswordChangeForm: FormGroup;\r\n  public passwordChangeForm: FormGroup;\r\n  public emailToResendTo?: string;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private leafSessionService: LeafSessionService,\r\n    private notificationService: LeafNotificationService,\r\n    private route: ActivatedRoute,\r\n    private store: Store) { }\r\n\r\n  ngOnInit() {\r\n    this.sendPasswordChangeForm = this.formBuilder.group({\r\n      email: ['', this.emailValidators],\r\n    });\r\n    this.passwordChangeForm = this.formBuilder.group({\r\n      passwordChangeKey: ['', this.passwordChangeKeyValidators],\r\n      password: ['', this.passwordValidators],\r\n      passwordValidation: ['', this.passwordValidators],\r\n    });\r\n    this.route.queryParams\r\n      .pipe(\r\n        take(1),\r\n        map(params => params.passwordChangeKey),\r\n        filter(passwordChangeKey => !!passwordChangeKey)\r\n      )\r\n      .subscribe(passwordChangeKey => {\r\n        this.state = 'PasswordChange';\r\n        this.passwordChangeForm.controls.passwordChangeKey.setValue(passwordChangeKey);\r\n      }\r\n    );\r\n  }\r\n\r\n  public sendPasswordChangeKey() {\r\n    if (this.sendPasswordChangeForm.valid) {\r\n      this.store.dispatch(emitNotification(null));\r\n      this.emailToResendTo = this.sendPasswordChangeForm.getRawValue().email;\r\n      this.sendEmail();\r\n    } else {\r\n      this.onError.emit({\r\n        state: this.state,\r\n        email: this.sendPasswordChangeForm.controls.email.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  public changePassword() {\r\n    if (this.passwordChangeForm.valid) {\r\n      const {\r\n        passwordChangeKey,\r\n        password,\r\n        passwordValidation,\r\n      } = this.passwordChangeForm.getRawValue();\r\n      if (password === passwordValidation) {\r\n        this.leafSessionService.resetPassword(passwordChangeKey, password);\r\n\r\n        this.store.pipe(\r\n          select(selectResetPassword),\r\n          filter<AsyncType<void>>((resetPassword) => !resetPassword.status.pending),\r\n          map((resetPassword) => resetPassword.status.success),\r\n          take(1)\r\n        ).subscribe((success) => {\r\n          if (success) {\r\n            this.onDone.emit();\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.onError.emit({\r\n        state: this.state,\r\n        passwordChangeKey: this.sendPasswordChangeForm.controls.passwordChangeKey.errors,\r\n        password: this.sendPasswordChangeForm.controls.password.errors\r\n      });\r\n    }\r\n  }\r\n\r\n  public resendEmail(event) {\r\n    event.preventDefault();\r\n    this.sendPasswordChangeKey();\r\n  }\r\n\r\n  public sendEmail() {\r\n    this.leafSessionService.sendResetPasswordKey(this.emailToResendTo);\r\n\r\n    this.store.pipe(\r\n      select(selectSendResetPasswordKey),\r\n      filter<AsyncType<void>>((sendResetPasswordKey) => !sendResetPasswordKey.status.pending),\r\n      map((sendResetPasswordKey) => sendResetPasswordKey.status.success),\r\n      take(1)\r\n    ).subscribe((success) => {\r\n      if (success) {\r\n        this.state = 'PasswordChange';\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n}\r\n",
                    "styleUrl": "./leaf-password-forgotten-vanilla.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leafSessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "LeafNotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leafSessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "LeafNotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"sendPasswordChangeForm\" *ngIf=\"state === 'SendPassword'\" (keypressed.enter)=\"sendPasswordChangeKey()\">\n  <p class=\"password-change-key-disclaimer\">{{ 'leaf.password-forgotten.vanilla.passwordChangeKeyDisclaimerLabel' | translate }}</p>\n  <input class=\"email\" formControlName=\"email\" [attr.placeholder]=\"'leaf.password-forgotten.vanilla.emailPlaceholder' | translate\" />\n  <button class=\"send-password-button\" (click)=\"sendPasswordChangeKey()\">{{ 'leaf.password-forgotten.vanilla.sendPasswordChangeKeyButtonLabel' | translate }}</button>\n</form>\n<form [formGroup]=\"passwordChangeForm\" (keypressed.enter)=\"changePassword()\"  *ngIf=\"state === 'PasswordChange'\">\n  <input class=\"password-change-key\" formControlName=\"passwordChangeKey\" [attr.placeholder]=\"'leaf.password-forgotten.vanilla.passwordChangeKeyPlaceholder' | translate\" />\n  <input class=\"password\" type=\"password\" formControlName=\"password\" [attr.placeholder]=\"'leaf.password-forgotten.vanilla.passwordPlaceholder' | translate\" />\n  <input class=\"passwordValidation\" type=\"password\" formControlName=\"passwordValidation\" [attr.placeholder]=\"'leaf.password-forgotten.vanilla.passwordValidationPlaceholder' | translate\" />\n  <button class=\"password-change-button\" (click)=\"changePassword()\">{{ 'leaf.password-forgotten.vanilla.changePasswordButtonLabel' | translate }}</button>\n  <a class=\"password-change-resend-link\" href (click)=\"resendEmail($event)\" *ngIf=\"emailToResendTo\">\n    {{ 'leaf.password-forgotten.vanilla.resendLinkLabel' | translate }}\n  </a>\n</form>\n"
        },
        {
            "name": "LeafRegisterVanillaComponent",
            "id": "component-LeafRegisterVanillaComponent-a8f8eb5027652752b3b6b5acb7759810a6d6f66274a6eaaff1752f04cf0e62132814feaba5dc57068d9c130e3075d4d21183b00352bab8dacc304fcf21a2821a",
            "file": "projects/ngleaf/src/components/vanilla/leaf-register-vanilla/leaf-register-vanilla.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-register-vanilla",
            "styleUrls": [
                "./leaf-register-vanilla.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./leaf-register-vanilla.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enablePasswordCheck",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loginValidators",
                    "defaultValue": "[Validators.required]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "ValidatorFn[]",
                    "decorators": []
                },
                {
                    "name": "passwordCheckClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "LeafRegisterPasswordCheckClasses",
                    "decorators": []
                },
                {
                    "name": "passwordValidators",
                    "defaultValue": "[Validators.required]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "ValidatorFn[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onError",
                    "defaultValue": "new EventEmitter<LeafRegisterVanillaError>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter<LeafRegisterVanillaError>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerHasError",
                    "args": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { emitNotification } from '../../../store/index';\r\n\r\nimport { LeafSessionService } from '../../../services/index';\r\n\r\nexport type LeafRegisterVanillaError = {\r\n  login: ValidationErrors,\r\n  password: ValidationErrors,\r\n  passwordValidation: ValidationErrors\r\n};\r\n\r\nexport type LeafRegisterPasswordCheckClasses = {\r\n  show: string[],\r\n  hide: string[]\r\n};\r\n\r\n@Component({\r\n  selector: 'leaf-register-vanilla',\r\n  templateUrl: './leaf-register-vanilla.component.html',\r\n  styleUrls: ['./leaf-register-vanilla.component.scss']\r\n})\r\nexport class LeafRegisterVanillaComponent implements OnInit {\r\n  @Input()\r\n  public enablePasswordCheck: boolean = false;\r\n  @Input()\r\n  public passwordCheckClasses?: LeafRegisterPasswordCheckClasses;\r\n  @Input()\r\n  public loginValidators: ValidatorFn[] = [Validators.required];\r\n  @Input()\r\n  public passwordValidators: ValidatorFn[] = [Validators.required];\r\n\r\n  @Output()\r\n  public onError: EventEmitter<LeafRegisterVanillaError> = new EventEmitter<LeafRegisterVanillaError>();\r\n\r\n  public registerForm: FormGroup;\r\n\r\n  public showPassword: boolean = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private leafSessionService: LeafSessionService,\r\n    private store: Store\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      login: ['', this.loginValidators],\r\n      password: ['', this.passwordValidators],\r\n      passwordValidation: ['', this.passwordValidators],\r\n    });\r\n  }\r\n\r\n  registerHasError(inputName: string): boolean {\r\n    const inputToControl = this.registerForm.get(inputName);\r\n    return (\r\n      inputToControl &&\r\n      inputToControl.getError('required') &&\r\n      (inputToControl.dirty && inputToControl.touched)\r\n    );\r\n  }\r\n\r\n  register(event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    if (this.registerForm.valid) {\r\n      const {\r\n        login,\r\n        password,\r\n        passwordValidation,\r\n      } = this.registerForm.getRawValue();\r\n      if (password === passwordValidation) {\r\n        this.store.dispatch(emitNotification(null));\r\n        this.leafSessionService.register(login, password);\r\n      } else {\r\n        this.onError.emit({\r\n          login: this.registerForm.controls.login.errors,\r\n          password: {\r\n            ...this.registerForm.controls.password.errors,\r\n            identical: true\r\n          },\r\n          passwordValidation: this.registerForm.controls.passwordValidation.errors\r\n        });\r\n      }\r\n    } else {\r\n      this.onError.emit({\r\n        login: this.registerForm.controls.login.errors,\r\n        password: this.registerForm.controls.password.errors,\r\n        passwordValidation: this.registerForm.controls.passwordValidation.errors\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .field-wrapper {\r\n      display: flex;\r\n      flex-direction: row;\r\n\r\n      .field  {\r\n        flex: auto;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./leaf-register-vanilla.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leafSessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leafSessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"registerForm\" (keypressed.enter)=\"register($event)\">\n  <div class=\"field-wrapper login-wrapper\">\n    <input class=\"field login\" formControlName=\"login\" [attr.placeholder]=\"'leaf.register.vanilla.loginPlaceholder' | translate\" />\n  </div>\n  <div class=\"field-wrapper login-wrapper\">\n    <input class=\"field password\" [type]=\"showPassword ? 'text' : 'password'\" formControlName=\"password\" [attr.placeholder]=\"'leaf.register.vanilla.passwordPlaceholder' | translate\" />\n    <div\n      *ngIf=\"enablePasswordCheck && passwordCheckClasses && showPassword\"\n      class=\"hide-icon\"\n      (click)=\"showPassword = false\">\n      <i [ngClass]=\"passwordCheckClasses.hide\"></i>\n    </div>\n    <div\n      *ngIf=\"enablePasswordCheck && passwordCheckClasses && !showPassword\"\n      class=\"show-icon\"\n      (click)=\"showPassword = true\">\n      <i [ngClass]=\"passwordCheckClasses.show\"></i>\n    </div>\n  </div>\n  <div class=\"field-wrapper login-wrapper\">\n    <input class=\"field passwordValidation\" [type]=\"showPassword ? 'text' : 'password'\" formControlName=\"passwordValidation\" [attr.placeholder]=\"'leaf.register.vanilla.passwordValidationPlaceholder' | translate\" />\n    <div\n      *ngIf=\"enablePasswordCheck && passwordCheckClasses && showPassword\"\n      class=\"hide-icon\"\n      (click)=\"showPassword = false\">\n      <i [ngClass]=\"passwordCheckClasses.hide\"></i>\n    </div>\n    <div\n      *ngIf=\"enablePasswordCheck && passwordCheckClasses && !showPassword\"\n      class=\"show-icon\"\n      (click)=\"showPassword = true\">\n      <i [ngClass]=\"passwordCheckClasses.show\"></i>\n    </div>\n  </div>\n  <button (click)=\"register($event)\">{{ 'leaf.register.vanilla.buttonLabel' | translate }}</button>\n</form>\n"
        },
        {
            "name": "LeafWebImagesSeekerDialogComponent",
            "id": "component-LeafWebImagesSeekerDialogComponent-ec9bdf507dcc24627cdebb3047432ef7df40819d701019274ebbc1908d03d9569ddf8c39c3744ab237739d28209205e7811c7b88e4a89bc4d13ebeb1fab7187e",
            "file": "projects/ngleaf/src/services/web-images-seeker/web-images-seeker-dialog/leaf-web-images-seeker-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./leaf-web-images-seeker-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./leaf-web-images-seeker-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Data",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<LeafWebImagesSeekerDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputFormControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "results$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedImageIndex",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectImage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { LeafWebImagesSeekerService } from '../leaf-web-images-seeker.service';\r\n\r\ninterface Data {\r\n  prefill: string;\r\n}\r\n\r\n@Component({\r\n  templateUrl: './leaf-web-images-seeker-dialog.component.html',\r\n  styleUrls: ['./leaf-web-images-seeker-dialog.component.scss']\r\n})\r\nexport class LeafWebImagesSeekerDialogComponent {\r\n\r\n  public results$: Observable<string[]>;\r\n  public selectedImageIndex = -1;\r\n  public inputFormControl: FormControl = new FormControl('');\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LeafWebImagesSeekerDialogComponent>,\r\n    private leafWebImagesSeekerService: LeafWebImagesSeekerService,\r\n    @Inject(MAT_DIALOG_DATA) public data: Data\r\n  ) {\r\n    this.inputFormControl.valueChanges.subscribe(\r\n      (searchValue) => {\r\n        this.results$ = this.leafWebImagesSeekerService.searchImages(searchValue);\r\n      }\r\n    );\r\n\r\n    this.inputFormControl.setValue(data.prefill);\r\n  }\r\n\r\n  selectImage(index: number) {\r\n    this.selectedImageIndex = this.selectedImageIndex === index ? -1 : index;\r\n  }\r\n\r\n  validate(): void {\r\n    this.results$.pipe(take(1)).subscribe(results => {\r\n      this.dialogRef.close(results[this.selectedImageIndex]);\r\n    });\r\n  }\r\n\r\n  cancel(): void {\r\n    this.dialogRef.close(undefined);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full-width {\r\n    width: 100%;\r\n}\r\n\r\n.image-picker {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    .image-selection {\r\n        margin: 4px;\r\n        padding: 4px;\r\n        width: calc(25% - 20px);\r\n        height: 75px;\r\n        cursor: pointer;\r\n\r\n        &.selected {\r\n            background-color: lightgreen;\r\n        }\r\n\r\n        &:hover {\r\n            background-color: lightgray;\r\n        }\r\n\r\n        img {\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n    }\r\n}\r\n  ",
                    "styleUrl": "./leaf-web-images-seeker-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LeafWebImagesSeekerDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leafWebImagesSeekerService",
                        "type": "LeafWebImagesSeekerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LeafWebImagesSeekerDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leafWebImagesSeekerService",
                        "type": "LeafWebImagesSeekerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-form-field class=\"full-width\" mat-dialog-title>\r\n    <mat-label>What are you searching ?</mat-label>\r\n    <input matInput type=\"text\" [formControl]=\"inputFormControl\" />\r\n    <button\r\n      mat-button\r\n      *ngIf=\"inputFormControl.value\"\r\n      matSuffix\r\n      mat-icon-button\r\n      (click)=\"inputFormControl.setValue('')\"\r\n    >\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </mat-form-field>\r\n  <div mat-dialog-content>\r\n    <div class=\"image-picker\">\r\n      <div\r\n        class=\"image-selection\"\r\n        [ngClass]=\"{'selected': index === selectedImageIndex}\"\r\n        *ngFor=\"let result of (results$ | async); let index = index\"\r\n        (click)=\"selectImage(index)\"\r\n      >\r\n        <img [src]=\"result\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div mat-dialog-actions>\r\n    <button mat-button (click)=\"cancel()\">No Thanks</button>\r\n    <button mat-button (click)=\"validate()\" [disabled]=\"selectedImageIndex === -1\">\r\n      Pick this image\r\n    </button>\r\n  </div>\r\n  "
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-78aaae6dbebc0f00a4e185f9c93468ccf168ab307e985c694004807fcaf20d79a464563e0f5f874568b6b0bc5853e69613158a93ff74eb2749e5a046e76221ec",
            "file": "projects/ngleaf/src/components/common/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { LeafSessionService } from '../../../services/index';\r\n\r\n@Component({\r\n  selector: 'leaf-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public loginForm: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private sessionService: LeafSessionService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', Validators.required],\r\n      password: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  login() {\r\n    if (this.loginForm.valid) {\r\n      const { email, password } = this.loginForm.getRawValue();\r\n      this.sessionService.login(email, password);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  .form {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"form\" [formGroup]=\"loginForm\" (keypressed.enter)=\"login()\">\r\n  <mat-form-field color=\"primary\" appearance=\"outline\">\r\n    <mat-label>Login</mat-label>\r\n    <input matInput id=\"loginEmail\" value=\"\" formControlName=\"email\">\r\n  </mat-form-field>\r\n\r\n  <mat-form-field color=\"primary\" appearance=\"outline\">\r\n    <mat-label>Password</mat-label>\r\n    <input matInput id=\"loginPassword\" type=\"password\" value=\"\" formControlName=\"password\">\r\n  </mat-form-field>\r\n  <button class=\"login-button\" mat-stroked-button (click)=\"login()\" color=\"primary\">LOG IN</button>\r\n</form>\r\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-1853b6213596601bc0f269ef3fa5adb62fe4c710cdd448dc3db22e9f50ca4a1d1806456618b3d71a19fde75cc5c22f5d3598fcbcc1e5557a5d25fcbc0cfb0220",
            "file": "projects/ngleaf/src/components/pages/login/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'leaf-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.scss'],\r\n})\r\nexport class LoginPageComponent {\r\n\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-card {\r\n    top: 8em;\r\n    margin: auto;\r\n    width: 35em;\r\n}",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<mat-card class=\"login-card\">\r\n  <h2>Login</h2>\r\n  <mat-divider></mat-divider>\r\n  <leaf-login></leaf-login>\r\n</mat-card>\r\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-b639032a8d9a43c023000dd1b6e4a1160fdca8761355c27e393190708298f0f212e0a348d2b671e9b42a93782b87c80336823dd44dc84e56cd5155f1e780df00",
            "file": "projects/ngleaf/src/components/templates/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "NavigationItem[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef } from '@angular/core';\r\n\r\nexport interface NavigationItem {\r\n  link: string;\r\n  label: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'leaf-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.scss']\r\n})\r\nexport class NavigationComponent {\r\n\r\n  @Input() headerTemplate: TemplateRef<any>;\r\n  @Input() contentTemplate: TemplateRef<any>;\r\n\r\n  @Input() links: NavigationItem[];\r\n  @Input() title = 'app';\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidenav-container {\r\n  height: 100%;\r\n}\r\n\r\n.sidenav {\r\n  width: 200px;\r\n}\r\n\r\n.sidenav .mat-toolbar {\r\n  background: inherit;\r\n}\r\n\r\n.mat-toolbar.mat-primary {\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1;\r\n}\r\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "templateData": "<mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav #sidenav class=\"sidenav\" fixedInViewport=\"true\">\r\n    <mat-toolbar>Menu</mat-toolbar>\r\n    <mat-nav-list>\r\n      <a mat-list-item [routerLink]=\"link.link\" routerLinkActive=\"active-link\" *ngFor=\"let link of links\"> {{ link.label }} </a>\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content>\r\n    <mat-toolbar color=\"primary\">\r\n      <button mat-icon-button (click)=\"sidenav.toggle()\"><mat-icon aria-label=\"Menu\">menu</mat-icon></button>\r\n      <span>{{title}}</span>\r\n      <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n    </mat-toolbar>\r\n    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n    <!-- Add Content Here -->\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PasswordUpdateComponent",
            "id": "component-PasswordUpdateComponent-6fca4f5d1cf36c12adc9c40ee474e89059198a1a81715f33474e123a964f7157b066a0d50970a2222e3b9d02eeb47fd5a95c4e32d064bf35d9f990f5299a17d6",
            "file": "projects/ngleaf/src/components/common/password-update/password-update.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-password-update",
            "styleUrls": [
                "./password-update.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password-update.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "changePasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formBuilder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sessionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafSessionService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { distinctUntilChanged } from 'rxjs';\nimport { LeafSessionService } from '../../../services/index';\n\n@Component({\n  selector: 'leaf-password-update',\n  templateUrl: './password-update.component.html',\n  styleUrls: ['./password-update.component.scss']\n})\nexport class PasswordUpdateComponent {\n  public changePasswordForm: FormGroup;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    public sessionService: LeafSessionService\n  ) {\n    this.changePasswordForm = this.formBuilder.group({\n      oldPassword: ['', Validators.required],\n      newPassword: ['', Validators.required],\n      newPasswordValidation: ['', Validators.required],\n    });\n    this.changePasswordForm.controls.newPassword.valueChanges.pipe(distinctUntilChanged()).subscribe(\n      () => {\n        this.changePasswordForm.controls.newPassword.setErrors({'different': undefined});\n        this.changePasswordForm.controls.newPassword.updateValueAndValidity();\n      }\n    );\n    this.changePasswordForm.controls.newPasswordValidation.valueChanges.pipe(distinctUntilChanged()).subscribe(\n      () => {\n        this.changePasswordForm.controls.newPasswordValidation.setErrors({'different': undefined});\n        this.changePasswordForm.controls.newPasswordValidation.updateValueAndValidity();\n      }\n    );\n  }\n\n  public changePassword() {\n    if (this.changePasswordForm.valid) {\n      const {\n        oldPassword,\n        newPassword,\n        newPasswordValidation,\n      } = this.changePasswordForm.getRawValue();\n      if (newPassword === newPasswordValidation) {\n        this.sessionService.changePassword(oldPassword, newPassword);\n      } else {\n        this.changePasswordForm.controls.newPassword.setErrors({'different': true});\n        this.changePasswordForm.controls.newPasswordValidation.setErrors({'different': true});\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".password-update {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n",
                    "styleUrl": "./password-update.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form class=\"password-update\" [formGroup]=\"changePasswordForm\">\r\n  <mat-form-field>\r\n    <input\r\n      matInput\r\n      type=\"password\"\r\n      id=\"oldPassword\"\r\n      [placeholder]=\"'leaf.update-password.currentPasswordPlaceholder' | translate\"\r\n      formControlName=\"oldPassword\">\r\n      <mat-error *ngIf=\"changePasswordForm.controls.oldPassword?.errors?.required\">\r\n        {{ 'leaf.update-password.requiredError' | translate }}\r\n      </mat-error>\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <input\r\n      matInput\r\n      type=\"password\"\r\n      id=\"newPassword\"\r\n      [placeholder]=\"'leaf.update-password.newPassword' | translate\"\r\n      formControlName=\"newPassword\">\r\n      <mat-error *ngIf=\"changePasswordForm.controls.newPassword?.errors?.required\">\r\n        {{ 'leaf.update-password.requiredError' | translate }}\r\n      </mat-error>\r\n      <mat-error *ngIf=\"changePasswordForm.controls.newPassword?.errors?.different\">\r\n        {{ 'leaf.update-password.differentPasswordError' | translate }}\r\n      </mat-error>\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <input\r\n      matInput\r\n      type=\"password\"\r\n      id=\"newPasswordValidation\"\r\n      [placeholder]=\"'leaf.update-password.newPasswordVerify' | translate\"\r\n      formControlName=\"newPasswordValidation\">\r\n      <mat-error *ngIf=\"changePasswordForm.controls.newPasswordValidation?.errors?.required\">\r\n        {{ 'leaf.update-password.requiredError' | translate }}\r\n      </mat-error>\r\n      <mat-error *ngIf=\"changePasswordForm.controls.newPasswordValidation?.errors?.different\">\r\n        {{ 'leaf.update-password.differentPasswordError' | translate }}\r\n      </mat-error>\r\n  </mat-form-field>\r\n  <button\r\n    mat-button\r\n    [disabled]=\"changePasswordForm.invalid\"\r\n    (click)=\"changePassword()\">{{ 'leaf.update-password.buttonLabel' | translate }}</button>\r\n</form>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-2221c4e5d5d7a26316cdfb957ab50cb97e272f53a870cf04e406de5be30e2d848274b10b538aedc6815cefca92230bef6160b60f510186866e2af68026ef83ba",
            "file": "projects/ngleaf/src/components/common/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerHasError",
                    "args": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { LeafSessionService } from '../../../services/index';\r\n\r\n@Component({\r\n  selector: 'leaf-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss'],\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public registerForm: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private leafSessionService: LeafSessionService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: ['', Validators.required],\r\n      password: ['', Validators.required],\r\n      passwordValidation: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  registerHasError(inputName: string): boolean {\r\n    const inputToControl = this.registerForm.get(inputName);\r\n    return (\r\n      inputToControl &&\r\n      inputToControl.getError('required') &&\r\n      (inputToControl.dirty && inputToControl.touched)\r\n    );\r\n  }\r\n\r\n  register(event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    if (this.registerForm.valid) {\r\n      const {\r\n        email,\r\n        password,\r\n        passwordValidation,\r\n      } = this.registerForm.getRawValue();\r\n      if (password === passwordValidation) {\r\n        this.leafSessionService.register(email, password);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  .mat-card-title {\r\n    font-size: 1.3em;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .form {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    * {\r\n      outline: none;\r\n    }\r\n\r\n    :before,\r\n    :after {\r\n      content: '';\r\n    }\r\n  }\r\n\r\n  label {\r\n    padding-right: 5px;\r\n  }\r\n\r\n  .input-container {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n  }\r\n\r\n  .register-popup {\r\n    width: 100%;\r\n    text-align: center;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n    background-color: rgba(white, 0.3);\r\n\r\n    .register-popup-head {\r\n      width: 80%;\r\n      padding: 1em;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n\r\n      .avatar {\r\n        border: solid 1px grey;\r\n        border-radius: 50%;\r\n        height: 80px;\r\n        width: 80px;\r\n      }\r\n\r\n      .login {\r\n        font-weight: bolder;\r\n        font-size: 120%;\r\n      }\r\n    }\r\n\r\n    .register-popup-menu {\r\n      background-color: rgba(0, 0, 0, 0.9);\r\n      padding: 1em;\r\n      height: 300px;\r\n\r\n      button {\r\n        background-color: #f5f5f5;\r\n        margin: 0.25em;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leafSessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leafSessionService",
                        "type": "LeafSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"form\" [formGroup]=\"registerForm\" (keyup.enter)=\"register($event)\">\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Email or login</mat-label>\r\n    <input matInput id=\"email\" value=\"\" formControlName=\"email\">\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Password</mat-label>\r\n    <input matInput id=\"password\" type=\"password\" value=\"\" formControlName=\"password\">\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Repeat Password</mat-label>\r\n    <input matInput id=\"passwordValidation\" type=\"password\" value=\"\" formControlName=\"passwordValidation\">\r\n  </mat-form-field>\r\n  <button mat-stroked-button (click)=\"register($event)\">REGISTER</button>\r\n</form>\r\n"
        },
        {
            "name": "RegisterPageComponent",
            "id": "component-RegisterPageComponent-f129c10fa40b294496689264d96e2b296411e066e9ae24d4dd2420bdf0be7838d9ac2460dd052cc6aa53fa8aa7bb19611864e420ac8db8a3ab60817686c1c608",
            "file": "projects/ngleaf/src/components/pages/register/register-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-register-page",
            "styleUrls": [
                "./register-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'leaf-register-page',\r\n  templateUrl: './register-page.component.html',\r\n  styleUrls: ['./register-page.component.scss'],\r\n})\r\nexport class RegisterPageComponent {\r\n\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".register-card {\r\n    top: 8em;\r\n    margin: auto;\r\n    width: 35em;\r\n}",
                    "styleUrl": "./register-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<mat-card class=\"register-card\">\r\n  <h2>Register</h2>\r\n  <mat-divider></mat-divider>\r\n  <leaf-register></leaf-register>\r\n</mat-card>"
        },
        {
            "name": "StatisticsPageComponent",
            "id": "component-StatisticsPageComponent-f27f814a54d69b5e5334f5172d43a9aae55bc3ce09469cfb87eef698db55685365f03fd49f8dfa766ae4d13af8c79f16542dffe9fac8fd351603b54ef6bfd209",
            "file": "projects/ngleaf/src/components/pages/statistics-page/statistics-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-statistics-page",
            "styleUrls": [
                "./statistics-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statistics-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { StatisticsService } from '../../../services/index';\n\n@Component({\n  selector: 'leaf-statistics-page',\n  templateUrl: './statistics-page.component.html',\n  styleUrls: ['./statistics-page.component.scss']\n})\nexport class StatisticsPageComponent implements OnInit {\n\n  constructor(private statisticsService: StatisticsService) { }\n\n  ngOnInit() {\n    this.statisticsService.fetchStatistics();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.viewer {\r\n  flex: 1;\r\n}\r\n",
                    "styleUrl": "./statistics-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statisticsService",
                        "type": "StatisticsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "statisticsService",
                        "type": "StatisticsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Statistics Demo</h1>\n\n<leaf-statistics-viewer\n  class=\"viewer\"\n  key='accountsCount'\n  ></leaf-statistics-viewer>\n"
        },
        {
            "name": "StatisticsViewerComponent",
            "id": "component-StatisticsViewerComponent-ca01aaae0c342dad1392d75578d0fc2409a5031b6b39293e95c693f2ec4cdde2413be3ef97a237c4a7d505eccc00ce60b6c57d66d932ea076cbfe512fb447067",
            "file": "projects/ngleaf/src/components/common/statistics-viewer/statistics-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "leaf-statistics-viewer",
            "styleUrls": [
                "./statistics-viewer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statistics-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "series$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ChartSerie[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dateToString",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { filter, map, Observable } from 'rxjs';\nimport { selectStatisticsData } from '../../../store/index';\nimport { LeafStatistic } from '../../../api/models/index';\nimport { ChartSerie } from './chart.model';\n\n@Component({\n  selector: 'leaf-statistics-viewer',\n  templateUrl: './statistics-viewer.component.html',\n  styleUrls: ['./statistics-viewer.component.scss']\n})\nexport class StatisticsViewerComponent {\n\n  @Input()\n  public key: string;\n\n  public series$: Observable<ChartSerie[]>;\n\n  constructor(private store: Store) {\n    this.series$ = this.store.pipe(\n      select(selectStatisticsData),\n      filter((statistics: LeafStatistic[]) => !!statistics),\n      map((statistics: LeafStatistic[]) => statistics.map(\n        (statistic: LeafStatistic) => ({\n          date: statistic.creationDateTime,\n          data: statistic.data[this.key]\n        })\n      )),\n      map((data: {date: Date, data: number}[]) => [{\n        name: this.key,\n        series: data.map((dat) => ({\n          name: this.dateToString(dat.date),\n          value: dat.data\n        }))\n      }])\n    );\n  }\n\n  private dateToString(date: Date) {\n    return date.toString();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./statistics-viewer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ngx-charts-line-chart\n    [xAxis]=\"false\"\n    [yAxis]=\"true\"\n    [results]=\"series$ | async\">\n</ngx-charts-line-chart>\n"
        },
        {
            "name": "TemplatesComponent",
            "id": "component-TemplatesComponent-69b75081c3d679a880ea090a8c18a440cce3c898a4d6cce60269bdca90098b857152747d36dcf0703947b08f27c1cc51c2e93b2fd470aa8220110724294792c2",
            "file": "src/app/templates/templates.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-templates",
            "styleUrls": [
                "./templates.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./templates.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "genericFormConfig",
                    "defaultValue": "{\r\n    titleKey: 'formName',\r\n    grid: {\r\n      cols: 2,\r\n      gutterSize: '10px',\r\n      rowHeight: '75px'\r\n    },\r\n    actions: [{\r\n      id: 'cancel',\r\n      labelKey: 'cancelLabel'\r\n    },\r\n    {\r\n      id: 'submit',\r\n      labelKey: 'submitLabel',\r\n      color: 'primary'\r\n    }],\r\n    inputs: [\r\n      {\r\n        id: 'input1',\r\n        type: 'input',\r\n        labelKey: 'input1Label',\r\n        placeholderKey: 'input1Placeholder',\r\n        colspan: 2\r\n      },\r\n      {\r\n        id: 'input2',\r\n        type: 'input',\r\n        labelKey: 'input2Label',\r\n        placeholderKey: 'input2Placeholder'\r\n      },\r\n      {\r\n        id: 'input3',\r\n        type: 'textarea',\r\n        labelKey: 'input3Label',\r\n        placeholderKey: 'input3Placeholder',\r\n        rowspan: 2\r\n      },\r\n      {\r\n        id: 'radios',\r\n        type: 'radios',\r\n        radios: [\r\n        {\r\n          labelKey: 'radio1',\r\n          value: 'radio1'\r\n        },\r\n        {\r\n          labelKey: 'radio2',\r\n          value: 'radio2'\r\n        }\r\n        ]\r\n      },\r\n      {\r\n        id: 'checkbox1',\r\n        type: 'checkbox',\r\n        labelKey: 'checkbox1',\r\n      },\r\n      {\r\n        type: 'text',\r\n        labelKey: 'someVeryLongTextThatDeserveLotOfSpacesomeVeryLongTextThatDeserveLotOfSpacesomeVeryLongTextThatDeserveLotOfSpacesomeVeryLongTextThatDeserveLotOfSpace',\r\n        colspan: 2\r\n      },\r\n      {\r\n        id: 'slider1',\r\n        type: 'slider',\r\n        colspan: 2,\r\n        color: 'primary',\r\n        min: 15,\r\n        max: 150,\r\n        step: 10,\r\n        thumbLabel: true\r\n      }\r\n    ]\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormConfig",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "genericFormFormGroup",
                    "defaultValue": "this.fb.group({\r\n    input1: ['input1'],\r\n    input2: ['input2'],\r\n    input3: ['input3'],\r\n    radios: ['radio2'],\r\n    checkbox1: [true],\r\n    slider1: ['75']\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "passwordCheckClasses",
                    "defaultValue": "{show: ['show-class'], hide: ['hide-class']}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "onDone",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { LeafWebImagesSeekerDialogComponent, GenericFormConfig } from '@input-output-labs/ngleaf';\r\n\r\n@Component({\r\n  selector: 'app-templates',\r\n  templateUrl: './templates.component.html',\r\n  styleUrls: ['./templates.component.css'],\r\n})\r\nexport class TemplatesComponent {\r\n  public passwordCheckClasses = {show: ['show-class'], hide: ['hide-class']};\r\n  selectedImageUrl: string;\r\n  name: string;\r\n\r\n  public genericFormFormGroup: FormGroup = this.fb.group({\r\n    input1: ['input1'],\r\n    input2: ['input2'],\r\n    input3: ['input3'],\r\n    radios: ['radio2'],\r\n    checkbox1: [true],\r\n    slider1: ['75']\r\n  });\r\n\r\n  constructor(private dialog: MatDialog, private fb: FormBuilder) {\r\n    this.genericFormFormGroup.valueChanges.subscribe(console.log);\r\n  }\r\n\r\n  openDialog(): void {\r\n    this.dialog.open(LeafWebImagesSeekerDialogComponent, {\r\n      width: '450px',\r\n      data: { prefill: this.name }\r\n    }).afterClosed().subscribe(result => {\r\n      console.log('you picked: ', result);\r\n      this.selectedImageUrl = result;\r\n    });\r\n  }\r\n\r\n  onDone() {\r\n    console.log('password forgotten done');\r\n  }\r\n\r\n  public genericFormConfig: GenericFormConfig = {\r\n    titleKey: 'formName',\r\n    grid: {\r\n      cols: 2,\r\n      gutterSize: '10px',\r\n      rowHeight: '75px'\r\n    },\r\n    actions: [{\r\n      id: 'cancel',\r\n      labelKey: 'cancelLabel'\r\n    },\r\n    {\r\n      id: 'submit',\r\n      labelKey: 'submitLabel',\r\n      color: 'primary'\r\n    }],\r\n    inputs: [\r\n      {\r\n        id: 'input1',\r\n        type: 'input',\r\n        labelKey: 'input1Label',\r\n        placeholderKey: 'input1Placeholder',\r\n        colspan: 2\r\n      },\r\n      {\r\n        id: 'input2',\r\n        type: 'input',\r\n        labelKey: 'input2Label',\r\n        placeholderKey: 'input2Placeholder'\r\n      },\r\n      {\r\n        id: 'input3',\r\n        type: 'textarea',\r\n        labelKey: 'input3Label',\r\n        placeholderKey: 'input3Placeholder',\r\n        rowspan: 2\r\n      },\r\n      {\r\n        id: 'radios',\r\n        type: 'radios',\r\n        radios: [\r\n        {\r\n          labelKey: 'radio1',\r\n          value: 'radio1'\r\n        },\r\n        {\r\n          labelKey: 'radio2',\r\n          value: 'radio2'\r\n        }\r\n        ]\r\n      },\r\n      {\r\n        id: 'checkbox1',\r\n        type: 'checkbox',\r\n        labelKey: 'checkbox1',\r\n      },\r\n      {\r\n        type: 'text',\r\n        labelKey: 'someVeryLongTextThatDeserveLotOfSpacesomeVeryLongTextThatDeserveLotOfSpacesomeVeryLongTextThatDeserveLotOfSpacesomeVeryLongTextThatDeserveLotOfSpace',\r\n        colspan: 2\r\n      },\r\n      {\r\n        id: 'slider1',\r\n        type: 'slider',\r\n        colspan: 2,\r\n        color: 'primary',\r\n        min: 15,\r\n        max: 150,\r\n        step: 10,\r\n        thumbLabel: true\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tmp-container {\r\n  margin-left: 15em;\r\n}\r\n\r\n.divider-space {\r\n  margin-top: 1em;\r\n  margin-bottom: 1em;\r\n}\r\n\r\n/deep/ .show-class {\r\n  background-color: green;\r\n  width: 21px;\r\n}\r\n\r\n/deep/ .hide-class {\r\n  background-color: red;\r\n  width: 21px;\r\n}\r\n",
                    "styleUrl": "./templates.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>Templates</h1>\r\n<h2>Web image seeker</h2>\r\n<ol>\r\n    <li>\r\n      <mat-form-field>\r\n        <input matInput [(ngModel)]=\"name\" placeholder=\"Search Prefill\" />\r\n      </mat-form-field>\r\n    </li>\r\n    <li>\r\n      <button mat-raised-button (click)=\"openDialog()\">Pick one</button>\r\n    </li>\r\n    <li *ngIf=\"selectedImageUrl\">\r\n      You chose:<br />\r\n      <img *ngIf=\"selectedImageUrl\" [src]=\"selectedImageUrl\" />\r\n    </li>\r\n  </ol>\r\n<mat-divider></mat-divider>\r\n\r\n<h2>Login component</h2>\r\n\r\n<leaf-login-vanilla [enablePasswordCheck]=\"true\" [passwordCheckClasses]=\"passwordCheckClasses\"></leaf-login-vanilla>\r\n\r\n<h2>Register component</h2>\r\n\r\n<leaf-register-vanilla [enablePasswordCheck]=\"true\" [passwordCheckClasses]=\"passwordCheckClasses\"></leaf-register-vanilla>\r\n\r\n<h2>Password forgotten component</h2>\r\n\r\n<leaf-password-forgotten-vanilla (onDone)=\"onDone()\"></leaf-password-forgotten-vanilla>\r\n\r\n<div *leafAdaptiveView=\"'only-mobile'\">\r\n  ONLY MOBILE\r\n</div>\r\n<div *leafAdaptiveView=\"'only-tablet'\">\r\n  ONLY TABLET\r\n</div>\r\n<div *leafAdaptiveView=\"'only-desktop'\">\r\n  ONLY DESKTOP\r\n</div>\r\n<div *leafAdaptiveView=\"'except-mobile'\">\r\n  EXCEPT MOBILE\r\n</div>\r\n<div *leafAdaptiveView=\"'except-tablet'\">\r\n  EXCEPT TABLET\r\n</div>\r\n<div *leafAdaptiveView=\"'except-desktop'\">\r\n  EXCEPT DESKTOP\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<leaf-generic-form\r\n  [config]=\"genericFormConfig\"\r\n  [formGroup]=\"genericFormFormGroup\"></leaf-generic-form>\r\n"
        },
        {
            "name": "UserSelectorComponent",
            "id": "component-UserSelectorComponent-865e3a23767482403002c2447cdf6e4269b0b96d4dc1280a0ca47cfb9fd67da5428fe0005913fac126d5d5a1e7051c7caf93146da7a9deb8b3ed9d11594e8045",
            "file": "projects/ngleaf/src/components/common/user-selector/user-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => UserSelectorComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "leaf-user-selector",
            "styleUrls": [
                "./user-selector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "defaultValue": "'Username'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputControler",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "proposedUsers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LeafUserModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "displayProperty",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { startWith, switchMap } from 'rxjs/operators';\r\n\r\nimport { LeafUserModel } from '../../../api/models/index';\r\nimport { UserAutocompleteService } from './user-autocomplete.service';\r\n\r\n@Component({\r\n  selector: 'leaf-user-selector',\r\n  templateUrl: './user-selector.component.html',\r\n  styleUrls: ['./user-selector.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => UserSelectorComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class UserSelectorComponent implements OnInit, ControlValueAccessor {\r\n  public inputControler = new FormControl();\r\n  public proposedUsers: Observable<LeafUserModel[]>;\r\n  public disabled: boolean;\r\n\r\n  @Input()\r\n  public placeholder = 'Username';\r\n\r\n  constructor(private userAutocomplete: UserAutocompleteService) {}\r\n\r\n  ngOnInit() {\r\n    this.inputControler.valueChanges.subscribe(\r\n      value => this.onChanged(typeof value === 'object' && 'id' in value ? value : null)\r\n    );\r\n    this.proposedUsers = this.inputControler.valueChanges.pipe(\r\n      startWith(''),\r\n      switchMap(\r\n        (inputValue) => inputValue.length >= 2 ? this.userAutocomplete.autocomplete(inputValue) : of([])\r\n      )\r\n    );\r\n  }\r\n\r\n  public displayProperty(value) {\r\n    if (value) {\r\n      return value.username;\r\n    }\r\n  }\r\n\r\n  onChanged: any = () => {};\r\n  onTouched: any = () => {};\r\n\r\n  writeValue(val) {\r\n    this.inputControler.setValue(val, {emitEvent: false});\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChanged = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full-width {\r\n    width: 100%;\r\n}",
                    "styleUrl": "./user-selector.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userAutocomplete",
                        "type": "UserAutocompleteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "userAutocomplete",
                        "type": "UserAutocompleteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<form>\r\n  <mat-form-field class=\"full-width\">\r\n    <input type=\"text\"\r\n           [placeholder]=\"placeholder\"\r\n           matInput\r\n           [disabled]=\"disabled\"\r\n           [formControl]=\"inputControler\"\r\n           [matAutocomplete]=\"auto\">\r\n    <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\" [displayWith]=\"displayProperty\">\r\n      <mat-option *ngFor=\"let user of proposedUsers | async\" [value]=\"user\">\r\n        {{user.username}}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>"
        }
    ],
    "modules": [
        {
            "name": "AccountApiClientModule",
            "id": "module-AccountApiClientModule-9f269d014da8c970cb8c9e53f0e094236547d900689a80dc2b8db107e78730e7002c1f8da4e8e3ae4a54829e8e220634d1e2cc1e1e629be131574518107b0de6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/api/clients/session-api-client/account-api-client.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { AccountApiClient } from './account-api-client.service';\r\n\r\n@NgModule({\r\n    providers: [AccountApiClient]\r\n})\r\nexport class AccountApiClientModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AccountApiClient"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdaptiveViewModule",
            "id": "module-AdaptiveViewModule-c5fe114ead724d41966b9e95752affec38843b2ed8be4bc64857429121ac5593fa6338e950313d8fd210d25e9128a98bb758d7c5fe65cd9c452d17a85221a8d9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/directives/adaptive-view/adaptive-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AdaptiveViewDirective } from './adaptive-view.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [AdaptiveViewDirective],\r\n  exports: [AdaptiveViewDirective]\r\n})\r\nexport class AdaptiveViewModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdaptiveViewDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AdaptiveViewDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-37a23b4d261a3eb08cbc350f103b1ca87ef731a115c26f714cb4a70417117b38b2eb005469c34f58f2c3891a5a14b1c93414b44685ac1031a3aa3067d79be199",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { AppRouteModule } from './app.route';\r\n\r\nimport { environment } from '../environments/environment';\r\nimport {\r\n  LeafConfig,\r\n  LeafAdminModule,\r\n  LeafComponentsModule,\r\n  LeafConfigServiceModule,\r\n  LeafNotificationModule,\r\n  LeafSessionModule,\r\n  LeafSessionService,\r\n  LeafUploadFileModule,\r\n  LeafWebImagesSeekerModule,\r\n  leafCoreStore,\r\n  LeafApiClientConfig,\r\n  LeafApiClientConfigServiceModule,\r\n  LeafLoginVanillaModule,\r\n  LeafRegisterVanillaModule,\r\n  LeafPasswordForgottenVanillaModule,\r\n  SessionEffects,\r\n  AdaptiveViewModule,\r\n  StatisticsEffects,\r\n  GenericFormModule,\r\n} from '@input-output-labs/ngleaf';\r\nimport { TemplatesComponent } from './templates/templates.component';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { EffectsModule } from '@ngrx/effects';\r\n\r\nconst leafConfig: LeafConfig = {\r\n  serverUrl: environment.serverUrl,\r\n  navigation: {\r\n    authGuardErrorRedirect: '/login',\r\n    adminGuardErrorRedirect: '/forbidden',\r\n    loginSuccessRedirect: '',\r\n    registerSuccessRedirect: ''\r\n  },\r\n  apis: {\r\n    pixabay_api_key: environment.API_KEY_PIXABAY\r\n  }\r\n};\r\n\r\nconst leafApiClientConfig: LeafApiClientConfig = {\r\n  serverUrl: environment.serverUrl\r\n};\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, TemplatesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    AppRouteModule,\r\n    /* Translation module */\r\n    TranslateModule.forRoot({\r\n      defaultLanguage: 'en',\r\n      loader: {\r\n          provide: TranslateLoader,\r\n          useFactory: HttpLoaderFactory,\r\n          deps: [HttpClient]\r\n      }\r\n    }),\r\n    /* Material design library import */\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatCommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDividerModule,\r\n    MatDialogModule,\r\n    /* Leaf library import */\r\n    LeafApiClientConfigServiceModule.forRoot(leafApiClientConfig),\r\n    EffectsModule.forRoot([SessionEffects, StatisticsEffects]),\r\n    LeafConfigServiceModule.forRoot(leafConfig),\r\n    LeafComponentsModule,\r\n    LeafAdminModule,\r\n    LeafNotificationModule,\r\n    LeafSessionModule,\r\n    LeafWebImagesSeekerModule,\r\n    LeafUploadFileModule,\r\n    LeafLoginVanillaModule,\r\n    LeafRegisterVanillaModule,\r\n    LeafPasswordForgottenVanillaModule,\r\n    AdaptiveViewModule,\r\n    GenericFormModule,\r\n    StoreModule.forRoot(\r\n      {\r\n        ...leafCoreStore\r\n      }\r\n    ),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 25, // Retains last 25 states\r\n      logOnly: environment.production, // Restrict extension to log-only mode\r\n    })\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {\r\n  constructor(leafSession: LeafSessionService, translate: TranslateService) {\r\n    translate.setDefaultLang('en');\r\n    translate.use('en');\r\n\r\n    leafSession.init();\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "TemplatesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdaptiveViewModule"
                        },
                        {
                            "name": "AppRouteModule"
                        },
                        {
                            "name": "GenericFormModule"
                        },
                        {
                            "name": "LeafAdminModule"
                        },
                        {
                            "name": "LeafApiClientConfigServiceModule"
                        },
                        {
                            "name": "LeafConfigServiceModule"
                        },
                        {
                            "name": "LeafLoginVanillaModule"
                        },
                        {
                            "name": "LeafNotificationModule"
                        },
                        {
                            "name": "LeafPasswordForgottenVanillaModule"
                        },
                        {
                            "name": "LeafRegisterVanillaModule"
                        },
                        {
                            "name": "LeafSessionModule"
                        },
                        {
                            "name": "LeafUploadFileModule"
                        },
                        {
                            "name": "LeafWebImagesSeekerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRouteModule",
            "id": "module-AppRouteModule-966f63ef8e0fac6795ac4415a001345c39183d30a718bd1aefe925d5160d290e9b19ae513cacb159c46f4887479f6f9e84ab914c15d2a319c4f6b11d49569ae7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.route.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Route, RouterModule } from '@angular/router';\r\n\r\nimport {\r\n  LoginPageComponent,\r\n  RegisterPageComponent,\r\n  ForbiddenComponent,\r\n  accountSettingsPageRoutes,\r\n  adminSettingsPageRoutes,\r\n  LeafAdminGuardModule,\r\n  LeafAuthGuardModule,\r\n  StatisticsPageComponent,\r\n  StatisticsPageModule\r\n} from '@input-output-labs/ngleaf';\r\nimport { TemplatesComponent } from './templates/templates.component';\r\n\r\nconst routes: Route[] = [\r\n  {\r\n    path: '',\r\n    redirectTo: '/settings',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'templates',\r\n    component: TemplatesComponent,\r\n  },\r\n  {\r\n    path: 'statistics',\r\n    component: StatisticsPageComponent,\r\n  },\r\n  {\r\n    path: 'forbidden',\r\n    component: ForbiddenComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginPageComponent,\r\n  },\r\n  {\r\n    path: 'register',\r\n    component: RegisterPageComponent,\r\n  },\r\n  ...accountSettingsPageRoutes,\r\n  ...adminSettingsPageRoutes\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes),\r\n    LeafAdminGuardModule,\r\n    LeafAuthGuardModule,\r\n    StatisticsPageModule\r\n  ], // add { enableTracing: true } after routes in forRoot to debug the router\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRouteModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeafAdminGuardModule"
                        },
                        {
                            "name": "LeafAuthGuardModule"
                        },
                        {
                            "name": "StatisticsPageModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenericFormModule",
            "id": "module-GenericFormModule-733e89ad43d7488fe0a8689834af1438a0057e0fe53e49e48448019dd1b97d9b2d5c7006049ebcdeb85ae6264e2e68e432375db8b9985c1c03e24eda0434435f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/common/generic-form/generic-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GenericFormComponent } from './generic-form.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatSliderModule} from '@angular/material/slider';\n\n@NgModule({\n  imports: [\n    /* Common deps */\n    CommonModule,\n    TranslateModule,\n    ReactiveFormsModule,\n    /* Material deps */\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatGridListModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    MatSliderModule,\n  ],\n  declarations: [GenericFormComponent],\n  exports: [GenericFormComponent]\n})\nexport class GenericFormModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GenericFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GenericFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafAdminGuardModule",
            "id": "module-LeafAdminGuardModule-3511a5e3f8b185af5e042840762f93aa7dc2977b646dc76943cfe6f99c98f78ba429acd1d22486ed7dbf802866f79ccd15de44778b7875a3022b5f14d487c822",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/guards/admin/leaf-admin.guard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { LeafSessionModule } from '../../services/core/session/leaf-session.module';\r\nimport { LeafAdminGuardService } from './leaf-admin.guard';\r\n\r\n@NgModule({\r\n    imports: [LeafSessionModule],\r\n    providers: [LeafAdminGuardService]\r\n})\r\nexport class LeafAdminGuardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeafSessionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafAdminModule",
            "id": "module-LeafAdminModule-cc45979852a48fe39dcbeb14e67c0ab51fff35e3a5b9351fbfe63f21fb33f51604a40df469911f88c33c62f9a0de311493130ec914e3ab84713fd431d97f6ea4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/services/core/admin/leaf-admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { LeafAdminService } from './leaf-admin.service';\r\n\r\n@NgModule({\r\n    providers: [LeafAdminService]\r\n})\r\nexport class LeafAdminModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LeafAdminService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafApiClientConfigServiceModule",
            "id": "module-LeafApiClientConfigServiceModule-03616f33d9ab1c00ccc9902233f247e3090c3e23e9d73b425c0f6e420f1b55d5578473f5f8175c15c97ee5ab05ca09dda2b26b9001ca35f5ae158759f0a43ed4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/api/clients/api-client-config.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "LeafApiClientConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<LeafApiClientConfigServiceModule>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "LeafApiClientConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nexport interface LeafApiClientConfig {\r\n  serverUrl: string;\r\n}\r\n\r\n// Injection token\r\nexport const LeafApiClientConfigServiceToken = new InjectionToken<LeafApiClientConfig>('LEAF_API_CLIENT_CONFIG');\r\n\r\n@NgModule()\r\nexport class LeafApiClientConfigServiceModule {\r\n  static forRoot(config: LeafApiClientConfig): ModuleWithProviders<LeafApiClientConfigServiceModule> {\r\n    return {\r\n      ngModule: LeafApiClientConfigServiceModule,\r\n      providers: [\r\n        {\r\n          provide: LeafApiClientConfigServiceToken,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafAuthGuardModule",
            "id": "module-LeafAuthGuardModule-fbb1448088f253e4fcfc1635b89c03e515f7b88c2caab527820289dfaaa6399239516b3a8a52480e3fbb88264187723b221f1cf2bd31b1a4ea3ff55f960ef89b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/guards/auth/leaf-auth.guard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { LeafSessionModule } from '../../services/core/session/leaf-session.module';\r\nimport { LeafAuthGuardService } from './leaf-auth.guard';\r\n\r\n@NgModule({\r\n    imports: [LeafSessionModule],\r\n    providers: [LeafAuthGuardService]\r\n})\r\nexport class LeafAuthGuardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeafSessionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafAuthHttpClientModule",
            "id": "module-LeafAuthHttpClientModule-5a86a5af6b4fe7ff04ce3f97df7799f1e39ff639ebe904a940bf2392a58a8fc6e9ff002ec9b4b1c8f4939fb1fb6583f87e6e27a260caf0e91597f17a95ff2903",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { LeafAuthHttpClient } from './leaf-auth-http-client.service';\r\n\r\n@NgModule({\r\n    providers: [LeafAuthHttpClient]\r\n})\r\nexport class LeafAuthHttpClientModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LeafAuthHttpClient"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafComponentsModule",
            "id": "module-LeafComponentsModule-3cb2a6ab456dede10478cea05a8bfce01cdc6e74e22c45be3ad7f1c1bafb54d23d3935955ab74f1b8de773a22123ff977c1b88498d17f9a4ff855edae356678a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/leaf-components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatOptionModule, MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\n\r\nimport {\r\n  AccountPopoverContentComponent,\r\n  HeaderAccountComponent,\r\n  ImageUploadComponent,\r\n  LoginComponent,\r\n  RegisterComponent,\r\n  ConfirmDialogComponent,\r\n  UserSelectorModule,\r\n  PasswordUpdateModule\r\n} from './common/index';\r\n\r\nimport {\r\n  AccountSettingsAvatarComponent,\r\n  AccountSettingsAccessTokensComponent,\r\n  AccountSettingsGeneralComponent,\r\n  AccountSettingsPasswordComponent,\r\n  AccountSettingsPageComponent,\r\n  AdminSettingsAdministratorsComponent,\r\n  AdminSettingsWhitelistComponent,\r\n  AdminSettingsPageComponent,\r\n  AdminSettingsUsersComponent,\r\n  LoginPageComponent,\r\n  RegisterPageComponent,\r\n  ForbiddenComponent\r\n} from './pages/index';\r\n\r\nimport { NavigationComponent } from './templates/index';\r\n\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AccountPopoverContentComponent,\r\n    HeaderAccountComponent,\r\n    ImageUploadComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    AccountSettingsAvatarComponent,\r\n    AccountSettingsAccessTokensComponent,\r\n    AccountSettingsGeneralComponent,\r\n    AccountSettingsPasswordComponent,\r\n    AccountSettingsPageComponent,\r\n    AdminSettingsAdministratorsComponent,\r\n    AdminSettingsWhitelistComponent,\r\n    AdminSettingsPageComponent,\r\n    AdminSettingsUsersComponent,\r\n    LoginPageComponent,\r\n    RegisterPageComponent,\r\n    NavigationComponent,\r\n    ForbiddenComponent,\r\n    ConfirmDialogComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    DragDropModule,\r\n    /* Material Imports */\r\n    MatIconModule,\r\n    MatDividerModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatDividerModule,\r\n    MatMenuModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatOptionModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatPaginatorModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatTreeModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatDialogModule,\r\n    /* Leaf component modules*/\r\n    UserSelectorModule,\r\n    PasswordUpdateModule\r\n  ],\r\n  entryComponents: [ConfirmDialogComponent],\r\n  providers: [],\r\n  exports: [\r\n    AccountPopoverContentComponent,\r\n    HeaderAccountComponent,\r\n    ImageUploadComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    AccountSettingsPageComponent,\r\n    AdminSettingsPageComponent,\r\n    AccountSettingsAccessTokensComponent,\r\n    LoginPageComponent,\r\n    RegisterPageComponent,\r\n    NavigationComponent,\r\n    ForbiddenComponent,\r\n    ConfirmDialogComponent\r\n  ]\r\n})\r\nexport class LeafComponentsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountPopoverContentComponent"
                        },
                        {
                            "name": "AccountSettingsAccessTokensComponent"
                        },
                        {
                            "name": "AccountSettingsAvatarComponent"
                        },
                        {
                            "name": "AccountSettingsGeneralComponent"
                        },
                        {
                            "name": "AccountSettingsPageComponent"
                        },
                        {
                            "name": "AccountSettingsPasswordComponent"
                        },
                        {
                            "name": "AdminSettingsAdministratorsComponent"
                        },
                        {
                            "name": "AdminSettingsPageComponent"
                        },
                        {
                            "name": "AdminSettingsUsersComponent"
                        },
                        {
                            "name": "AdminSettingsWhitelistComponent"
                        },
                        {
                            "name": "ConfirmDialogComponent"
                        },
                        {
                            "name": "ForbiddenComponent"
                        },
                        {
                            "name": "HeaderAccountComponent"
                        },
                        {
                            "name": "ImageUploadComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "RegisterPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PasswordUpdateModule"
                        },
                        {
                            "name": "UserSelectorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountPopoverContentComponent"
                        },
                        {
                            "name": "AccountSettingsAccessTokensComponent"
                        },
                        {
                            "name": "AccountSettingsPageComponent"
                        },
                        {
                            "name": "AdminSettingsPageComponent"
                        },
                        {
                            "name": "ConfirmDialogComponent"
                        },
                        {
                            "name": "ForbiddenComponent"
                        },
                        {
                            "name": "HeaderAccountComponent"
                        },
                        {
                            "name": "ImageUploadComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "RegisterPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafConfigServiceModule",
            "id": "module-LeafConfigServiceModule-51a505a5da585ffd0f7453792d08bca6c3257c28ca66d24168738d205673b578f1e91c72abd3c0a974f5979bb8ae0d3044c0403eeb08325428788f41de2476b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/services/leaf-config.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "LeafConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<LeafConfigServiceModule>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "LeafConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { LeafConfig } from '../models/index';\r\n\r\n// Injection token\r\nexport const LeafConfigServiceToken = new InjectionToken<LeafConfig>('LEAF_CONFIG');\r\n\r\n@NgModule()\r\nexport class LeafConfigServiceModule {\r\n  static forRoot(config: LeafConfig): ModuleWithProviders<LeafConfigServiceModule> {\r\n    return {\r\n      ngModule: LeafConfigServiceModule,\r\n      providers: [\r\n        {\r\n          provide: LeafConfigServiceToken,\r\n          useValue: config\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafLoginVanillaModule",
            "id": "module-LeafLoginVanillaModule-8ea14f7317ad92833655706e6575dca177e717fa8e3fb045cc14aea76a1ebab23c7b93a91ecfaeafaaa6f48d372528b70c880c874288b01eb650319a6f3a7a2e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/vanilla/leaf-login-vanilla/leaf-login-vanilla.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LeafLoginVanillaComponent } from './leaf-login-vanilla.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { LeafSessionModule } from '../../../services/index';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { StoreModule } from '@ngrx/store';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    LeafSessionModule,\r\n    TranslateModule,\r\n    StoreModule\r\n  ],\r\n  declarations: [LeafLoginVanillaComponent],\r\n  exports: [LeafLoginVanillaComponent]\r\n})\r\nexport class LeafLoginVanillaModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LeafLoginVanillaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeafSessionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LeafLoginVanillaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafNotificationModule",
            "id": "module-LeafNotificationModule-63dc479345de4c145a2e28d222ba16aa203c8f748ad18a6dca605559315ada225748fbd490be32733ddf38af36d740682afdc569a13ca5d588d6ce717f1ca36d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/services/core/notification/leaf-notification.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { LeafNotificationService } from './leaf-notification.service';\r\n\r\n@NgModule({\r\n    providers: [LeafNotificationService]\r\n})\r\nexport class LeafNotificationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LeafNotificationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafPasswordForgottenVanillaModule",
            "id": "module-LeafPasswordForgottenVanillaModule-9a0fcec286a44189149a595ac5422025a76fdeac2d02d761cd9ae221a9634e32a2b18022a87f0c317be12bd95895c4260fd581289c73dcc10cc8b71060321a73",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LeafPasswordForgottenVanillaComponent } from './leaf-password-forgotten-vanilla.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { StoreModule } from '@ngrx/store';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    TranslateModule,\r\n    ReactiveFormsModule,\r\n    StoreModule,\r\n  ],\r\n  declarations: [LeafPasswordForgottenVanillaComponent],\r\n  exports: [LeafPasswordForgottenVanillaComponent]\r\n})\r\nexport class LeafPasswordForgottenVanillaModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LeafPasswordForgottenVanillaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LeafPasswordForgottenVanillaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafRegisterVanillaModule",
            "id": "module-LeafRegisterVanillaModule-a52002e7ab7c9f40dda96b1752996c65ca612a679ecaeabacf753c2684aea8aafa196b00791d19d35bd6269ced63a438aae1b584a45fc35235aaa6d25e484dca",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/vanilla/leaf-register-vanilla/leaf-register-vanilla.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { LeafRegisterVanillaComponent } from './leaf-register-vanilla.component';\r\nimport { LeafSessionModule } from '../../../services/index';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { StoreModule } from '@ngrx/store';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    LeafSessionModule,\r\n    TranslateModule,\r\n    StoreModule\r\n  ],\r\n  declarations: [LeafRegisterVanillaComponent],\r\n  exports: [LeafRegisterVanillaComponent]\r\n})\r\nexport class LeafRegisterVanillaModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LeafRegisterVanillaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeafSessionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LeafRegisterVanillaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafSessionModule",
            "id": "module-LeafSessionModule-7877a47a06ab68adac7a4ccde8f705e8da9f5134fdff0393ed9515ca2fe5eea4939dae43b2d0646059214f9322f3de2fbc025a4e91b9a0bd80eb10b45cecf24b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/services/core/session/leaf-session.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { AccountApiClientModule } from '../../../api/clients/index';\r\nimport { LeafNotificationModule } from '../notification/leaf-notification.module';\r\nimport { LeafSessionService } from './leaf-session.service';\r\n\r\n@NgModule({\r\n    imports: [LeafNotificationModule, AccountApiClientModule],\r\n    providers: [LeafSessionService]\r\n})\r\nexport class LeafSessionModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LeafSessionService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountApiClientModule"
                        },
                        {
                            "name": "LeafNotificationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafUploadFileModule",
            "id": "module-LeafUploadFileModule-76dd186ae8de83673dda4d891fb8b8a2bf0b298e4292b2267beb8ae07c65b2f4313e1c1a74b942e4453265f709a2005452bc3f434c6a6be19375bc8d0a818531",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/services/files/leaf-upload-file.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { LeafNotificationModule } from '../core/notification/leaf-notification.module';\r\nimport { LeafUploadFileService } from './leaf-upload-file.service';\r\n\r\n@NgModule({\r\n    imports: [LeafNotificationModule],\r\n    providers: [LeafUploadFileService]\r\n})\r\nexport class LeafUploadFileModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LeafUploadFileService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeafNotificationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeafWebImagesSeekerModule",
            "id": "module-LeafWebImagesSeekerModule-6441ecfdaa3ebc44eebfa304bf2dab5840d3a4856be9b720f3b05801b52fa84b527563a1d7b399adc3cca710b947d9cc155750215c4099dc6ddc7b0c41e2f8d7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/services/web-images-seeker/leaf-web-images-seeker.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\nimport { LeafWebImagesSeekerService } from './leaf-web-images-seeker.service';\r\nimport { LeafWebImagesSeekerDialogComponent } from './web-images-seeker-dialog/leaf-web-images-seeker-dialog.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [LeafWebImagesSeekerDialogComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule\r\n  ],\r\n  providers: [LeafWebImagesSeekerService]\r\n})\r\nexport class LeafWebImagesSeekerModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LeafWebImagesSeekerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LeafWebImagesSeekerDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PasswordUpdateModule",
            "id": "module-PasswordUpdateModule-487944cf0fad8798fb2a7d93f26186559ad4a26bc0bf0ee0adbc78589613b321597a5251e5a15e7389c7a0bba2dcba35e4f9725f9a75adc26293fb9a80eb53df",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/common/password-update/password-update.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { PasswordUpdateComponent } from './password-update.component';\nimport { LeafSessionModule } from '../../../services/index';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    LeafSessionModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    TranslateModule,\n    MatIconModule\n  ],\n  declarations: [PasswordUpdateComponent],\n  exports: [PasswordUpdateComponent]\n})\nexport class PasswordUpdateModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PasswordUpdateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeafSessionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PasswordUpdateComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatisticsApiClientModule",
            "id": "module-StatisticsApiClientModule-99476d39175effd63f62fa6ac24e0f65ba6bcbdb4feb834b4f51431b3c396033efc20d3b973224f68d1dbc3833238ecd8a74b6e6c253b5c4a3eb4455f4cd22fb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/api/clients/statistics-api-client/statistics-api-client.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StatisticsApiClientService } from './statistics-api-client.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [StatisticsApiClientService]\n})\nexport class StatisticsApiClientModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "StatisticsApiClientService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatisticsModule",
            "id": "module-StatisticsModule-0a035262b0b4282af55ade45c00d3909384555ab38dce8946c734d96eacf250d1d2be9ff3eabb56ea8aa111fb76d831e8cb255f38bf8daec45064d6e8182a8a7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/services/core/statistics/statistics.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StatisticsApiClientModule } from '../../../api/clients/statistics-api-client/statistics-api-client.module';\nimport { StatisticsService } from './statistics.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StatisticsApiClientModule\n  ],\n  providers: [StatisticsService]\n})\nexport class StatisticsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "StatisticsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "StatisticsApiClientModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatisticsPageModule",
            "id": "module-StatisticsPageModule-6eb702f01820fcfad7c09facd4b1fb961ebfbd73d360e4b5dfe7831c994b6d4f7ace2edb360bbd635aa0382cc5e8f6aa9f0a4b1074c42224c851a1bfe5fec81e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/pages/statistics-page/statistics-page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StatisticsPageComponent } from './statistics-page.component';\nimport { StatisticsViewerModule } from '../../common/statistics-viewer/statistics-viewer.module';\nimport { StatisticsModule } from '../../../services/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StatisticsModule,\n    StatisticsViewerModule\n  ],\n  declarations: [StatisticsPageComponent]\n})\nexport class StatisticsPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StatisticsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "StatisticsModule"
                        },
                        {
                            "name": "StatisticsViewerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatisticsViewerModule",
            "id": "module-StatisticsViewerModule-c50cdd2d349873ac1459f77830767c2a3067c1ed1caf5364da05093c338dc3460ee5892485f3717a1df8f575c2bb4e8406eaa839b8d8218bda4ca6a5fe19d8b4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/common/statistics-viewer/statistics-viewer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StatisticsViewerComponent } from './statistics-viewer.component';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgxChartsModule\n  ],\n  declarations: [StatisticsViewerComponent],\n  exports: [StatisticsViewerComponent]\n})\nexport class StatisticsViewerModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StatisticsViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StatisticsViewerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserSelectorModule",
            "id": "module-UserSelectorModule-b677520c3b941eb889a5b0069f5683c6fb0ea9847bb22eea798a37899b42c90458fd08701f43166d5780ec05ad47a164716caf629deef58987441b55d940a9a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngleaf/src/components/common/user-selector/user-selector.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport { UserSelectorComponent } from './user-selector.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { UserAutocompleteService } from './user-autocomplete.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    /* Material */\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    MatFormFieldModule\r\n  ],\r\n  providers: [UserAutocompleteService],\r\n  declarations: [UserSelectorComponent],\r\n  exports: [UserSelectorComponent]\r\n})\r\nexport class UserSelectorModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UserAutocompleteService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UserSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "accountSettingsPageRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-page.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\r\n  {\r\n    path: 'settings',\r\n    canActivate: [LeafAuthGuardService],\r\n    component: AccountSettingsPageComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: '/settings/general',\r\n        pathMatch: 'full',\r\n      },\r\n      {\r\n        path: 'general',\r\n        component: AccountSettingsGeneralComponent,\r\n      },\r\n      {\r\n        path: 'avatar',\r\n        component: AccountSettingsAvatarComponent,\r\n      },\r\n      {\r\n        path: 'password',\r\n        component: AccountSettingsPasswordComponent,\r\n      },\r\n      {\r\n        path: 'accesstokens',\r\n        component: AccountSettingsAccessTokensComponent,\r\n      },\r\n    ],\r\n  },\r\n]"
            },
            {
                "name": "adminSettingsPageRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-page.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\r\n  {\r\n    path: 'admin',\r\n    canActivate: [LeafAdminGuardService, LeafAuthGuardService],\r\n    component: AdminSettingsPageComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: '/admin/users',\r\n        pathMatch: 'full',\r\n      },\r\n      {\r\n        path: 'users',\r\n        component: AdminSettingsUsersComponent,\r\n      },\r\n      {\r\n        path: 'administrators',\r\n        component: AdminSettingsAdministratorsComponent,\r\n      },\r\n      {\r\n        path: 'whitelist',\r\n        component: AdminSettingsWhitelistComponent,\r\n      }\r\n    ],\r\n  }\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CUSTOM_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/components/common/imageUpload/imageUpload.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  provide : NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ImageUploadComponent),\r\n  multi : true,\r\n}"
            },
            {
                "name": "emitNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/notification/notification.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Nofitication store] Emit notification',\r\n    props<{notification: LeafNotificationModel | null}>()\r\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  serverUrl: '/api',\r\n  API_KEY_PIXABAY: '21558043-ea93c1b6a6e88758325a9fcb2'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  serverUrl: 'http://localhost:8080/api',\r\n  // serverUrl: 'https://uat.rechargeplus.fr/api',\r\n  API_KEY_PIXABAY: '21558043-ea93c1b6a6e88758325a9fcb2'\r\n}"
            },
            {
                "name": "httpOptionsBase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/configs/http.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  })\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/administration/administration.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AdmininistrationState",
                "defaultValue": "{\r\n  authorizedEmails: [],\r\n  administrators: [],\r\n  users: []\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/notification/notification.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NotificationState",
                "defaultValue": "{\r\n    notifications: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SessionState",
                "defaultValue": "{\r\n    currentAccount: createEmptyAsyncType(),\r\n    sessionToken: createEmptyAsyncType(),\r\n    sendResetPasswordKey: createEmptyAsyncType(),\r\n    resetPassword: createEmptyAsyncType(),\r\n    updatePassword: createEmptyAsyncType()\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StatisticsState",
                "defaultValue": "{\r\n  statistics: createEmptyAsyncType(),\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "leafApiClientConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LeafApiClientConfig",
                "defaultValue": "{\r\n  serverUrl: environment.serverUrl\r\n}"
            },
            {
                "name": "LeafApiClientConfigServiceToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/api/clients/api-client-config.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<LeafApiClientConfig>('LEAF_API_CLIENT_CONFIG')"
            },
            {
                "name": "leafConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LeafConfig",
                "defaultValue": "{\r\n  serverUrl: environment.serverUrl,\r\n  navigation: {\r\n    authGuardErrorRedirect: '/login',\r\n    adminGuardErrorRedirect: '/forbidden',\r\n    loginSuccessRedirect: '',\r\n    registerSuccessRedirect: ''\r\n  },\r\n  apis: {\r\n    pixabay_api_key: environment.API_KEY_PIXABAY\r\n  }\r\n}"
            },
            {
                "name": "LeafConfigServiceToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/services/leaf-config.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<LeafConfig>('LEAF_CONFIG')"
            },
            {
                "name": "leafCoreStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/core.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    administration: administrationReducer,\r\n    notification: notificationReducer,\r\n    session: sessionReducer,\r\n    statistics: statisticsReducer\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\r\n  props: {},\r\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "resetCurrentAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Reset current account'\r\n)"
            },
            {
                "name": "resetResetPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Reset ResetPassword'\r\n)"
            },
            {
                "name": "resetSendResetPasswordKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Reset SendResetPasswordKey'\r\n)"
            },
            {
                "name": "resetSessionToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Reset session token'\r\n)"
            },
            {
                "name": "resetStatistics",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Statistics store] Reset statistics'\r\n)"
            },
            {
                "name": "resetUpdatePassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Reset UpdatePassword'\r\n)"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.route.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\r\n  {\r\n    path: '',\r\n    redirectTo: '/settings',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'templates',\r\n    component: TemplatesComponent,\r\n  },\r\n  {\r\n    path: 'statistics',\r\n    component: StatisticsPageComponent,\r\n  },\r\n  {\r\n    path: 'forbidden',\r\n    component: ForbiddenComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginPageComponent,\r\n  },\r\n  {\r\n    path: 'register',\r\n    component: RegisterPageComponent,\r\n  },\r\n  ...accountSettingsPageRoutes,\r\n  ...adminSettingsPageRoutes\r\n]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAdministrationSession",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AppState) => state.administration"
            },
            {
                "name": "selectAdministrators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAdministrationSession,\r\n (state: AdmininistrationState) => state.administrators\r\n)"
            },
            {
                "name": "selectAuthorizedEmails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAdministrationSession,\r\n  (state: AdmininistrationState) => state.authorizedEmails\r\n)"
            },
            {
                "name": "selectCurrentAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.currentAccount\r\n)"
            },
            {
                "name": "selectCurrentAccountData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCurrentAccount,\r\n  (currentAccount: AsyncType<LeafAccountModel>) => currentAccount.data\r\n)"
            },
            {
                "name": "selectIsPending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCurrentAccount,\r\n  selectSessionToken,\r\n  selectSendResetPasswordKey,\r\n  selectResetPassword,\r\n  selectUpdatePassword,\r\n (\r\n   currentAccount: AsyncType<LeafAccountModel>,\r\n   sessionToken: AsyncType<JWTModel>,\r\n   sendResetPasswordKey: AsyncType<void>,\r\n   resetPassword: AsyncType<void>,\r\n   updatePassword: AsyncType<LeafAccountModel>\r\n ) => currentAccount.status.pending || sessionToken.status.pending || sendResetPasswordKey.status.pending || resetPassword.status.pending || updatePassword.status.pending\r\n)"
            },
            {
                "name": "selectNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/notification/notification.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AppState) => state.notification"
            },
            {
                "name": "selectNotifications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/notification/notification.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectNotification,\r\n  (state: NotificationState) => state.notifications\r\n)"
            },
            {
                "name": "selectResetPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.resetPassword\r\n)"
            },
            {
                "name": "selectSendResetPasswordKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.sendResetPasswordKey\r\n)"
            },
            {
                "name": "selectSession",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AppState) => state.session"
            },
            {
                "name": "selectSessionState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectSession,\r\n (state: SessionState) => state\r\n)"
            },
            {
                "name": "selectSessionToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.sessionToken\r\n)"
            },
            {
                "name": "selectStatistics",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectStatisticsFromAppState,\r\n  (state: StatisticsState) => state.statistics\r\n)"
            },
            {
                "name": "selectStatisticsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectStatistics,\r\n  (statistics: AsyncType<LeafStatistic[]>) => statistics.data\r\n)"
            },
            {
                "name": "selectStatisticsFromAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AppState) => state.statistics"
            },
            {
                "name": "selectStatisticsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectStatisticsFromAppState,\r\n (state: StatisticsState) => state\r\n)"
            },
            {
                "name": "selectUpdatePassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.updatePassword\r\n)"
            },
            {
                "name": "selectUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAdministrationSession,\r\n (state: AdmininistrationState) => state.users\r\n)"
            },
            {
                "name": "setAdministrators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Administration store] Set administrators',\r\n    props<{administrators: string[]}>()\r\n)"
            },
            {
                "name": "setAuthorizedEmails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Administration store] Set authorized emails',\r\n    props<{authorizedEmails: LeafAuthorizedEmailModel[]}>()\r\n)"
            },
            {
                "name": "setCurrentAccountCall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set current account call',\r\n  props<{call: Observable<LeafAccountModel>}>()\r\n)"
            },
            {
                "name": "setCurrentAccountFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set current account failure',\r\n  props<{error: any}>()\r\n)"
            },
            {
                "name": "setCurrentAccountSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set current account success',\r\n  props<{data: LeafAccountModel}>()\r\n)"
            },
            {
                "name": "setResetPasswordCall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set ResetPassword call',\r\n  props<{call: Observable<void>}>()\r\n)"
            },
            {
                "name": "setResetPasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set ResetPassword failure',\r\n  props<{error: any}>()\r\n)"
            },
            {
                "name": "setResetPasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set ResetPassword success'\r\n)"
            },
            {
                "name": "setSendResetPasswordKeyCall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set SendResetPasswordKey call',\r\n  props<{call: Observable<void>}>()\r\n)"
            },
            {
                "name": "setSendResetPasswordKeyFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set SendResetPasswordKey failure',\r\n  props<{error: any}>()\r\n)"
            },
            {
                "name": "setSendResetPasswordKeySuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set SendResetPasswordKey success'\r\n)"
            },
            {
                "name": "setSessionToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set session token',\r\n  props<{sessionToken: JWTModel}>()\r\n)"
            },
            {
                "name": "setSessionTokenCall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set session token call',\r\n  props<{call: Observable<JWTModel>}>()\r\n)"
            },
            {
                "name": "setSessionTokenFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set session token failure',\r\n  props<{error: any}>()\r\n)"
            },
            {
                "name": "setSessionTokenSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set session token success',\r\n  props<{data: JWTModel}>()\r\n)"
            },
            {
                "name": "setStatisticsCall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Statistics store] Set statistics call',\r\n  props<{call: Observable<LeafStatistic[]>}>()\r\n)"
            },
            {
                "name": "setStatisticsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Statistics store] Set statistics failure',\r\n  props<{error: any}>()\r\n)"
            },
            {
                "name": "setStatisticsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Statistics store] Set statistics success',\r\n  props<{data: LeafStatistic[]}>()\r\n)"
            },
            {
                "name": "setUpdatePasswordCall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set UpdatePassword call',\r\n  props<{call: Observable<LeafAccountModel>}>()\r\n)"
            },
            {
                "name": "setUpdatePasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set UpdatePassword failure',\r\n  props<{error: any}>()\r\n)"
            },
            {
                "name": "setUpdatePasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Session store] Set UpdatePassword success',\r\n  props<{data: LeafAccountModel}>()\r\n)"
            },
            {
                "name": "setUsers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n    '[Administration store] Set users',\r\n    props<{users: LeafAccountModel[]}>()\r\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "administrationReducer",
                "file": "projects/ngleaf/src/store/core/administration/administration.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducerState",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "AdmininistrationState",
                "jsdoctags": [
                    {
                        "name": "reducerState",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "applicationHttpClientCreator",
                "file": "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "asyncTypeFailure",
                "file": "projects/ngleaf/src/store/common/async-type.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "asyncObject",
                        "type": "AsyncType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "error",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "asyncObject",
                        "type": "AsyncType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "error",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "asyncTypeSuccess",
                "file": "projects/ngleaf/src/store/common/async-type.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "asyncObject",
                        "type": "AsyncType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "asyncObject",
                        "type": "AsyncType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createAsyncTypeFromCall",
                "file": "projects/ngleaf/src/store/common/async-type.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "call",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "call",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createEmptyAsyncType",
                "file": "projects/ngleaf/src/store/common/async-type.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getModule",
                "file": "projects/ngleaf/src/helpers/accountHelper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "account",
                        "type": "LeafAccountModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "moduleName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any | undefined",
                "jsdoctags": [
                    {
                        "name": "account",
                        "type": "LeafAccountModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "moduleName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "notificationReducer",
                "file": "projects/ngleaf/src/store/core/notification/notification.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducerState",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "NotificationState",
                "jsdoctags": [
                    {
                        "name": "reducerState",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sessionReducer",
                "file": "projects/ngleaf/src/store/core/session/session.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducerState",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "SessionState",
                "jsdoctags": [
                    {
                        "name": "reducerState",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "statisticsReducer",
                "file": "projects/ngleaf/src/store/core/statistics/statistics.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducerState",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "StatisticsState",
                "jsdoctags": [
                    {
                        "name": "reducerState",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AdaptiveViewParameters",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"only-mobile\" | \"only-tablet\" | \"only-desktop\" | \"except-mobile\" | \"except-tablet\" | \"except-desktop\"",
                "file": "projects/ngleaf/src/directives/adaptive-view/adaptive-view.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "GenericFormInputConfig",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "GenericFormInputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"input\" | \"textarea\" | \"radios\" | \"checkbox\" | \"slider\"",
                "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "LeafLoginPasswordCheckClasses",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngleaf/src/components/vanilla/leaf-login-vanilla/leaf-login-vanilla.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "LeafLoginVanillaError",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngleaf/src/components/vanilla/leaf-login-vanilla/leaf-login-vanilla.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "LeafPasswordForgottenVanilla_PasswordChangeError",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "LeafPasswordForgottenVanilla_SendPasswordChangeError",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "LeafPasswordForgottenVanillaError",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "LeafPasswordForgottenVanillaState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"SendPassword\" | \"PasswordChange\"",
                "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "LeafRegisterPasswordCheckClasses",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngleaf/src/components/vanilla/leaf-register-vanilla/leaf-register-vanilla.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "LeafRegisterVanillaError",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngleaf/src/components/vanilla/leaf-register-vanilla/leaf-register-vanilla.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ngleaf/src/components/pages/account-settings-page/account-settings-page.route.ts": [
                {
                    "name": "accountSettingsPageRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-page.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\r\n  {\r\n    path: 'settings',\r\n    canActivate: [LeafAuthGuardService],\r\n    component: AccountSettingsPageComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: '/settings/general',\r\n        pathMatch: 'full',\r\n      },\r\n      {\r\n        path: 'general',\r\n        component: AccountSettingsGeneralComponent,\r\n      },\r\n      {\r\n        path: 'avatar',\r\n        component: AccountSettingsAvatarComponent,\r\n      },\r\n      {\r\n        path: 'password',\r\n        component: AccountSettingsPasswordComponent,\r\n      },\r\n      {\r\n        path: 'accesstokens',\r\n        component: AccountSettingsAccessTokensComponent,\r\n      },\r\n    ],\r\n  },\r\n]"
                }
            ],
            "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-page.route.ts": [
                {
                    "name": "adminSettingsPageRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-page.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\r\n  {\r\n    path: 'admin',\r\n    canActivate: [LeafAdminGuardService, LeafAuthGuardService],\r\n    component: AdminSettingsPageComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: '/admin/users',\r\n        pathMatch: 'full',\r\n      },\r\n      {\r\n        path: 'users',\r\n        component: AdminSettingsUsersComponent,\r\n      },\r\n      {\r\n        path: 'administrators',\r\n        component: AdminSettingsAdministratorsComponent,\r\n      },\r\n      {\r\n        path: 'whitelist',\r\n        component: AdminSettingsWhitelistComponent,\r\n      }\r\n    ],\r\n  }\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "projects/ngleaf/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "projects/ngleaf/src/components/common/imageUpload/imageUpload.component.ts": [
                {
                    "name": "CUSTOM_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/components/common/imageUpload/imageUpload.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  provide : NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ImageUploadComponent),\r\n  multi : true,\r\n}"
                }
            ],
            "projects/ngleaf/src/store/core/notification/notification.actions.ts": [
                {
                    "name": "emitNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/notification/notification.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Nofitication store] Emit notification',\r\n    props<{notification: LeafNotificationModel | null}>()\r\n)"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  serverUrl: '/api',\r\n  API_KEY_PIXABAY: '21558043-ea93c1b6a6e88758325a9fcb2'\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  serverUrl: 'http://localhost:8080/api',\r\n  // serverUrl: 'https://uat.rechargeplus.fr/api',\r\n  API_KEY_PIXABAY: '21558043-ea93c1b6a6e88758325a9fcb2'\r\n}"
                }
            ],
            "projects/ngleaf/src/configs/http.config.ts": [
                {
                    "name": "httpOptionsBase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/configs/http.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  })\r\n}"
                }
            ],
            "projects/ngleaf/src/store/core/administration/administration.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/administration/administration.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdmininistrationState",
                    "defaultValue": "{\r\n  authorizedEmails: [],\r\n  administrators: [],\r\n  users: []\r\n}"
                }
            ],
            "projects/ngleaf/src/store/core/notification/notification.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/notification/notification.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationState",
                    "defaultValue": "{\r\n    notifications: null\r\n}"
                }
            ],
            "projects/ngleaf/src/store/core/session/session.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SessionState",
                    "defaultValue": "{\r\n    currentAccount: createEmptyAsyncType(),\r\n    sessionToken: createEmptyAsyncType(),\r\n    sendResetPasswordKey: createEmptyAsyncType(),\r\n    resetPassword: createEmptyAsyncType(),\r\n    updatePassword: createEmptyAsyncType()\r\n}"
                }
            ],
            "projects/ngleaf/src/store/core/statistics/statistics.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatisticsState",
                    "defaultValue": "{\r\n  statistics: createEmptyAsyncType(),\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "leafApiClientConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafApiClientConfig",
                    "defaultValue": "{\r\n  serverUrl: environment.serverUrl\r\n}"
                },
                {
                    "name": "leafConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeafConfig",
                    "defaultValue": "{\r\n  serverUrl: environment.serverUrl,\r\n  navigation: {\r\n    authGuardErrorRedirect: '/login',\r\n    adminGuardErrorRedirect: '/forbidden',\r\n    loginSuccessRedirect: '',\r\n    registerSuccessRedirect: ''\r\n  },\r\n  apis: {\r\n    pixabay_api_key: environment.API_KEY_PIXABAY\r\n  }\r\n}"
                }
            ],
            "projects/ngleaf/src/api/clients/api-client-config.module.ts": [
                {
                    "name": "LeafApiClientConfigServiceToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/api/clients/api-client-config.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<LeafApiClientConfig>('LEAF_API_CLIENT_CONFIG')"
                }
            ],
            "projects/ngleaf/src/services/leaf-config.module.ts": [
                {
                    "name": "LeafConfigServiceToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/services/leaf-config.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<LeafConfig>('LEAF_CONFIG')"
                }
            ],
            "projects/ngleaf/src/store/core/core.store.ts": [
                {
                    "name": "leafCoreStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/core.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    administration: administrationReducer,\r\n    notification: notificationReducer,\r\n    session: sessionReducer,\r\n    statistics: statisticsReducer\r\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Login.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\r\n  props: {},\r\n})"
                }
            ],
            "projects/ngleaf/src/store/core/session/session.actions.ts": [
                {
                    "name": "resetCurrentAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Reset current account'\r\n)"
                },
                {
                    "name": "resetResetPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Reset ResetPassword'\r\n)"
                },
                {
                    "name": "resetSendResetPasswordKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Reset SendResetPasswordKey'\r\n)"
                },
                {
                    "name": "resetSessionToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Reset session token'\r\n)"
                },
                {
                    "name": "resetUpdatePassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Reset UpdatePassword'\r\n)"
                },
                {
                    "name": "setCurrentAccountCall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set current account call',\r\n  props<{call: Observable<LeafAccountModel>}>()\r\n)"
                },
                {
                    "name": "setCurrentAccountFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set current account failure',\r\n  props<{error: any}>()\r\n)"
                },
                {
                    "name": "setCurrentAccountSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set current account success',\r\n  props<{data: LeafAccountModel}>()\r\n)"
                },
                {
                    "name": "setResetPasswordCall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set ResetPassword call',\r\n  props<{call: Observable<void>}>()\r\n)"
                },
                {
                    "name": "setResetPasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set ResetPassword failure',\r\n  props<{error: any}>()\r\n)"
                },
                {
                    "name": "setResetPasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set ResetPassword success'\r\n)"
                },
                {
                    "name": "setSendResetPasswordKeyCall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set SendResetPasswordKey call',\r\n  props<{call: Observable<void>}>()\r\n)"
                },
                {
                    "name": "setSendResetPasswordKeyFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set SendResetPasswordKey failure',\r\n  props<{error: any}>()\r\n)"
                },
                {
                    "name": "setSendResetPasswordKeySuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set SendResetPasswordKey success'\r\n)"
                },
                {
                    "name": "setSessionToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set session token',\r\n  props<{sessionToken: JWTModel}>()\r\n)"
                },
                {
                    "name": "setSessionTokenCall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set session token call',\r\n  props<{call: Observable<JWTModel>}>()\r\n)"
                },
                {
                    "name": "setSessionTokenFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set session token failure',\r\n  props<{error: any}>()\r\n)"
                },
                {
                    "name": "setSessionTokenSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set session token success',\r\n  props<{data: JWTModel}>()\r\n)"
                },
                {
                    "name": "setUpdatePasswordCall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set UpdatePassword call',\r\n  props<{call: Observable<LeafAccountModel>}>()\r\n)"
                },
                {
                    "name": "setUpdatePasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set UpdatePassword failure',\r\n  props<{error: any}>()\r\n)"
                },
                {
                    "name": "setUpdatePasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Session store] Set UpdatePassword success',\r\n  props<{data: LeafAccountModel}>()\r\n)"
                }
            ],
            "projects/ngleaf/src/store/core/statistics/statistics.actions.ts": [
                {
                    "name": "resetStatistics",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Statistics store] Reset statistics'\r\n)"
                },
                {
                    "name": "setStatisticsCall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Statistics store] Set statistics call',\r\n  props<{call: Observable<LeafStatistic[]>}>()\r\n)"
                },
                {
                    "name": "setStatisticsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Statistics store] Set statistics failure',\r\n  props<{error: any}>()\r\n)"
                },
                {
                    "name": "setStatisticsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Statistics store] Set statistics success',\r\n  props<{data: LeafStatistic[]}>()\r\n)"
                }
            ],
            "src/app/app.route.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.route.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\r\n  {\r\n    path: '',\r\n    redirectTo: '/settings',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'templates',\r\n    component: TemplatesComponent,\r\n  },\r\n  {\r\n    path: 'statistics',\r\n    component: StatisticsPageComponent,\r\n  },\r\n  {\r\n    path: 'forbidden',\r\n    component: ForbiddenComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginPageComponent,\r\n  },\r\n  {\r\n    path: 'register',\r\n    component: RegisterPageComponent,\r\n  },\r\n  ...accountSettingsPageRoutes,\r\n  ...adminSettingsPageRoutes\r\n]"
                }
            ],
            "projects/ngleaf/src/store/core/administration/administration.selectors.ts": [
                {
                    "name": "selectAdministrationSession",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.administration"
                },
                {
                    "name": "selectAdministrators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAdministrationSession,\r\n (state: AdmininistrationState) => state.administrators\r\n)"
                },
                {
                    "name": "selectAuthorizedEmails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAdministrationSession,\r\n  (state: AdmininistrationState) => state.authorizedEmails\r\n)"
                },
                {
                    "name": "selectUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAdministrationSession,\r\n (state: AdmininistrationState) => state.users\r\n)"
                }
            ],
            "projects/ngleaf/src/store/core/session/session.selectors.ts": [
                {
                    "name": "selectCurrentAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.currentAccount\r\n)"
                },
                {
                    "name": "selectCurrentAccountData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCurrentAccount,\r\n  (currentAccount: AsyncType<LeafAccountModel>) => currentAccount.data\r\n)"
                },
                {
                    "name": "selectIsPending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCurrentAccount,\r\n  selectSessionToken,\r\n  selectSendResetPasswordKey,\r\n  selectResetPassword,\r\n  selectUpdatePassword,\r\n (\r\n   currentAccount: AsyncType<LeafAccountModel>,\r\n   sessionToken: AsyncType<JWTModel>,\r\n   sendResetPasswordKey: AsyncType<void>,\r\n   resetPassword: AsyncType<void>,\r\n   updatePassword: AsyncType<LeafAccountModel>\r\n ) => currentAccount.status.pending || sessionToken.status.pending || sendResetPasswordKey.status.pending || resetPassword.status.pending || updatePassword.status.pending\r\n)"
                },
                {
                    "name": "selectResetPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.resetPassword\r\n)"
                },
                {
                    "name": "selectSendResetPasswordKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.sendResetPasswordKey\r\n)"
                },
                {
                    "name": "selectSession",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.session"
                },
                {
                    "name": "selectSessionState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectSession,\r\n (state: SessionState) => state\r\n)"
                },
                {
                    "name": "selectSessionToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.sessionToken\r\n)"
                },
                {
                    "name": "selectUpdatePassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n   selectSession,\r\n  (state: SessionState) => state.updatePassword\r\n)"
                }
            ],
            "projects/ngleaf/src/store/core/notification/notification.selectors.ts": [
                {
                    "name": "selectNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/notification/notification.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.notification"
                },
                {
                    "name": "selectNotifications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/notification/notification.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectNotification,\r\n  (state: NotificationState) => state.notifications\r\n)"
                }
            ],
            "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts": [
                {
                    "name": "selectStatistics",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectStatisticsFromAppState,\r\n  (state: StatisticsState) => state.statistics\r\n)"
                },
                {
                    "name": "selectStatisticsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectStatistics,\r\n  (statistics: AsyncType<LeafStatistic[]>) => statistics.data\r\n)"
                },
                {
                    "name": "selectStatisticsFromAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.statistics"
                },
                {
                    "name": "selectStatisticsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectStatisticsFromAppState,\r\n (state: StatisticsState) => state\r\n)"
                }
            ],
            "projects/ngleaf/src/store/core/administration/administration.actions.ts": [
                {
                    "name": "setAdministrators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Administration store] Set administrators',\r\n    props<{administrators: string[]}>()\r\n)"
                },
                {
                    "name": "setAuthorizedEmails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Administration store] Set authorized emails',\r\n    props<{authorizedEmails: LeafAuthorizedEmailModel[]}>()\r\n)"
                },
                {
                    "name": "setUsers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n    '[Administration store] Set users',\r\n    props<{users: LeafAccountModel[]}>()\r\n)"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngleaf/src/store/core/administration/administration.reducers.ts": [
                {
                    "name": "administrationReducer",
                    "file": "projects/ngleaf/src/store/core/administration/administration.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducerState",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "AdmininistrationState",
                    "jsdoctags": [
                        {
                            "name": "reducerState",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.service.ts": [
                {
                    "name": "applicationHttpClientCreator",
                    "file": "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngleaf/src/store/common/async-type.ts": [
                {
                    "name": "asyncTypeFailure",
                    "file": "projects/ngleaf/src/store/common/async-type.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "asyncObject",
                            "type": "AsyncType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "asyncObject",
                            "type": "AsyncType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "asyncTypeSuccess",
                    "file": "projects/ngleaf/src/store/common/async-type.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "asyncObject",
                            "type": "AsyncType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "asyncObject",
                            "type": "AsyncType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createAsyncTypeFromCall",
                    "file": "projects/ngleaf/src/store/common/async-type.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "call",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "call",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEmptyAsyncType",
                    "file": "projects/ngleaf/src/store/common/async-type.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "projects/ngleaf/src/helpers/accountHelper.ts": [
                {
                    "name": "getModule",
                    "file": "projects/ngleaf/src/helpers/accountHelper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "account",
                            "type": "LeafAccountModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "moduleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any | undefined",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "LeafAccountModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "moduleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngleaf/src/store/core/notification/notification.reducers.ts": [
                {
                    "name": "notificationReducer",
                    "file": "projects/ngleaf/src/store/core/notification/notification.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducerState",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "NotificationState",
                    "jsdoctags": [
                        {
                            "name": "reducerState",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngleaf/src/store/core/session/session.reducers.ts": [
                {
                    "name": "sessionReducer",
                    "file": "projects/ngleaf/src/store/core/session/session.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducerState",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "SessionState",
                    "jsdoctags": [
                        {
                            "name": "reducerState",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ngleaf/src/store/core/statistics/statistics.reducers.ts": [
                {
                    "name": "statisticsReducer",
                    "file": "projects/ngleaf/src/store/core/statistics/statistics.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducerState",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "StatisticsState",
                    "jsdoctags": [
                        {
                            "name": "reducerState",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ngleaf/src/directives/adaptive-view/adaptive-view.directive.ts": [
                {
                    "name": "AdaptiveViewParameters",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"only-mobile\" | \"only-tablet\" | \"only-desktop\" | \"except-mobile\" | \"except-tablet\" | \"except-desktop\"",
                    "file": "projects/ngleaf/src/directives/adaptive-view/adaptive-view.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts": [
                {
                    "name": "GenericFormInputConfig",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "GenericFormInputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"input\" | \"textarea\" | \"radios\" | \"checkbox\" | \"slider\"",
                    "file": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/ngleaf/src/components/vanilla/leaf-login-vanilla/leaf-login-vanilla.component.ts": [
                {
                    "name": "LeafLoginPasswordCheckClasses",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngleaf/src/components/vanilla/leaf-login-vanilla/leaf-login-vanilla.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "LeafLoginVanillaError",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngleaf/src/components/vanilla/leaf-login-vanilla/leaf-login-vanilla.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts": [
                {
                    "name": "LeafPasswordForgottenVanilla_PasswordChangeError",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "LeafPasswordForgottenVanilla_SendPasswordChangeError",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "LeafPasswordForgottenVanillaError",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "LeafPasswordForgottenVanillaState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"SendPassword\" | \"PasswordChange\"",
                    "file": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/ngleaf/src/components/vanilla/leaf-register-vanilla/leaf-register-vanilla.component.ts": [
                {
                    "name": "LeafRegisterPasswordCheckClasses",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngleaf/src/components/vanilla/leaf-register-vanilla/leaf-register-vanilla.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "LeafRegisterVanillaError",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngleaf/src/components/vanilla/leaf-register-vanilla/leaf-register-vanilla.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngleaf/src/api/clients/api-client-config.module.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafApiClientConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/clients/api-client-config.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeafApiClientConfigServiceToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LeafAuthHttpClient",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRequestOptions",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/clients/auth-http-client/leaf-auth-http-client.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "applicationHttpClientCreator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/clients/session-api-client/account-api-client.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountApiClient",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/clients/statistics-api-client/statistics-api-client.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatisticsApiClientService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/jwt.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JWTModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/leaf-account.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafAccountModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/leaf-account.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafPrivateTokenModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/leaf-account.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafUserModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/leaf-authorized-email.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafAuthorizedEmailModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/leaf-file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafFileModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/leaf-statistic.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafStatistic",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/login.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/password-changing.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordChangingModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/password-resetting.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordResettingModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/api/models/registration.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegistrationModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/confirm-dialog/confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/confirm-dialog/confirm-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConfirmDialogModel",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckboxConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenericFormActionConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenericFormConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenericFormGridConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenericInputConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RadioConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RadiosConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SliderConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/generic-form/generic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/header-account/account-popover-content/account-popover-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountPopoverContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/header-account/header-account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderAccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/imageUpload/imageUpload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/imageUpload/imageUpload.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CUSTOM_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/password-update/password-update.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordUpdateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/statistics-viewer/chart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChartSerie",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/statistics-viewer/chart.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChartValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/statistics-viewer/statistics-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/user-selector/user-autocomplete.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAutocompleteService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/common/user-selector/user-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-access-tokens/account-settings-access-tokens.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountSettingsAccessTokensComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-avatar/account-settings-avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountSettingsAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-general/account-settings-general.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountSettingsGeneralComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountSettingsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-page.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountSettingsPageRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/account-settings-page/account-settings-password/account-settings-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountSettingsPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-administrators/admin-settings-administrators.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminSettingsAdministratorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminSettingsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-page.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adminSettingsPageRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-users/admin-settings-users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminSettingsUsersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/admin-settings-page/admin-settings-whitelist/admin-settings-whitelist.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminSettingsWhitelistComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/forbidden/forbidden.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForbiddenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/login/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/register/register-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/pages/statistics-page/statistics-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/templates/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/templates/navigation/navigation.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/vanilla/leaf-login-vanilla/leaf-login-vanilla.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeafLoginVanillaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/vanilla/leaf-password-forgotten-vanilla/leaf-password-forgotten-vanilla.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeafPasswordForgottenVanillaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/components/vanilla/leaf-register-vanilla/leaf-register-vanilla.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeafRegisterVanillaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/configs/http.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptionsBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/directives/adaptive-view/adaptive-view.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdaptiveViewDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/guards/admin/leaf-admin.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LeafAdminGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/guards/auth/leaf-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LeafAuthGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/helpers/accountHelper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/models/leaf-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApisConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/models/leaf-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/models/leaf-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafNavigationConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/models/leaf-notification.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeafNotificationModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/core/admin/leaf-admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LeafAdminService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/core/notification/leaf-notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LeafNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/core/session/leaf-session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LeafSessionService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/core/statistics/statistics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatisticsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/files/leaf-upload-file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LeafUploadFileService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/leaf-config.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeafConfigServiceToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/web-images-seeker/leaf-web-images-seeker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LeafWebImagesSeekerService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/web-images-seeker/web-images-seeker-dialog/leaf-web-images-seeker-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeafWebImagesSeekerDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/services/web-images-seeker/web-images-seeker-dialog/leaf-web-images-seeker-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Data",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/common/async-type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AsyncStatus",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/common/async-type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AsyncType",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/common/async-type.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "asyncTypeFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/common/async-type.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "asyncTypeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/common/async-type.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createAsyncTypeFromCall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/common/async-type.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createEmptyAsyncType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setAdministrators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setAuthorizedEmails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "administrationReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAdministrationSession",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAdministrators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthorizedEmails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUsers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/administration/administration.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdmininistrationState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/core.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "leafCoreStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/notification/notification.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emitNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/notification/notification.reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "notificationReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/notification/notification.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/notification/notification.selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/notification/notification.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/notification/notification.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNotifications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/notification/notification.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetCurrentAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetResetPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetSendResetPasswordKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetSessionToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetUpdatePassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setCurrentAccountCall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setCurrentAccountFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setCurrentAccountSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setResetPasswordCall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setResetPasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setResetPasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSendResetPasswordKeyCall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSendResetPasswordKeyFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSendResetPasswordKeySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSessionToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSessionTokenCall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSessionTokenFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSessionTokenSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setUpdatePasswordCall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setUpdatePasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setUpdatePasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sessionReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentAccountData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsPending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectResetPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSendResetPasswordKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSession",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSessionState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSessionToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUpdatePassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/session/session.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SessionState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetStatistics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setStatisticsCall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setStatisticsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setStatisticsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatisticsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "statisticsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStatistics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStatisticsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStatisticsFromAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStatisticsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/store/core/statistics/statistics.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatisticsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngleaf/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "leafApiClientConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "leafConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.route.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/templates/templates.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplatesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}